
r820t_simple_sdr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001758  0800e0a8  0800e0a8  0001e0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f800  0800f800  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800f800  0800f800  0001f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f808  0800f808  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f808  0800f808  0001f808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f80c  0800f80c  0001f80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800f810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020250  2**0
                  CONTENTS
 10 .bss          00000c70  20000250  20000250  00020250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ec0  20000ec0  00020250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d4d  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477f  00000000  00000000  00045fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001ded2  00000000  00000000  0004a74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001058  00000000  00000000  00068620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000042c8  00000000  00000000  00069678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021382  00000000  00000000  0006d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000061f3  00000000  00000000  0008ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00094eb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005654  00000000  00000000  00094f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e08c 	.word	0x0800e08c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800e08c 	.word	0x0800e08c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <CS43_TIMEOUT_UserCallback>:
/*
 * exception handler for I2C timeout
 */
static void CS43_TIMEOUT_UserCallback(void)
{
	UART_printf("\r\nFailed to communicate with CS43L22\n\r");
 8001018:	f24e 00a8 	movw	r0, #57512	; 0xe0a8
{
 800101c:	b508      	push	{r3, lr}
	UART_printf("\r\nFailed to communicate with CS43L22\n\r");
 800101e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001022:	f001 fd93 	bl	8002b4c <UART_printf>
  /* Block communication and all processes */
  while (1)
 8001026:	e7fe      	b.n	8001026 <CS43_TIMEOUT_UserCallback+0xe>

08001028 <CS43_Init>:
}

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8001028:	b084      	sub	sp, #16
 800102a:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800102c:	f240 74c4 	movw	r4, #1988	; 0x7c4
{
 8001030:	b083      	sub	sp, #12
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001032:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
 8001036:	ad08      	add	r5, sp, #32
 8001038:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800103c:	6825      	ldr	r5, [r4, #0]
{
 800103e:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001042:	2300      	movs	r3, #0
 8001044:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001048:	69eb      	ldr	r3, [r5, #28]
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(CS43L22_reset_GPIO_Port, CS43L22_reset_Pin, GPIO_PIN_SET);
 800104a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	61eb      	str	r3, [r5, #28]
	HAL_GPIO_WritePin(CS43L22_reset_GPIO_Port, CS43L22_reset_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800105c:	f004 fcf0 	bl	8005a40 <HAL_GPIO_WritePin>
	iData[0] = reg;
 8001060:	f240 24c0 	movw	r4, #704	; 0x2c0
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8001064:	f240 206c 	movw	r0, #620	; 0x26c
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	a908      	add	r1, sp, #32
	iData[0] = reg;
 800106c:	f2c2 0400 	movt	r4, #8192	; 0x2000
	i2cx = i2c_handle;
 8001070:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001074:	f007 fa44 	bl	8008500 <memcpy>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001078:	2564      	movs	r5, #100	; 0x64
	iData[0] = reg;
 800107a:	f240 2202 	movw	r2, #514	; 0x202
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800107e:	f240 206c 	movw	r0, #620	; 0x26c
 8001082:	9500      	str	r5, [sp, #0]
 8001084:	2302      	movs	r3, #2
	iData[0] = reg;
 8001086:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001088:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800108c:	4622      	mov	r2, r4
 800108e:	2194      	movs	r1, #148	; 0x94
 8001090:	f004 feac 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001094:	2800      	cmp	r0, #0
 8001096:	f040 8172 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800109a:	f64a 7204 	movw	r2, #44804	; 0xaf04
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800109e:	f240 206c 	movw	r0, #620	; 0x26c
 80010a2:	9500      	str	r5, [sp, #0]
 80010a4:	2302      	movs	r3, #2
	iData[0] = reg;
 80010a6:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010ac:	4622      	mov	r2, r4
 80010ae:	2194      	movs	r1, #148	; 0x94
 80010b0:	f004 fe9c 	bl	8005dec <HAL_I2C_Master_Transmit>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	f040 8162 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80010ba:	f248 0205 	movw	r2, #32773	; 0x8005
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010be:	f240 206c 	movw	r0, #620	; 0x26c
 80010c2:	9500      	str	r5, [sp, #0]
 80010c4:	2302      	movs	r3, #2
	iData[0] = reg;
 80010c6:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010cc:	4622      	mov	r2, r4
 80010ce:	2194      	movs	r1, #148	; 0x94
 80010d0:	f004 fe8c 	bl	8005dec <HAL_I2C_Master_Transmit>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	f040 8152 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80010da:	2706      	movs	r7, #6
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80010dc:	f240 206c 	movw	r0, #620	; 0x26c
 80010e0:	9500      	str	r5, [sp, #0]
 80010e2:	2301      	movs	r3, #1
	iData[0] = reg;
 80010e4:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80010e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010ea:	4622      	mov	r2, r4
 80010ec:	2194      	movs	r1, #148	; 0x94
 80010ee:	f004 fe7d 	bl	8005dec <HAL_I2C_Master_Transmit>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	f040 8143 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80010f8:	f240 206c 	movw	r0, #620	; 0x26c
 80010fc:	9500      	str	r5, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001104:	4622      	mov	r2, r4
 8001106:	2194      	movs	r1, #148	; 0x94
 8001108:	f005 f800 	bl	800610c <HAL_I2C_Master_Receive>
 800110c:	2800      	cmp	r0, #0
 800110e:	f040 8136 	bne.w	800137e <CS43_Init+0x356>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
	write_register(CLOCKING_CONTROL,&iData[1]);
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001112:	7863      	ldrb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001114:	9500      	str	r5, [sp, #0]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001116:	f003 0320 	and.w	r3, r3, #32
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
	iData[1] &= ~(1 << 4);  // No DSP mode
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
	iData[1] |= (1 << 2);
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800111a:	f043 0307 	orr.w	r3, r3, #7
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800111e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001122:	7063      	strb	r3, [r4, #1]
	iData[0] = reg;
 8001124:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001126:	2302      	movs	r3, #2
 8001128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800112c:	4622      	mov	r2, r4
 800112e:	2194      	movs	r1, #148	; 0x94
 8001130:	f004 fe5c 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001134:	2800      	cmp	r0, #0
 8001136:	f040 8122 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800113a:	2708      	movs	r7, #8
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800113c:	f240 206c 	movw	r0, #620	; 0x26c
 8001140:	9500      	str	r5, [sp, #0]
 8001142:	2301      	movs	r3, #1
	iData[0] = reg;
 8001144:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001146:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800114a:	4622      	mov	r2, r4
 800114c:	2194      	movs	r1, #148	; 0x94
 800114e:	f004 fe4d 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001152:	2800      	cmp	r0, #0
 8001154:	f040 8113 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001158:	2301      	movs	r3, #1
 800115a:	f240 206c 	movw	r0, #620	; 0x26c
 800115e:	9500      	str	r5, [sp, #0]
 8001160:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001164:	18e2      	adds	r2, r4, r3
 8001166:	2194      	movs	r1, #148	; 0x94
 8001168:	f004 ffd0 	bl	800610c <HAL_I2C_Master_Receive>
 800116c:	2800      	cmp	r0, #0
 800116e:	f040 8106 	bne.w	800137e <CS43_Init+0x356>
	write_register(INTERFACE_CONTROL1,&iData[1]);
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001172:	7863      	ldrb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001174:	9500      	str	r5, [sp, #0]
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001176:	f023 030f 	bic.w	r3, r3, #15
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800117a:	f043 0301 	orr.w	r3, r3, #1
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800117e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001182:	7063      	strb	r3, [r4, #1]
	iData[0] = reg;
 8001184:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001186:	2302      	movs	r3, #2
 8001188:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800118c:	4622      	mov	r2, r4
 800118e:	2194      	movs	r1, #148	; 0x94
 8001190:	f004 fe2c 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001194:	2800      	cmp	r0, #0
 8001196:	f040 80f2 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800119a:	2109      	movs	r1, #9
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800119c:	f240 206c 	movw	r0, #620	; 0x26c
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	2301      	movs	r3, #1
	iData[0] = reg;
 80011a4:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80011a6:	4622      	mov	r2, r4
 80011a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011ac:	2194      	movs	r1, #148	; 0x94
 80011ae:	f004 fe1d 	bl	8005dec <HAL_I2C_Master_Transmit>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	f040 80e3 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80011b8:	2564      	movs	r5, #100	; 0x64
 80011ba:	f240 22c1 	movw	r2, #705	; 0x2c1
 80011be:	f240 206c 	movw	r0, #620	; 0x26c
 80011c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011c6:	9500      	str	r5, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011ce:	2194      	movs	r1, #148	; 0x94
 80011d0:	f004 ff9c 	bl	800610c <HAL_I2C_Master_Receive>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f040 80d2 	bne.w	800137e <CS43_Init+0x356>
	write_register(PASSTHROUGH_A,&iData[1]);
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80011da:	7863      	ldrb	r3, [r4, #1]
 80011dc:	f023 030f 	bic.w	r3, r3, #15
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80011e0:	f043 0301 	orr.w	r3, r3, #1
	iData[0] = reg;
 80011e4:	2109      	movs	r1, #9
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011e6:	f240 22c0 	movw	r2, #704	; 0x2c0
 80011ea:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80011ee:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011f4:	9500      	str	r5, [sp, #0]
 80011f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80011fa:	7063      	strb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011fc:	2194      	movs	r1, #148	; 0x94
 80011fe:	2302      	movs	r3, #2
 8001200:	f004 fdf4 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001204:	2800      	cmp	r0, #0
 8001206:	f040 80ba 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800120a:	230e      	movs	r3, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800120c:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001210:	f240 206c 	movw	r0, #620	; 0x26c
 8001214:	9500      	str	r5, [sp, #0]
 8001216:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 800121a:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800121c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001220:	2301      	movs	r3, #1
 8001222:	2194      	movs	r1, #148	; 0x94
 8001224:	f004 fde2 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001228:	2800      	cmp	r0, #0
 800122a:	f040 80a8 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800122e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8001232:	f240 206c 	movw	r0, #620	; 0x26c
 8001236:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800123a:	9500      	str	r5, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2194      	movs	r1, #148	; 0x94
 8001240:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001244:	f004 ff62 	bl	800610c <HAL_I2C_Master_Receive>
 8001248:	2800      	cmp	r0, #0
 800124a:	f040 8098 	bne.w	800137e <CS43_Init+0x356>
	write_register(PASSTHROUGH_B,&iData[1]);
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	if(outputMode == MODE_ANALOG_)
 800124e:	2e01      	cmp	r6, #1
 8001250:	f000 808e 	beq.w	8001370 <CS43_Init+0x348>
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
	}
	else if(outputMode == MODE_I2S)
 8001254:	2e00      	cmp	r6, #0
 8001256:	f000 8088 	beq.w	800136a <CS43_Init+0x342>
	iData[0] = reg;
 800125a:	230e      	movs	r3, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800125c:	2564      	movs	r5, #100	; 0x64
 800125e:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001262:	f240 206c 	movw	r0, #620	; 0x26c
 8001266:	9500      	str	r5, [sp, #0]
 8001268:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 800126c:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800126e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001272:	2302      	movs	r3, #2
 8001274:	2194      	movs	r1, #148	; 0x94
 8001276:	f004 fdb9 	bl	8005dec <HAL_I2C_Master_Transmit>
 800127a:	2800      	cmp	r0, #0
 800127c:	d17f      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800127e:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001282:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 8001286:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001288:	9500      	str	r5, [sp, #0]
 800128a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800128e:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 8001292:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001294:	2301      	movs	r3, #1
 8001296:	2194      	movs	r1, #148	; 0x94
 8001298:	f004 fda8 	bl	8005dec <HAL_I2C_Master_Transmit>
 800129c:	2800      	cmp	r0, #0
 800129e:	d16e      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80012a0:	f240 22c1 	movw	r2, #705	; 0x2c1
 80012a4:	f240 206c 	movw	r0, #620	; 0x26c
 80012a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80012ac:	9500      	str	r5, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012b4:	2194      	movs	r1, #148	; 0x94
 80012b6:	f004 ff29 	bl	800610c <HAL_I2C_Master_Receive>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d15f      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012be:	f240 22c0 	movw	r2, #704	; 0x2c0
 80012c2:	f240 206c 	movw	r0, #620	; 0x26c
 80012c6:	9500      	str	r5, [sp, #0]
 80012c8:	2302      	movs	r3, #2
 80012ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 80012ce:	8026      	strh	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012d0:	2194      	movs	r1, #148	; 0x94
 80012d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012d6:	f004 fd89 	bl	8005dec <HAL_I2C_Master_Transmit>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d14f      	bne.n	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80012de:	2314      	movs	r3, #20
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012e0:	f240 22c0 	movw	r2, #704	; 0x2c0
 80012e4:	f240 206c 	movw	r0, #620	; 0x26c
 80012e8:	9500      	str	r5, [sp, #0]
 80012ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 80012ee:	8023      	strh	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012f4:	2302      	movs	r3, #2
 80012f6:	2194      	movs	r1, #148	; 0x94
 80012f8:	f004 fd78 	bl	8005dec <HAL_I2C_Master_Transmit>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d13e      	bne.n	800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001300:	2315      	movs	r3, #21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001302:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001306:	f240 206c 	movw	r0, #620	; 0x26c
 800130a:	9500      	str	r5, [sp, #0]
 800130c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 8001310:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001312:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001316:	2302      	movs	r3, #2
 8001318:	2194      	movs	r1, #148	; 0x94
 800131a:	f004 fd67 	bl	8005dec <HAL_I2C_Master_Transmit>
 800131e:	bb70      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001320:	231a      	movs	r3, #26
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001322:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001326:	f240 206c 	movw	r0, #620	; 0x26c
 800132a:	9500      	str	r5, [sp, #0]
 800132c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 8001330:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001332:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001336:	2302      	movs	r3, #2
 8001338:	2194      	movs	r1, #148	; 0x94
 800133a:	f004 fd57 	bl	8005dec <HAL_I2C_Master_Transmit>
 800133e:	b9f0      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001340:	211b      	movs	r1, #27
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001342:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001346:	f240 206c 	movw	r0, #620	; 0x26c
 800134a:	9500      	str	r5, [sp, #0]
 800134c:	2302      	movs	r3, #2
	iData[0] = reg;
 800134e:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001350:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001354:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001358:	2194      	movs	r1, #148	; 0x94
 800135a:	f004 fd47 	bl	8005dec <HAL_I2C_Master_Transmit>
 800135e:	b970      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[1] = 0x00;
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
	write_register(PCM_VOLUME_A,&iData[1]);
	write_register(PCM_VOLUME_B,&iData[1]);
}
 8001360:	b003      	add	sp, #12
 8001362:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001366:	b004      	add	sp, #16
 8001368:	4770      	bx	lr
		iData[1] = 0x02;
 800136a:	2302      	movs	r3, #2
 800136c:	7063      	strb	r3, [r4, #1]
 800136e:	e774      	b.n	800125a <CS43_Init+0x232>
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8001370:	7863      	ldrb	r3, [r4, #1]
 8001372:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001376:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800137a:	7063      	strb	r3, [r4, #1]
 800137c:	e76d      	b.n	800125a <CS43_Init+0x232>
		CS43_TIMEOUT_UserCallback();
 800137e:	f7ff fe4b 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 8001382:	bf00      	nop

08001384 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001384:	b500      	push	{lr}
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
			break;
		default:
			break;
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001386:	f240 21c0 	movw	r1, #704	; 0x2c0
{
 800138a:	b083      	sub	sp, #12
	switch (side)
 800138c:	2803      	cmp	r0, #3
 800138e:	d82e      	bhi.n	80013ee <CS43_Enable_RightLeft+0x6a>
 8001390:	e8df f000 	tbb	[pc, r0]
 8001394:	2126021c 	.word	0x2126021c
 8001398:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
 800139c:	f2c2 0100 	movt	r1, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013a0:	2364      	movs	r3, #100	; 0x64
	iData[0] = reg;
 80013a2:	2004      	movs	r0, #4
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f240 22c0 	movw	r2, #704	; 0x2c0
	iData[0] = reg;
 80013aa:	7008      	strb	r0, [r1, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013ac:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80013b0:	f881 c001 	strb.w	ip, [r1, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013b4:	2302      	movs	r3, #2
 80013b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80013ba:	2194      	movs	r1, #148	; 0x94
 80013bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013c0:	f004 fd14 	bl	8005dec <HAL_I2C_Master_Transmit>
 80013c4:	b988      	cbnz	r0, 80013ea <CS43_Enable_RightLeft+0x66>
	write_register(POWER_CONTROL2,&iData[1]);
}
 80013c6:	b003      	add	sp, #12
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (side)
 80013cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80013d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013d4:	e7e4      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
			break;
 80013d6:	f04f 0caf 	mov.w	ip, #175	; 0xaf
 80013da:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013de:	e7df      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
			break;
 80013e0:	f04f 0cef 	mov.w	ip, #239	; 0xef
 80013e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013e8:	e7da      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
		CS43_TIMEOUT_UserCallback();
 80013ea:	f7ff fe15 	bl	8001018 <CS43_TIMEOUT_UserCallback>
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80013ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80013f2:	f891 c001 	ldrb.w	ip, [r1, #1]
 80013f6:	f04c 0c0f 	orr.w	ip, ip, #15
 80013fa:	e7d1      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>

080013fc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
	int8_t tempVol = volume - 50;
	tempVol = tempVol*(127/50);
	uint8_t myVolume =  (uint8_t )tempVol;
	iData[1] = myVolume;
 80013fe:	f240 25c0 	movw	r5, #704	; 0x2c0
 8001402:	f2c2 0500 	movt	r5, #8192	; 0x2000
{
 8001406:	b082      	sub	sp, #8
	int8_t tempVol = volume - 50;
 8001408:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
	tempVol = tempVol*(127/50);
 800140c:	005b      	lsls	r3, r3, #1
	iData[0] = reg;
 800140e:	2214      	movs	r2, #20
{
 8001410:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001412:	2664      	movs	r6, #100	; 0x64
 8001414:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] = myVolume;
 8001418:	706b      	strb	r3, [r5, #1]
	iData[0] = reg;
 800141a:	702a      	strb	r2, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800141c:	9600      	str	r6, [sp, #0]
 800141e:	2302      	movs	r3, #2
 8001420:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001424:	462a      	mov	r2, r5
 8001426:	2194      	movs	r1, #148	; 0x94
 8001428:	f004 fce0 	bl	8005dec <HAL_I2C_Master_Transmit>
 800142c:	2800      	cmp	r0, #0
 800142e:	d140      	bne.n	80014b2 <CS43_SetVolume+0xb6>
	iData[0] = reg;
 8001430:	2115      	movs	r1, #21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001432:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 8001436:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001438:	9600      	str	r6, [sp, #0]
 800143a:	2302      	movs	r3, #2
 800143c:	462a      	mov	r2, r5
 800143e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001442:	2194      	movs	r1, #148	; 0x94
 8001444:	f004 fcd2 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001448:	bb98      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
	
	iData[1] = VOLUME_CONVERT_D(volume);
 800144a:	2c64      	cmp	r4, #100	; 0x64
 800144c:	d924      	bls.n	8001498 <CS43_SetVolume+0x9c>
 800144e:	2318      	movs	r3, #24
	iData[0] = reg;
 8001450:	2120      	movs	r1, #32
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001452:	2464      	movs	r4, #100	; 0x64
 8001454:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001458:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] = VOLUME_CONVERT_D(volume);
 800145c:	706b      	strb	r3, [r5, #1]
	iData[0] = reg;
 800145e:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001460:	9400      	str	r4, [sp, #0]
 8001462:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001466:	2302      	movs	r3, #2
 8001468:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800146c:	2194      	movs	r1, #148	; 0x94
 800146e:	f004 fcbd 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001472:	b9f0      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	iData[0] = reg;
 8001474:	2121      	movs	r1, #33	; 0x21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001476:	f240 22c0 	movw	r2, #704	; 0x2c0
 800147a:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 800147e:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001488:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800148c:	2194      	movs	r1, #148	; 0x94
 800148e:	f004 fcad 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001492:	b970      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
}
 8001494:	b002      	add	sp, #8
 8001496:	bd70      	pop	{r4, r5, r6, pc}
	iData[1] = VOLUME_CONVERT_D(volume);
 8001498:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800149c:	f248 541f 	movw	r4, #34079	; 0x851f
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	f2c5 14eb 	movt	r4, #20971	; 0x51eb
 80014a6:	fba4 2303 	umull	r2, r3, r4, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	3b18      	subs	r3, #24
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e7ce      	b.n	8001450 <CS43_SetVolume+0x54>
		CS43_TIMEOUT_UserCallback();
 80014b2:	f7ff fdb1 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 80014b6:	bf00      	nop

080014b8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80014ba:	f240 24c0 	movw	r4, #704	; 0x2c0
{
 80014be:	b082      	sub	sp, #8
	iData[0] = reg;
 80014c0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80014c4:	f44f 4119 	mov.w	r1, #39168	; 0x9900
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014c8:	2564      	movs	r5, #100	; 0x64
 80014ca:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80014ce:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014d0:	9500      	str	r5, [sp, #0]
 80014d2:	2302      	movs	r3, #2
 80014d4:	4622      	mov	r2, r4
 80014d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014da:	2194      	movs	r1, #148	; 0x94
 80014dc:	f004 fc86 	bl	8005dec <HAL_I2C_Master_Transmit>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d17c      	bne.n	80015de <CS43_Start+0x126>
	iData[0] = reg;
 80014e4:	f248 0147 	movw	r1, #32839	; 0x8047
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014e8:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80014ec:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014ee:	9500      	str	r5, [sp, #0]
 80014f0:	2302      	movs	r3, #2
 80014f2:	4622      	mov	r2, r4
 80014f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014f8:	2194      	movs	r1, #148	; 0x94
 80014fa:	f004 fc77 	bl	8005dec <HAL_I2C_Master_Transmit>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d16d      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001502:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 8001506:	2632      	movs	r6, #50	; 0x32
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001508:	9500      	str	r5, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	4622      	mov	r2, r4
 800150e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001512:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001514:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001516:	f004 fc69 	bl	8005dec <HAL_I2C_Master_Transmit>
 800151a:	2800      	cmp	r0, #0
 800151c:	d15f      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800151e:	2301      	movs	r3, #1
 8001520:	f240 206c 	movw	r0, #620	; 0x26c
 8001524:	9500      	str	r5, [sp, #0]
 8001526:	18e2      	adds	r2, r4, r3
 8001528:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800152c:	2194      	movs	r1, #148	; 0x94
 800152e:	f004 fded 	bl	800610c <HAL_I2C_Master_Receive>
 8001532:	2800      	cmp	r0, #0
 8001534:	d153      	bne.n	80015de <CS43_Start+0x126>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
	write_register(CONFIG_47,&iData[1]);
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
	iData[1] |= 0x80;
 8001536:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001538:	9500      	str	r5, [sp, #0]
	iData[1] |= 0x80;
 800153a:	f062 027f 	orn	r2, r2, #127	; 0x7f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800153e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |= 0x80;
 8001542:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001544:	2302      	movs	r3, #2
 8001546:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800154a:	4622      	mov	r2, r4
 800154c:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800154e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001550:	f004 fc4c 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001554:	2800      	cmp	r0, #0
 8001556:	d142      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001558:	f240 206c 	movw	r0, #620	; 0x26c
 800155c:	9500      	str	r5, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	4622      	mov	r2, r4
 8001562:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001566:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001568:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800156a:	f004 fc3f 	bl	8005dec <HAL_I2C_Master_Transmit>
 800156e:	bbb0      	cbnz	r0, 80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001570:	2301      	movs	r3, #1
 8001572:	f240 206c 	movw	r0, #620	; 0x26c
 8001576:	9500      	str	r5, [sp, #0]
 8001578:	18e2      	adds	r2, r4, r3
 800157a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800157e:	2194      	movs	r1, #148	; 0x94
 8001580:	f004 fdc4 	bl	800610c <HAL_I2C_Master_Receive>
 8001584:	bb58      	cbnz	r0, 80015de <CS43_Start+0x126>
	write_register(CONFIG_32,&iData[1]);
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
	iData[1] &= ~(0x80);
 8001586:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001588:	9500      	str	r5, [sp, #0]
	iData[1] &= ~(0x80);
 800158a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800158e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] &= ~(0x80);
 8001592:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001594:	2302      	movs	r3, #2
 8001596:	4622      	mov	r2, r4
 8001598:	2194      	movs	r1, #148	; 0x94
 800159a:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 800159e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015a0:	f004 fc24 	bl	8005dec <HAL_I2C_Master_Transmit>
 80015a4:	b9d8      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[0] = reg;
 80015a6:	8020      	strh	r0, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015a8:	f240 206c 	movw	r0, #620	; 0x26c
 80015ac:	9500      	str	r5, [sp, #0]
 80015ae:	2302      	movs	r3, #2
 80015b0:	4622      	mov	r2, r4
 80015b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	f004 fc18 	bl	8005dec <HAL_I2C_Master_Transmit>
 80015bc:	b978      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[0] = reg;
 80015be:	f649 6102 	movw	r1, #40450	; 0x9e02
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015c2:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80015c6:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015c8:	9500      	str	r5, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	4622      	mov	r2, r4
 80015ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015d2:	2194      	movs	r1, #148	; 0x94
 80015d4:	f004 fc0a 	bl	8005dec <HAL_I2C_Master_Transmit>
 80015d8:	b908      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[1] = 0x00;
	write_register(CONFIG_00,&iData[1]);
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
	write_register(POWER_CONTROL1,&iData[1]);
}
 80015da:	b002      	add	sp, #8
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 80015de:	f7ff fd1b 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 80015e2:	bf00      	nop

080015e4 <CS43_Mute>:
	write_register(POWER_CONTROL1,&iData[1]);
}

//02-08-2025 - Maciej Fajfer
void CS43_Mute(void)
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80015e6:	f240 24c0 	movw	r4, #704	; 0x2c0
{
 80015ea:	b082      	sub	sp, #8
	iData[0] = reg;
 80015ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80015f0:	2564      	movs	r5, #100	; 0x64
 80015f2:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80015f6:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80015f8:	9500      	str	r5, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	4622      	mov	r2, r4
 80015fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001602:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001604:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001606:	f004 fbf1 	bl	8005dec <HAL_I2C_Master_Transmit>
 800160a:	2800      	cmp	r0, #0
 800160c:	d145      	bne.n	800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800160e:	2301      	movs	r3, #1
 8001610:	f240 206c 	movw	r0, #620	; 0x26c
 8001614:	9500      	str	r5, [sp, #0]
 8001616:	18e2      	adds	r2, r4, r3
 8001618:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800161c:	2194      	movs	r1, #148	; 0x94
 800161e:	f004 fd75 	bl	800610c <HAL_I2C_Master_Receive>
 8001622:	2800      	cmp	r0, #0
 8001624:	d139      	bne.n	800169a <CS43_Mute+0xb6>
	read_register(PLAYBACK_CONTROL, &iData[1]);
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 8001626:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001628:	9500      	str	r5, [sp, #0]
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 800162a:	f062 023f 	orn	r2, r2, #63	; 0x3f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800162e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 8001632:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001634:	2302      	movs	r3, #2
 8001636:	4622      	mov	r2, r4
 8001638:	2194      	movs	r1, #148	; 0x94
 800163a:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 800163e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001640:	f004 fbd4 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001644:	bb48      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001646:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 800164a:	260e      	movs	r6, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800164c:	9500      	str	r5, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	4622      	mov	r2, r4
 8001652:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001656:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001658:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800165a:	f004 fbc7 	bl	8005dec <HAL_I2C_Master_Transmit>
 800165e:	b9e0      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001660:	2301      	movs	r3, #1
 8001662:	f240 206c 	movw	r0, #620	; 0x26c
 8001666:	9500      	str	r5, [sp, #0]
 8001668:	18e2      	adds	r2, r4, r3
 800166a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800166e:	2194      	movs	r1, #148	; 0x94
 8001670:	f004 fd4c 	bl	800610c <HAL_I2C_Master_Receive>
 8001674:	b988      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	write_register(PLAYBACK_CONTROL,&iData[1]);

	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 8001676:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001678:	9500      	str	r5, [sp, #0]
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 800167a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800167e:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 8001682:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001684:	2302      	movs	r3, #2
 8001686:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800168a:	4622      	mov	r2, r4
 800168c:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800168e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001690:	f004 fbac 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001694:	b908      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
}
 8001696:	b002      	add	sp, #8
 8001698:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 800169a:	f7ff fcbd 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 800169e:	bf00      	nop

080016a0 <CS43_Unmute>:

//02-08-2025 - Maciej Fajfer
void CS43_Unmute(void)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80016a2:	f240 24c0 	movw	r4, #704	; 0x2c0
{
 80016a6:	b082      	sub	sp, #8
	iData[0] = reg;
 80016a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016ac:	2564      	movs	r5, #100	; 0x64
 80016ae:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 80016b2:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016b4:	9500      	str	r5, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	4622      	mov	r2, r4
 80016ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016be:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 80016c0:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016c2:	f004 fb93 	bl	8005dec <HAL_I2C_Master_Transmit>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d145      	bne.n	8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80016ca:	2301      	movs	r3, #1
 80016cc:	f240 206c 	movw	r0, #620	; 0x26c
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	18e2      	adds	r2, r4, r3
 80016d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016d8:	2194      	movs	r1, #148	; 0x94
 80016da:	f004 fd17 	bl	800610c <HAL_I2C_Master_Receive>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d139      	bne.n	8001756 <CS43_Unmute+0xb6>
	read_register(PLAYBACK_CONTROL, &iData[1]);
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016e2:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016e4:	9500      	str	r5, [sp, #0]
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016ea:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016ee:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016f0:	2302      	movs	r3, #2
 80016f2:	4622      	mov	r2, r4
 80016f4:	2194      	movs	r1, #148	; 0x94
 80016f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 80016fa:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016fc:	f004 fb76 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001700:	bb48      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001702:	f240 206c 	movw	r0, #620	; 0x26c
	iData[0] = reg;
 8001706:	260e      	movs	r6, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001708:	9500      	str	r5, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	4622      	mov	r2, r4
 800170e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001712:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001714:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001716:	f004 fb69 	bl	8005dec <HAL_I2C_Master_Transmit>
 800171a:	b9e0      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800171c:	2301      	movs	r3, #1
 800171e:	f240 206c 	movw	r0, #620	; 0x26c
 8001722:	9500      	str	r5, [sp, #0]
 8001724:	18e2      	adds	r2, r4, r3
 8001726:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800172a:	2194      	movs	r1, #148	; 0x94
 800172c:	f004 fcee 	bl	800610c <HAL_I2C_Master_Receive>
 8001730:	b988      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	write_register(PLAYBACK_CONTROL,&iData[1]);

	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 8001732:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001734:	9500      	str	r5, [sp, #0]
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 8001736:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800173a:	f240 206c 	movw	r0, #620	; 0x26c
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 800173e:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001740:	2302      	movs	r3, #2
 8001742:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001746:	4622      	mov	r2, r4
 8001748:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800174a:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800174c:	f004 fb4e 	bl	8005dec <HAL_I2C_Master_Transmit>
 8001750:	b908      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
}
 8001752:	b002      	add	sp, #8
 8001754:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 8001756:	f7ff fc5f 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 800175a:	bf00      	nop

0800175c <set_IQ_filters_coeff>:
	return rxchar_loc;
}

void set_IQ_filters_coeff(float* b, float* a, Output_demod_type_enum Demod_Type)
{
	if ( (Demod_Type == DEMOD_FM) || (Demod_Type == OUT_IQ) )
 800175c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
{
 8001760:	b500      	push	{lr}
	if ( (Demod_Type == DEMOD_FM) || (Demod_Type == OUT_IQ) )
 8001762:	d033      	beq.n	80017cc <set_IQ_filters_coeff+0x70>
	}
	else
	{
		//set coefficients for AM or CW and fc=15 kHz
		b[0] = b0__15kHz;
		b[1] = b1__15kHz;
 8001764:	f643 52f3 	movw	r2, #15859	; 0x3df3
		b[2] = b2__15kHz;
 8001768:	4694      	mov	ip, r2
		b[0] = b0__15kHz;
 800176a:	f64c 3328 	movw	r3, #52008	; 0xcb28
 800176e:	f2c3 3329 	movt	r3, #13097	; 0x3329
		b[1] = b1__15kHz;
 8001772:	f2c3 4254 	movt	r2, #13396	; 0x3454
		b[2] = b2__15kHz;
 8001776:	f2c3 4cd4 	movt	ip, #13524	; 0x34d4
		b[0] = b0__15kHz;
 800177a:	6003      	str	r3, [r0, #0]
		b[1] = b1__15kHz;
 800177c:	6042      	str	r2, [r0, #4]
		b[2] = b2__15kHz;
 800177e:	f8c0 c008 	str.w	ip, [r0, #8]
		b[3] = b3__15kHz;
 8001782:	f8c0 c00c 	str.w	ip, [r0, #12]
		b[4] = b4__15kHz;
 8001786:	6102      	str	r2, [r0, #16]
		b[5] = b5__15kHz;
 8001788:	6143      	str	r3, [r0, #20]
		a[0] = a0__15kHz;
 800178a:	f640 1c43 	movw	ip, #2371	; 0x943
		a[1] = a1__15kHz;
 800178e:	f645 70ae 	movw	r0, #24494	; 0x5fae
		a[2] = a2__15kHz;
 8001792:	f64f 7214 	movw	r2, #65300	; 0xff14
		a[3] = a3__15kHz;
 8001796:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
		a[0] = a0__15kHz;
 800179a:	f2cc 0c9d 	movt	ip, #49309	; 0xc09d
		a[1] = a1__15kHz;
 800179e:	f2c4 101a 	movt	r0, #16666	; 0x411a
		a[2] = a2__15kHz;
 80017a2:	f2cc 1217 	movt	r2, #49431	; 0xc117
		a[3] = a3__15kHz;
 80017a6:	f2c4 0395 	movt	r3, #16533	; 0x4095
		a[0] = a0__15kHz;
 80017aa:	46e6      	mov	lr, ip
		a[1] = a1__15kHz;
 80017ac:	4684      	mov	ip, r0
		a[2] = a2__15kHz;
 80017ae:	4610      	mov	r0, r2
		a[3] = a3__15kHz;
 80017b0:	461a      	mov	r2, r3
		a[4] = a4__15kHz;
 80017b2:	f64d 632a 	movw	r3, #56874	; 0xde2a
 80017b6:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
		a[0] = a0__15kHz;
 80017ba:	f8c1 e000 	str.w	lr, [r1]
		a[1] = a1__15kHz;
 80017be:	f8c1 c004 	str.w	ip, [r1, #4]
		a[2] = a2__15kHz;
 80017c2:	6088      	str	r0, [r1, #8]
		a[3] = a3__15kHz;
 80017c4:	60ca      	str	r2, [r1, #12]
		a[4] = a4__15kHz;
 80017c6:	610b      	str	r3, [r1, #16]
	}
}
 80017c8:	f85d fb04 	ldr.w	pc, [sp], #4
		b[1] = b1__105kHz;
 80017cc:	f646 72a7 	movw	r2, #28583	; 0x6fa7
		b[2] = b2__105kHz;
 80017d0:	4694      	mov	ip, r2
		b[0] = b0__105kHz;
 80017d2:	f64b 73b8 	movw	r3, #49080	; 0xbfb8
 80017d6:	f6c3 2312 	movt	r3, #14866	; 0x3a12
		b[1] = b1__105kHz;
 80017da:	f6c3 3237 	movt	r2, #15159	; 0x3b37
		b[2] = b2__105kHz;
 80017de:	f6c3 3cb7 	movt	ip, #15287	; 0x3bb7
		b[0] = b0__105kHz;
 80017e2:	6003      	str	r3, [r0, #0]
		b[1] = b1__105kHz;
 80017e4:	6042      	str	r2, [r0, #4]
		b[2] = b2__105kHz;
 80017e6:	f8c0 c008 	str.w	ip, [r0, #8]
		b[3] = b3__105kHz;
 80017ea:	f8c0 c00c 	str.w	ip, [r0, #12]
		b[4] = b4__105kHz;
 80017ee:	6102      	str	r2, [r0, #16]
		b[5] = b5__105kHz;
 80017f0:	6143      	str	r3, [r0, #20]
		a[0] = a0__105kHz;
 80017f2:	f24f 5c83 	movw	ip, #62851	; 0xf583
		a[1] = a1__105kHz;
 80017f6:	f248 107c 	movw	r0, #33148	; 0x817c
		a[2] = a2__105kHz;
 80017fa:	f24d 62fc 	movw	r2, #55036	; 0xd6fc
		a[3] = a3__105kHz;
 80017fe:	f64f 3346 	movw	r3, #64326	; 0xfb46
		a[0] = a0__105kHz;
 8001802:	f2cc 0c71 	movt	ip, #49265	; 0xc071
		a[1] = a1__105kHz;
 8001806:	f2c4 00c9 	movt	r0, #16585	; 0x40c9
		a[2] = a2__105kHz;
 800180a:	f2cc 02b5 	movt	r2, #49333	; 0xc0b5
		a[3] = a3__105kHz;
 800180e:	f2c4 0330 	movt	r3, #16432	; 0x4030
		a[0] = a0__105kHz;
 8001812:	46e6      	mov	lr, ip
		a[1] = a1__105kHz;
 8001814:	4684      	mov	ip, r0
		a[2] = a2__105kHz;
 8001816:	4610      	mov	r0, r2
		a[3] = a3__105kHz;
 8001818:	461a      	mov	r2, r3
		a[4] = a4__105kHz;
 800181a:	f24d 5313 	movw	r3, #54547	; 0xd513
 800181e:	f6cb 7314 	movt	r3, #48916	; 0xbf14
		a[0] = a0__105kHz;
 8001822:	f8c1 e000 	str.w	lr, [r1]
		a[1] = a1__105kHz;
 8001826:	f8c1 c004 	str.w	ip, [r1, #4]
		a[2] = a2__105kHz;
 800182a:	6088      	str	r0, [r1, #8]
		a[3] = a3__105kHz;
 800182c:	60ca      	str	r2, [r1, #12]
		a[4] = a4__105kHz;
 800182e:	610b      	str	r3, [r1, #16]
}
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4

08001834 <cmd_proc>:
	return 20.0*log10f(module/120.0);
}

/* process command line after <cr> */
void cmd_proc(void)
{
 8001834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001838:	ed2d 8b08 	vpush	{d8-d11}
	int argc, cmd, reg;
	unsigned long data, i;

	/* parse out three tokens: cmd arg arg */
	argc = 0;
	token = strtok(cmd_buffer, " ");
 800183c:	f24e 01dc 	movw	r1, #57564	; 0xe0dc
 8001840:	f240 20c4 	movw	r0, #708	; 0x2c4
{
 8001844:	b0a3      	sub	sp, #140	; 0x8c
	token = strtok(cmd_buffer, " ");
 8001846:	f6c0 0100 	movt	r1, #2048	; 0x800
 800184a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800184e:	f008 fb43 	bl	8009ed8 <strtok>
	while(token != NULL && argc < MAX_ARGS)
 8001852:	2800      	cmp	r0, #0
 8001854:	d05a      	beq.n	800190c <cmd_proc+0xd8>
	{
		argv[argc++] = token;
		token = strtok(NULL, " ");
 8001856:	f24e 06dc 	movw	r6, #57564	; 0xe0dc
 800185a:	4603      	mov	r3, r0
 800185c:	ad1d      	add	r5, sp, #116	; 0x74
	argc = 0;
 800185e:	2400      	movs	r4, #0
		token = strtok(NULL, " ");
 8001860:	f6c0 0600 	movt	r6, #2048	; 0x800
		argv[argc++] = token;
 8001864:	f845 3b04 	str.w	r3, [r5], #4
		token = strtok(NULL, " ");
 8001868:	4631      	mov	r1, r6
 800186a:	2000      	movs	r0, #0
 800186c:	f008 fb34 	bl	8009ed8 <strtok>
		argv[argc++] = token;
 8001870:	3401      	adds	r4, #1
	while(token != NULL && argc < MAX_ARGS)
 8001872:	4603      	mov	r3, r0
 8001874:	b108      	cbz	r0, 800187a <cmd_proc+0x46>
 8001876:	2c05      	cmp	r4, #5
 8001878:	d1f4      	bne.n	8001864 <cmd_proc+0x30>

	/* figure out which command it is */
	if(argc > 0)
	{
		cmd = 0;
		while(cmd_commands[cmd] != NULL)
 800187a:	f240 0500 	movw	r5, #0
 800187e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001882:	6829      	ldr	r1, [r5, #0]
 8001884:	2900      	cmp	r1, #0
 8001886:	d046      	beq.n	8001916 <cmd_proc+0xe2>
		{
			if(strcmp(argv[0], cmd_commands[cmd])==0)
 8001888:	9f1d      	ldr	r7, [sp, #116]	; 0x74
		cmd = 0;
 800188a:	2600      	movs	r6, #0
 800188c:	e004      	b.n	8001898 <cmd_proc+0x64>
		while(cmd_commands[cmd] != NULL)
 800188e:	f855 1f04 	ldr.w	r1, [r5, #4]!
				break;
			cmd++;
 8001892:	3601      	adds	r6, #1
		while(cmd_commands[cmd] != NULL)
 8001894:	2900      	cmp	r1, #0
 8001896:	d03e      	beq.n	8001916 <cmd_proc+0xe2>
			if(strcmp(argv[0], cmd_commands[cmd])==0)
 8001898:	4638      	mov	r0, r7
 800189a:	f7fe fc99 	bl	80001d0 <strcmp>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d1f5      	bne.n	800188e <cmd_proc+0x5a>
		}
	
		/* Can we handle this? */
		if(cmd_commands[cmd] != NULL)
		{
			UART_printf("\r\n");
 80018a2:	f24e 50f8 	movw	r0, #58872	; 0xe5f8
 80018a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018aa:	f001 f94f 	bl	8002b4c <UART_printf>

			/* Handle commands */
			switch(cmd)
 80018ae:	2e11      	cmp	r6, #17
 80018b0:	d82c      	bhi.n	800190c <cmd_proc+0xd8>
 80018b2:	e8df f016 	tbh	[pc, r6, lsl #1]
 80018b6:	004b      	.short	0x004b
 80018b8:	00d100b6 	.word	0x00d100b6
 80018bc:	01120012 	.word	0x01120012
 80018c0:	019300f2 	.word	0x019300f2
 80018c4:	0180013a 	.word	0x0180013a
 80018c8:	020100d9 	.word	0x020100d9
 80018cc:	021401a6 	.word	0x021401a6
 80018d0:	01fa0105 	.word	0x01fa0105
 80018d4:	01f201d1 	.word	0x01f201d1
 80018d8:	003b      	.short	0x003b
						UART_printf("write: 0x%02X 0x%02lX\r\n", reg, data);
					}
					break;
		
				case 3: 	/* dump */
                    UART_printf("dump:\r\n");
 80018da:	f24e 40d0 	movw	r0, #58576	; 0xe4d0
 80018de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018e2:	f001 f933 	bl	8002b4c <UART_printf>
                    for(i=0;i<0x20;i++)
                    {
                        reg = R820T2_i2c_read_reg_uncached(i);
                        UART_printf("%3d : 0x%02X\r\n", i, reg&0xff);
 80018e6:	f24e 45d8 	movw	r5, #58584	; 0xe4d8
                    for(i=0;i<0x20;i++)
 80018ea:	2400      	movs	r4, #0
                        UART_printf("%3d : 0x%02X\r\n", i, reg&0xff);
 80018ec:	f6c0 0500 	movt	r5, #2048	; 0x800
                        reg = R820T2_i2c_read_reg_uncached(i);
 80018f0:	b2e0      	uxtb	r0, r4
 80018f2:	f001 f96f 	bl	8002bd4 <R820T2_i2c_read_reg_uncached>
                        UART_printf("%3d : 0x%02X\r\n", i, reg&0xff);
 80018f6:	4621      	mov	r1, r4
                        reg = R820T2_i2c_read_reg_uncached(i);
 80018f8:	4602      	mov	r2, r0
                        UART_printf("%3d : 0x%02X\r\n", i, reg&0xff);
 80018fa:	4628      	mov	r0, r5
 80018fc:	f001 f926 	bl	8002b4c <UART_printf>
                    for(i=0;i<0x20;i++)
 8001900:	3401      	adds	r4, #1
                        HAL_Delay(5);
 8001902:	2005      	movs	r0, #5
 8001904:	f003 f9d2 	bl	8004cac <HAL_Delay>
                    for(i=0;i<0x20;i++)
 8001908:	2c20      	cmp	r4, #32
 800190a:	d1f1      	bne.n	80018f0 <cmd_proc+0xbc>
			}
		}
		else
			UART_printf(" Unknown command\r\n");
	}
}
 800190c:	b023      	add	sp, #140	; 0x8c
 800190e:	ecbd 8b08 	vpop	{d8-d11}
 8001912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			UART_printf(" Unknown command\r\n");
 8001916:	f64e 00dc 	movw	r0, #59612	; 0xe8dc
 800191a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 800191e:	b023      	add	sp, #140	; 0x8c
 8001920:	ecbd 8b08 	vpop	{d8-d11}
 8001924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("read - missing arg(s)\r\n");
 8001928:	f001 b910 	b.w	8002b4c <UART_printf>
					if(argc < 5)
 800192c:	2c05      	cmp	r4, #5
 800192e:	f000 83b4 	beq.w	800209a <cmd_proc+0x866>
						UART_printf("scan - missing arg(s)\r\n");
 8001932:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
 8001936:	f6c0 0000 	movt	r0, #2048	; 0x800
 800193a:	f001 f907 	bl	8002b4c <UART_printf>
}
 800193e:	b023      	add	sp, #140	; 0x8c
 8001940:	ecbd 8b08 	vpop	{d8-d11}
 8001944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					CS43_Unmute();
 8001948:	f7ff beaa 	b.w	80016a0 <CS43_Unmute>
					UART_printf("help - this message\r\n");
 800194c:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
 8001950:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001954:	f001 f8fa 	bl	8002b4c <UART_printf>
					UART_printf("read <addr> - read reg (R820T2)\r\n");
 8001958:	f24e 00f8 	movw	r0, #57592	; 0xe0f8
 800195c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001960:	f001 f8f4 	bl	8002b4c <UART_printf>
					UART_printf("write <addr> <data> - write reg, data (R820T2)\r\n");
 8001964:	f24e 101c 	movw	r0, #57628	; 0xe11c
 8001968:	f6c0 0000 	movt	r0, #2048	; 0x800
 800196c:	f001 f8ee 	bl	8002b4c <UART_printf>
					UART_printf("dump - dump all regs (R820T2)\r\n");
 8001970:	f24e 1050 	movw	r0, #57680	; 0xe150
 8001974:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001978:	f001 f8e8 	bl	8002b4c <UART_printf>
					UART_printf("freq <frequency> - Set freq in MHz\r\n");
 800197c:	f24e 1070 	movw	r0, #57712	; 0xe170
 8001980:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001984:	f001 f8e2 	bl	8002b4c <UART_printf>
					UART_printf("lna_gain <gain> - Set gain of LNA [0 - 15]\r\n");
 8001988:	f24e 1098 	movw	r0, #57752	; 0xe198
 800198c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001990:	f001 f8dc 	bl	8002b4c <UART_printf>
					UART_printf("mixer_gain <gain> - Set gain Mixer [0 - 15]\r\n");
 8001994:	f24e 10c8 	movw	r0, #57800	; 0xe1c8
 8001998:	f6c0 0000 	movt	r0, #2048	; 0x800
 800199c:	f001 f8d6 	bl	8002b4c <UART_printf>
					UART_printf("vga_gain <gain> - Set gain VGA [1 - 49.3 dB]\r\n");
 80019a0:	f24e 10f8 	movw	r0, #57848	; 0xe1f8
 80019a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019a8:	f001 f8d0 	bl	8002b4c <UART_printf>
					UART_printf("lna_agc_ena <state> - Enable LNA AGC [0 / 1]\r\n");
 80019ac:	f24e 2028 	movw	r0, #57896	; 0xe228
 80019b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019b4:	f001 f8ca 	bl	8002b4c <UART_printf>
					UART_printf("mixer_agc_ena <state> - Enable Mixer AGC [0 / 1]\r\n");
 80019b8:	f24e 2058 	movw	r0, #57944	; 0xe258
 80019bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019c0:	f001 f8c4 	bl	8002b4c <UART_printf>
					UART_printf("bandwidth <bw> - Set IF bandwidth [1 - 15]\r\n");
 80019c4:	f24e 208c 	movw	r0, #57996	; 0xe28c
 80019c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019cc:	f001 f8be 	bl	8002b4c <UART_printf>
                    UART_printf("init - default SDR state\r\n");
 80019d0:	f24e 20bc 	movw	r0, #58044	; 0xe2bc
 80019d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019d8:	f001 f8b8 	bl	8002b4c <UART_printf>
                    UART_printf("volume <vol> - audio volume for CS43L22 [0 - 100]\r\n");
 80019dc:	f24e 20d8 	movw	r0, #58072	; 0xe2d8
 80019e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019e4:	f001 f8b2 	bl	8002b4c <UART_printf>
                    UART_printf("mute - muting of CS43L22\r\n");
 80019e8:	f24e 300c 	movw	r0, #58124	; 0xe30c
 80019ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019f0:	f001 f8ac 	bl	8002b4c <UART_printf>
                    UART_printf("unmute - unmuting of CS43L22\r\n");
 80019f4:	f24e 3028 	movw	r0, #58152	; 0xe328
 80019f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019fc:	f001 f8a6 	bl	8002b4c <UART_printf>
                    UART_printf("demod_type <type> <CW upper lvl> <CW hyst> - Set demodulator type [AM/FM/IQ/CW]\r\n");
 8001a00:	f24e 3048 	movw	r0, #58184	; 0xe348
 8001a04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a08:	f001 f8a0 	bl	8002b4c <UART_printf>
                    UART_printf("tune <start_freq> <step> - Manual tune from start_freq [MHz] with step [MHz]\r\n");
 8001a0c:	f24e 309c 	movw	r0, #58268	; 0xe39c
 8001a10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a14:	f001 f89a 	bl	8002b4c <UART_printf>
                    UART_printf("scan <start_freq> <step> <mod_thres> <Mute> - Scan from start_freq [MHz] with step [MHz], mod_thres [dB] and Mute [0/1]\r\n");
 8001a18:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
 8001a1c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a20:	e77d      	b.n	800191e <cmd_proc+0xea>
					if(argc < 2)
 8001a22:	2c01      	cmp	r4, #1
 8001a24:	f000 846c 	beq.w	8002300 <cmd_proc+0xacc>
						reg = (int)strtoul(argv[1], NULL, 0) & 0x3f;
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001a2e:	f008 fba5 	bl	800a17c <strtoul>
 8001a32:	f000 013f 	and.w	r1, r0, #63	; 0x3f
						data = R820T2_i2c_read_reg_uncached(reg);
 8001a36:	4608      	mov	r0, r1
						reg = (int)strtoul(argv[1], NULL, 0) & 0x3f;
 8001a38:	9112      	str	r1, [sp, #72]	; 0x48
						data = R820T2_i2c_read_reg_uncached(reg);
 8001a3a:	f001 f8cb 	bl	8002bd4 <R820T2_i2c_read_reg_uncached>
						UART_printf("read: 0x%02X = 0x%02lX\r\n", reg, data);
 8001a3e:	9912      	ldr	r1, [sp, #72]	; 0x48
						data = R820T2_i2c_read_reg_uncached(reg);
 8001a40:	4602      	mov	r2, r0
						UART_printf("read: 0x%02X = 0x%02lX\r\n", reg, data);
 8001a42:	f24e 4080 	movw	r0, #58496	; 0xe480
 8001a46:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8001a4a:	b023      	add	sp, #140	; 0x8c
 8001a4c:	ecbd 8b08 	vpop	{d8-d11}
 8001a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("write: 0x%02X 0x%02lX\r\n", reg, data);
 8001a54:	f001 b87a 	b.w	8002b4c <UART_printf>
					if(argc < 3)
 8001a58:	2c02      	cmp	r4, #2
 8001a5a:	f300 82e7 	bgt.w	800202c <cmd_proc+0x7f8>
						UART_printf("write - missing arg(s)\r\n");
 8001a5e:	f24e 409c 	movw	r0, #58524	; 0xe49c
 8001a62:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a66:	e75a      	b.n	800191e <cmd_proc+0xea>
					if(argc < 2)
 8001a68:	2c01      	cmp	r4, #1
 8001a6a:	f000 821e 	beq.w	8001eaa <cmd_proc+0x676>
						data = (int)strtoul(argv[1], NULL, 0) & 0x01;
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4611      	mov	r1, r2
 8001a72:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001a74:	f008 fb82 	bl	800a17c <strtoul>
						R820T2_set_mixer_agc(data);;
 8001a78:	f000 0001 	and.w	r0, r0, #1
						data = (int)strtoul(argv[1], NULL, 0) & 0x01;
 8001a7c:	9012      	str	r0, [sp, #72]	; 0x48
						R820T2_set_mixer_agc(data);;
 8001a7e:	f001 fbad 	bl	80031dc <R820T2_set_mixer_agc>
						UART_printf("mixer_agc_ena:  %ld\r\n", data);
 8001a82:	f24e 6010 	movw	r0, #58896	; 0xe610
 8001a86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001a88:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8001a8c:	b023      	add	sp, #140	; 0x8c
 8001a8e:	ecbd 8b08 	vpop	{d8-d11}
 8001a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("volume:  %ld\r\n", data);
 8001a96:	f001 b859 	b.w	8002b4c <UART_printf>
					if(argc < 2)
 8001a9a:	2c01      	cmp	r4, #1
 8001a9c:	f000 82f8 	beq.w	8002090 <cmd_proc+0x85c>
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001aa6:	f008 fb69 	bl	800a17c <strtoul>
						R820T2_set_lna_gain(data);;
 8001aaa:	f000 000f 	and.w	r0, r0, #15
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001aae:	9012      	str	r0, [sp, #72]	; 0x48
						R820T2_set_lna_gain(data);;
 8001ab0:	f001 fae8 	bl	8003084 <R820T2_set_lna_gain>
						UART_printf("lna_gain:  %ld\r\n", data);
 8001ab4:	f24e 5060 	movw	r0, #58720	; 0xe560
 8001ab8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001aba:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001abe:	e7e5      	b.n	8001a8c <cmd_proc+0x258>
                    UART_printf("CS43L22 muted\r\n");
 8001ac0:	f24e 6090 	movw	r0, #59024	; 0xe690
 8001ac4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ac8:	f001 f840 	bl	8002b4c <UART_printf>
}
 8001acc:	b023      	add	sp, #140	; 0x8c
 8001ace:	ecbd 8b08 	vpop	{d8-d11}
 8001ad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    CS43_Mute();
 8001ad6:	f7ff bd85 	b.w	80015e4 <CS43_Mute>
					if(argc < 2)
 8001ada:	2c01      	cmp	r4, #1
 8001adc:	f000 82d3 	beq.w	8002086 <cmd_proc+0x852>
						double frequency = atof(argv[1]);
 8001ae0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001ae2:	f006 fcdf 	bl	80084a4 <atof>
 8001ae6:	ec55 4b10 	vmov	r4, r5, d0
						R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8001aea:	f248 4380 	movw	r3, #33920	; 0x8480
 8001aee:	ee10 0a10 	vmov	r0, s0
 8001af2:	2200      	movs	r2, #0
 8001af4:	f2c4 132e 	movt	r3, #16686	; 0x412e
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fd8d 	bl	8000618 <__aeabi_dmul>
 8001afe:	f7ff f863 	bl	8000bc8 <__aeabi_d2uiz>
 8001b02:	f001 fa03 	bl	8002f0c <R820T2_set_freq>
						UART_printf("freq:  %.6f MHz", frequency);
 8001b06:	f24e 5000 	movw	r0, #58624	; 0xe500
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b12:	f001 f81b 	bl	8002b4c <UART_printf>
						int32_t PLL_status = R820T2_PLL_lock_check();
 8001b16:	f001 fc91 	bl	800343c <R820T2_PLL_lock_check>
						if (PLL_status == -1)
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	f000 81ca 	beq.w	8001eb4 <cmd_proc+0x680>
							UART_printf(" -> PLL has locked\r\n");
 8001b20:	f24e 502c 	movw	r0, #58668	; 0xe52c
 8001b24:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b28:	e6f9      	b.n	800191e <cmd_proc+0xea>
					if(argc < 2)
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	f000 82a6 	beq.w	800207c <cmd_proc+0x848>
						float vga_gain_dB = atof(argv[1]);
 8001b30:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001b32:	f006 fcb7 	bl	80084a4 <atof>
 8001b36:	ec51 0b10 	vmov	r0, r1, d0
 8001b3a:	f7ff f865 	bl	8000c08 <__aeabi_d2f>
 8001b3e:	ee08 0a10 	vmov	s16, r0
						R820T2_set_vga_gain_VAGC_pin(vga_gain_dB);
 8001b42:	ee00 0a10 	vmov	s0, r0
 8001b46:	f001 fae1 	bl	800310c <R820T2_set_vga_gain_VAGC_pin>
						if (vga_gain_dB < 1.0) vga_gain_dB = 1.0;
 8001b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
						UART_printf("vga_gain:  %.1f dB\r\n", truncf(vga_gain_dB/0.1)*0.1); //calculating actual and truncated gain
 8001b4e:	2300      	movs	r3, #0
 8001b50:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8001b54:	f2c4 2348 	movt	r3, #16968	; 0x4248
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	bfb8      	it	lt
 8001b62:	eeb0 8a47 	vmovlt.f32	s16, s14
 8001b66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	bf88      	it	hi
 8001b70:	eeb0 8a67 	vmovhi.f32	s16, s15
 8001b74:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001b78:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001b7c:	f00b faca 	bl	800d114 <truncf>
 8001b80:	ee10 0a10 	vmov	r0, s0
 8001b84:	f7fe fcf0 	bl	8000568 <__aeabi_f2d>
 8001b88:	f649 129a 	movw	r2, #39322	; 0x999a
 8001b8c:	f649 1399 	movw	r3, #39321	; 0x9999
 8001b90:	f6c9 1299 	movt	r2, #39321	; 0x9999
 8001b94:	f6c3 73b9 	movt	r3, #16313	; 0x3fb9
 8001b98:	f7fe fd3e 	bl	8000618 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f24e 50c4 	movw	r0, #58820	; 0xe5c4
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8001ba8:	b023      	add	sp, #140	; 0x8c
 8001baa:	ecbd 8b08 	vpop	{d8-d11}
 8001bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("vga_gain:  %.1f dB\r\n", truncf(vga_gain_dB/0.1)*0.1); //calculating actual and truncated gain
 8001bb2:	f000 bfcb 	b.w	8002b4c <UART_printf>
					if(argc < 2)
 8001bb6:	2c01      	cmp	r4, #1
 8001bb8:	f000 8177 	beq.w	8001eaa <cmd_proc+0x676>
						data = (int)strtoul(argv[1], NULL, 0) & 0x01;
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001bc2:	f008 fadb 	bl	800a17c <strtoul>
						R820T2_set_lna_agc(data);;
 8001bc6:	f000 0001 	and.w	r0, r0, #1
						data = (int)strtoul(argv[1], NULL, 0) & 0x01;
 8001bca:	9012      	str	r0, [sp, #72]	; 0x48
						R820T2_set_lna_agc(data);;
 8001bcc:	f001 fae2 	bl	8003194 <R820T2_set_lna_agc>
						UART_printf("lna_agc_ena:  %ld\r\n", data);
 8001bd0:	f24e 50fc 	movw	r0, #58876	; 0xe5fc
 8001bd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001bd6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bda:	e757      	b.n	8001a8c <cmd_proc+0x258>
					if(argc < 2)
 8001bdc:	2c01      	cmp	r4, #1
 8001bde:	f000 8243 	beq.w	8002068 <cmd_proc+0x834>
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001be2:	2200      	movs	r2, #0
 8001be4:	4611      	mov	r1, r2
 8001be6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001be8:	f008 fac8 	bl	800a17c <strtoul>
						R820T2_set_mixer_gain(data);;
 8001bec:	f000 000f 	and.w	r0, r0, #15
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001bf0:	9012      	str	r0, [sp, #72]	; 0x48
						R820T2_set_mixer_gain(data);;
 8001bf2:	f001 fa69 	bl	80030c8 <R820T2_set_mixer_gain>
						UART_printf("mixer_gain:  %ld\r\n", data);
 8001bf6:	f24e 5094 	movw	r0, #58772	; 0xe594
 8001bfa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001bfc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c00:	e744      	b.n	8001a8c <cmd_proc+0x258>
                    UART_printf("init\r\n");
 8001c02:	f24e 605c 	movw	r0, #58972	; 0xe65c
                    R820T2_init(hi2c3);
 8001c06:	f240 7470 	movw	r4, #1904	; 0x770
 8001c0a:	f2c2 0400 	movt	r4, #8192	; 0x2000
                    UART_printf("init\r\n");
 8001c0e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c12:	f000 ff9b 	bl	8002b4c <UART_printf>
                    R820T2_init(hi2c3);
 8001c16:	f104 0110 	add.w	r1, r4, #16
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	4668      	mov	r0, sp
 8001c1e:	f006 fc6f 	bl	8008500 <memcpy>
 8001c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c26:	f001 fc53 	bl	80034d0 <R820T2_init>
                    R820T2_set_mixer_agc(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f001 fad6 	bl	80031dc <R820T2_set_mixer_agc>
					R820T2_set_lna_agc(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f001 faaf 	bl	8003194 <R820T2_set_lna_agc>
					R820T2_set_vga_gain_VAGC_pin(48.0); //dB
 8001c36:	2300      	movs	r3, #0
 8001c38:	f2c4 2340 	movt	r3, #16960	; 0x4240
 8001c3c:	ee00 3a10 	vmov	s0, r3
 8001c40:	f001 fa64 	bl	800310c <R820T2_set_vga_gain_VAGC_pin>
					Demod_Type = DEMOD_FM;
 8001c44:	f640 2372 	movw	r3, #2674	; 0xa72
 8001c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c4c:	2200      	movs	r2, #0
					CS43_SetVolume(CS43_default_vol);
 8001c4e:	2030      	movs	r0, #48	; 0x30
					Demod_Type = DEMOD_FM;
 8001c50:	701a      	strb	r2, [r3, #0]
					CS43_SetVolume(CS43_default_vol);
 8001c52:	f7ff fbd3 	bl	80013fc <CS43_SetVolume>
					CS43_Unmute();
 8001c56:	e672      	b.n	800193e <cmd_proc+0x10a>
					if(argc < 2)
 8001c58:	2c01      	cmp	r4, #1
 8001c5a:	f000 8357 	beq.w	800230c <cmd_proc+0xad8>
						while(demod_type_param[type] != NULL)
 8001c5e:	f240 064c 	movw	r6, #76	; 0x4c
 8001c62:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001c66:	6831      	ldr	r1, [r6, #0]
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	f000 8355 	beq.w	8002318 <cmd_proc+0xae4>
							if(strcmp(argv[1], demod_type_param[type])==0)
 8001c6e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
						uint8_t type = 0;
 8001c70:	2500      	movs	r5, #0
 8001c72:	e005      	b.n	8001c80 <cmd_proc+0x44c>
							type++;
 8001c74:	b2dd      	uxtb	r5, r3
						while(demod_type_param[type] != NULL)
 8001c76:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	f000 834c 	beq.w	8002318 <cmd_proc+0xae4>
							if(strcmp(argv[1], demod_type_param[type])==0)
 8001c80:	4638      	mov	r0, r7
 8001c82:	f7fe faa5 	bl	80001d0 <strcmp>
							type++;
 8001c86:	1c6b      	adds	r3, r5, #1
							if(strcmp(argv[1], demod_type_param[type])==0)
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1f3      	bne.n	8001c74 <cmd_proc+0x440>
							switch(type)
 8001c8c:	2d03      	cmp	r5, #3
 8001c8e:	f63f ae3d 	bhi.w	800190c <cmd_proc+0xd8>
 8001c92:	e8df f005 	tbb	[pc, r5]
 8001c96:	84c7      	.short	0x84c7
 8001c98:	3941      	.short	0x3941
					if(argc < 3)
 8001c9a:	2c02      	cmp	r4, #2
 8001c9c:	f300 810f 	bgt.w	8001ebe <cmd_proc+0x68a>
						UART_printf("tune - missing arg(s)\r\n");
 8001ca0:	f24e 704c 	movw	r0, #59212	; 0xe74c
 8001ca4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ca8:	e639      	b.n	800191e <cmd_proc+0xea>
                    UART_printf("CS43L22 unmuted\r\n");
 8001caa:	f24e 60a0 	movw	r0, #59040	; 0xe6a0
 8001cae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cb2:	f000 ff4b 	bl	8002b4c <UART_printf>
                    CS43_Unmute();
 8001cb6:	e642      	b.n	800193e <cmd_proc+0x10a>
					if(argc < 2)
 8001cb8:	2c01      	cmp	r4, #1
 8001cba:	f000 81da 	beq.w	8002072 <cmd_proc+0x83e>
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cc4:	f008 fa5a 	bl	800a17c <strtoul>
						R820T2_set_if_bandwidth(data);;
 8001cc8:	f000 000f 	and.w	r0, r0, #15
						data = (int)strtoul(argv[1], NULL, 0) & 0x0f;
 8001ccc:	9012      	str	r0, [sp, #72]	; 0x48
						R820T2_set_if_bandwidth(data);;
 8001cce:	f001 faa9 	bl	8003224 <R820T2_set_if_bandwidth>
						UART_printf("bandwidth:  %ld\r\n", data);
 8001cd2:	f24e 6048 	movw	r0, #58952	; 0xe648
 8001cd6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001cd8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cdc:	e6d6      	b.n	8001a8c <cmd_proc+0x258>
					if(argc < 2)
 8001cde:	2c01      	cmp	r4, #1
 8001ce0:	f000 81bd 	beq.w	800205e <cmd_proc+0x82a>
						data = (int)strtoul(argv[1], NULL, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cea:	f008 fa47 	bl	800a17c <strtoul>
						if (data > 100) data = 100;
 8001cee:	2864      	cmp	r0, #100	; 0x64
 8001cf0:	bf28      	it	cs
 8001cf2:	2064      	movcs	r0, #100	; 0x64
 8001cf4:	4604      	mov	r4, r0
						CS43_SetVolume(data);
 8001cf6:	b2c0      	uxtb	r0, r0
 8001cf8:	f7ff fb80 	bl	80013fc <CS43_SetVolume>
						UART_printf("volume:  %ld\r\n", data);
 8001cfc:	f24e 6080 	movw	r0, #59008	; 0xe680
 8001d00:	4621      	mov	r1, r4
 8001d02:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d06:	e6c1      	b.n	8001a8c <cmd_proc+0x258>
									if(argc < 4)
 8001d08:	2c03      	cmp	r4, #3
 8001d0a:	f300 8313 	bgt.w	8002334 <cmd_proc+0xb00>
										UART_printf("demod_type CW - missing arg(s)\r\n");
 8001d0e:	f24e 7010 	movw	r0, #59152	; 0xe710
 8001d12:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d16:	e602      	b.n	800191e <cmd_proc+0xea>
		a[1] = a1__105kHz;
 8001d18:	f248 137c 	movw	r3, #33148	; 0x817c
 8001d1c:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
 8001d20:	469e      	mov	lr, r3
		a[2] = a2__105kHz;
 8001d22:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
 8001d26:	f2cc 03b5 	movt	r3, #49333	; 0xc0b5
 8001d2a:	461e      	mov	r6, r3
		a[3] = a3__105kHz;
 8001d2c:	f64f 3346 	movw	r3, #64326	; 0xfb46
 8001d30:	f2c4 0330 	movt	r3, #16432	; 0x4030
 8001d34:	461d      	mov	r5, r3
		a[4] = a4__105kHz;
 8001d36:	f24d 5313 	movw	r3, #54547	; 0xd513
 8001d3a:	f6cb 7314 	movt	r3, #48916	; 0xbf14
		b[1] = b1__105kHz;
 8001d3e:	f646 71a7 	movw	r1, #28583	; 0x6fa7
		a[4] = a4__105kHz;
 8001d42:	461c      	mov	r4, r3
		b[0] = b0__105kHz;
 8001d44:	f640 23e0 	movw	r3, #2784	; 0xae0
 8001d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__105kHz;
 8001d4c:	460a      	mov	r2, r1
		b[0] = b0__105kHz;
 8001d4e:	f64b 70b8 	movw	r0, #49080	; 0xbfb8
 8001d52:	f6c3 2012 	movt	r0, #14866	; 0x3a12
		b[1] = b1__105kHz;
 8001d56:	f6c3 3137 	movt	r1, #15159	; 0x3b37
		b[2] = b2__105kHz;
 8001d5a:	f6c3 32b7 	movt	r2, #15287	; 0x3bb7
		b[0] = b0__105kHz;
 8001d5e:	6018      	str	r0, [r3, #0]
		b[5] = b5__105kHz;
 8001d60:	6158      	str	r0, [r3, #20]
		b[1] = b1__105kHz;
 8001d62:	6059      	str	r1, [r3, #4]
		b[4] = b4__105kHz;
 8001d64:	6119      	str	r1, [r3, #16]
		b[2] = b2__105kHz;
 8001d66:	609a      	str	r2, [r3, #8]
		b[3] = b3__105kHz;
 8001d68:	60da      	str	r2, [r3, #12]
		a[0] = a0__105kHz;
 8001d6a:	f640 23cc 	movw	r3, #2764	; 0xacc
 8001d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d72:	f24f 5c83 	movw	ip, #62851	; 0xf583
									Demod_Type = OUT_IQ;
 8001d76:	f640 2772 	movw	r7, #2674	; 0xa72
		a[0] = a0__105kHz;
 8001d7a:	f2cc 0c71 	movt	ip, #49265	; 0xc071
									Demod_Type = OUT_IQ;
 8001d7e:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__105kHz;
 8001d82:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__105kHz;
 8001d86:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__105kHz;
 8001d8a:	609e      	str	r6, [r3, #8]
		a[3] = a3__105kHz;
 8001d8c:	60dd      	str	r5, [r3, #12]
		a[4] = a4__105kHz;
 8001d8e:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: IQ\r\n");
 8001d90:	f24e 60fc 	movw	r0, #59132	; 0xe6fc
									Demod_Type = OUT_IQ;
 8001d94:	2302      	movs	r3, #2
									UART_printf("demod_type: IQ\r\n");
 8001d96:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = OUT_IQ;
 8001d9a:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: IQ\r\n");
 8001d9c:	e5bf      	b.n	800191e <cmd_proc+0xea>
		a[1] = a1__105kHz;
 8001d9e:	f248 137c 	movw	r3, #33148	; 0x817c
 8001da2:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
 8001da6:	469e      	mov	lr, r3
		a[2] = a2__105kHz;
 8001da8:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
 8001dac:	f2cc 03b5 	movt	r3, #49333	; 0xc0b5
 8001db0:	461e      	mov	r6, r3
		a[3] = a3__105kHz;
 8001db2:	f64f 3346 	movw	r3, #64326	; 0xfb46
 8001db6:	f2c4 0330 	movt	r3, #16432	; 0x4030
 8001dba:	461d      	mov	r5, r3
		a[4] = a4__105kHz;
 8001dbc:	f24d 5313 	movw	r3, #54547	; 0xd513
 8001dc0:	f6cb 7314 	movt	r3, #48916	; 0xbf14
		b[1] = b1__105kHz;
 8001dc4:	f646 71a7 	movw	r1, #28583	; 0x6fa7
		a[4] = a4__105kHz;
 8001dc8:	461c      	mov	r4, r3
		b[0] = b0__105kHz;
 8001dca:	f640 23e0 	movw	r3, #2784	; 0xae0
 8001dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__105kHz;
 8001dd2:	460a      	mov	r2, r1
		b[0] = b0__105kHz;
 8001dd4:	f64b 70b8 	movw	r0, #49080	; 0xbfb8
 8001dd8:	f6c3 2012 	movt	r0, #14866	; 0x3a12
		b[1] = b1__105kHz;
 8001ddc:	f6c3 3137 	movt	r1, #15159	; 0x3b37
		b[2] = b2__105kHz;
 8001de0:	f6c3 32b7 	movt	r2, #15287	; 0x3bb7
		b[0] = b0__105kHz;
 8001de4:	6018      	str	r0, [r3, #0]
		b[5] = b5__105kHz;
 8001de6:	6158      	str	r0, [r3, #20]
		b[1] = b1__105kHz;
 8001de8:	6059      	str	r1, [r3, #4]
		b[4] = b4__105kHz;
 8001dea:	6119      	str	r1, [r3, #16]
		b[2] = b2__105kHz;
 8001dec:	609a      	str	r2, [r3, #8]
		b[3] = b3__105kHz;
 8001dee:	60da      	str	r2, [r3, #12]
		a[0] = a0__105kHz;
 8001df0:	f640 23cc 	movw	r3, #2764	; 0xacc
 8001df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df8:	f24f 5c83 	movw	ip, #62851	; 0xf583
									Demod_Type = DEMOD_FM;
 8001dfc:	f640 2772 	movw	r7, #2674	; 0xa72
		a[0] = a0__105kHz;
 8001e00:	f2cc 0c71 	movt	ip, #49265	; 0xc071
									Demod_Type = DEMOD_FM;
 8001e04:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__105kHz;
 8001e08:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__105kHz;
 8001e0c:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__105kHz;
 8001e10:	609e      	str	r6, [r3, #8]
		a[3] = a3__105kHz;
 8001e12:	60dd      	str	r5, [r3, #12]
		a[4] = a4__105kHz;
 8001e14:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: FM\r\n");
 8001e16:	f24e 60e8 	movw	r0, #59112	; 0xe6e8
									Demod_Type = DEMOD_FM;
 8001e1a:	2300      	movs	r3, #0
									UART_printf("demod_type: FM\r\n");
 8001e1c:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = DEMOD_FM;
 8001e20:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: FM\r\n");
 8001e22:	e57c      	b.n	800191e <cmd_proc+0xea>
		a[1] = a1__15kHz;
 8001e24:	f645 73ae 	movw	r3, #24494	; 0x5fae
 8001e28:	f2c4 131a 	movt	r3, #16666	; 0x411a
 8001e2c:	469e      	mov	lr, r3
		a[2] = a2__15kHz;
 8001e2e:	f64f 7314 	movw	r3, #65300	; 0xff14
 8001e32:	f2cc 1317 	movt	r3, #49431	; 0xc117
 8001e36:	461e      	mov	r6, r3
		a[3] = a3__15kHz;
 8001e38:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
 8001e3c:	f2c4 0395 	movt	r3, #16533	; 0x4095
 8001e40:	461d      	mov	r5, r3
		a[4] = a4__15kHz;
 8001e42:	f64d 632a 	movw	r3, #56874	; 0xde2a
 8001e46:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
		b[1] = b1__15kHz;
 8001e4a:	f643 51f3 	movw	r1, #15859	; 0x3df3
		a[4] = a4__15kHz;
 8001e4e:	461c      	mov	r4, r3
		b[0] = b0__15kHz;
 8001e50:	f640 23e0 	movw	r3, #2784	; 0xae0
 8001e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__15kHz;
 8001e58:	460a      	mov	r2, r1
		b[0] = b0__15kHz;
 8001e5a:	f64c 3028 	movw	r0, #52008	; 0xcb28
 8001e5e:	f2c3 3029 	movt	r0, #13097	; 0x3329
		b[1] = b1__15kHz;
 8001e62:	f2c3 4154 	movt	r1, #13396	; 0x3454
		b[2] = b2__15kHz;
 8001e66:	f2c3 42d4 	movt	r2, #13524	; 0x34d4
		b[0] = b0__15kHz;
 8001e6a:	6018      	str	r0, [r3, #0]
		b[5] = b5__15kHz;
 8001e6c:	6158      	str	r0, [r3, #20]
		b[1] = b1__15kHz;
 8001e6e:	6059      	str	r1, [r3, #4]
		b[4] = b4__15kHz;
 8001e70:	6119      	str	r1, [r3, #16]
		b[2] = b2__15kHz;
 8001e72:	609a      	str	r2, [r3, #8]
		b[3] = b3__15kHz;
 8001e74:	60da      	str	r2, [r3, #12]
		a[0] = a0__15kHz;
 8001e76:	f640 23cc 	movw	r3, #2764	; 0xacc
 8001e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e7e:	f640 1c43 	movw	ip, #2371	; 0x943
									Demod_Type = DEMOD_AM;
 8001e82:	f640 2772 	movw	r7, #2674	; 0xa72
		a[0] = a0__15kHz;
 8001e86:	f2cc 0c9d 	movt	ip, #49309	; 0xc09d
									Demod_Type = DEMOD_AM;
 8001e8a:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__15kHz;
 8001e8e:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__15kHz;
 8001e92:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__15kHz;
 8001e96:	609e      	str	r6, [r3, #8]
		a[3] = a3__15kHz;
 8001e98:	60dd      	str	r5, [r3, #12]
		a[4] = a4__15kHz;
 8001e9a:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: AM\r\n");
 8001e9c:	f24e 60d4 	movw	r0, #59092	; 0xe6d4
									Demod_Type = DEMOD_AM;
 8001ea0:	2301      	movs	r3, #1
									UART_printf("demod_type: AM\r\n");
 8001ea2:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = DEMOD_AM;
 8001ea6:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: AM\r\n");
 8001ea8:	e539      	b.n	800191e <cmd_proc+0xea>
						UART_printf("lna_agc_ena - missing arg(s)\r\n");
 8001eaa:	f24e 50dc 	movw	r0, #58844	; 0xe5dc
 8001eae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001eb2:	e534      	b.n	800191e <cmd_proc+0xea>
							UART_printf(" -> PLL has not locked\r\n");
 8001eb4:	f24e 5010 	movw	r0, #58640	; 0xe510
 8001eb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ebc:	e52f      	b.n	800191e <cmd_proc+0xea>
						double frequency = atof(argv[1]);
 8001ebe:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001ec0:	f006 faf0 	bl	80084a4 <atof>
						double step = fabs(atof(argv[2]));
 8001ec4:	981f      	ldr	r0, [sp, #124]	; 0x7c
						double frequency = atof(argv[1]);
 8001ec6:	ec59 8b10 	vmov	r8, r9, d0
						double step = fabs(atof(argv[2]));
 8001eca:	f006 faeb 	bl	80084a4 <atof>
 8001ece:	ec53 2b10 	vmov	r2, r3, d0
 8001ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ed6:	ee0a 3a90 	vmov	s21, r3
 8001eda:	eeb0 aa40 	vmov.f32	s20, s0
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz\r\n\r\n", frequency, step);
 8001ede:	f24e 7064 	movw	r0, #59236	; 0xe764
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	eeb0 7a4a 	vmov.f32	s14, s20
 8001eea:	eef0 7a6a 	vmov.f32	s15, s21
 8001eee:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ef2:	ed8d 7b00 	vstr	d7, [sp]
 8001ef6:	f000 fe29 	bl	8002b4c <UART_printf>
	return 20.0*log10f(module/120.0);
 8001efa:	f241 1511 	movw	r5, #4369	; 0x1111
 8001efe:	2300      	movs	r3, #0
 8001f00:	f04f 3411 	mov.w	r4, #286331153	; 0x11111111
 8001f04:	f6c3 7581 	movt	r5, #16257	; 0x3f81
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f2c4 0339 	movt	r3, #16441	; 0x4039
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8001f0e:	f248 4780 	movw	r7, #33920	; 0x8480
	return 20.0*log10f(module/120.0);
 8001f12:	ec45 4b19 	vmov	d9, r4, r5
 8001f16:	ec43 2b1b 	vmov	d11, r2, r3
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	f2c4 172e 	movt	r7, #16686	; 0x412e
 8001f20:	4632      	mov	r2, r6
 8001f22:	463b      	mov	r3, r7
 8001f24:	4640      	mov	r0, r8
 8001f26:	4649      	mov	r1, r9
 8001f28:	f7fe fb76 	bl	8000618 <__aeabi_dmul>
 8001f2c:	f7fe fe4c 	bl	8000bc8 <__aeabi_d2uiz>
 8001f30:	f000 ffec 	bl	8002f0c <R820T2_set_freq>
							UART_printf("%.6f MHz", frequency);
 8001f34:	f24e 7090 	movw	r0, #59280	; 0xe790
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f40:	f000 fe04 	bl	8002b4c <UART_printf>
							int32_t PLL_status = R820T2_PLL_lock_check();
 8001f44:	f001 fa7a 	bl	800343c <R820T2_PLL_lock_check>
							if (PLL_status == -1)
 8001f48:	3001      	adds	r0, #1
 8001f4a:	d0b3      	beq.n	8001eb4 <cmd_proc+0x680>
	float module = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f640 2474 	movw	r4, #2676	; 0xa74
 8001f52:	f640 2b80 	movw	fp, #2688	; 0xa80
 8001f56:	ee08 3a10 	vmov	s16, r3
 8001f5a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001f5e:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8001f62:	f04f 0a78 	mov.w	sl, #120	; 0x78
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 8001f66:	eddb 7a00 	vldr	s15, [fp]
 8001f6a:	ed94 7a00 	vldr	s14, [r4]
 8001f6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
		HAL_Delay(1);
 8001f72:	2001      	movs	r0, #1
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 8001f74:	eee7 7a07 	vfma.f32	s15, s14, s14
 8001f78:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8001f7c:	ee38 8a07 	vadd.f32	s16, s16, s14
		HAL_Delay(1);
 8001f80:	f002 fe94 	bl	8004cac <HAL_Delay>
	for (i = 0; i < 120; i++) //calculating mean module value for scan and tune commands
 8001f84:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001f88:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
 8001f8c:	d1eb      	bne.n	8001f66 <cmd_proc+0x732>
	return 20.0*log10f(module/120.0);
 8001f8e:	ee18 0a10 	vmov	r0, s16
 8001f92:	f7fe fae9 	bl	8000568 <__aeabi_f2d>
 8001f96:	ec53 2b19 	vmov	r2, r3, d9
 8001f9a:	f7fe fb3d 	bl	8000618 <__aeabi_dmul>
 8001f9e:	f7fe fe33 	bl	8000c08 <__aeabi_d2f>
 8001fa2:	ee00 0a10 	vmov	s0, r0
 8001fa6:	f00b f8fb 	bl	800d1a0 <log10f>
 8001faa:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
							UART_printf(" ; Mod: %.2f\r\n -> n/p - next/prev step ; s - stop\r\n", calculate_mean_module());
 8001fae:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001fb2:	ee17 0a90 	vmov	r0, s15
 8001fb6:	f7fe fad7 	bl	8000568 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f24e 709c 	movw	r0, #59292	; 0xe79c
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fc6:	f000 fdc1 	bl	8002b4c <UART_printf>
							while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'n') && (rxchar_loc != 'p') && (rxchar_loc != 's')) );
 8001fca:	e003      	b.n	8001fd4 <cmd_proc+0x7a0>
 8001fcc:	2870      	cmp	r0, #112	; 0x70
 8001fce:	d01d      	beq.n	800200c <cmd_proc+0x7d8>
 8001fd0:	2873      	cmp	r0, #115	; 0x73
 8001fd2:	d024      	beq.n	800201e <cmd_proc+0x7ea>
 8001fd4:	f002 fd92 	bl	8004afc <usart_getc>
 8001fd8:	b2c0      	uxtb	r0, r0
 8001fda:	286e      	cmp	r0, #110	; 0x6e
 8001fdc:	d1f6      	bne.n	8001fcc <cmd_proc+0x798>
							usart_flush_RX_buffer();
 8001fde:	f002 fd7d 	bl	8004adc <usart_flush_RX_buffer>
							if (rxchar_loc == 'n') frequency += step;
 8001fe2:	ec53 2b1a 	vmov	r2, r3, d10
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	4649      	mov	r1, r9
 8001fea:	f7fe f95f 	bl	80002ac <__adddf3>
 8001fee:	ec55 4b1b 	vmov	r4, r5, d11
 8001ff2:	ee1b 2a10 	vmov	r2, s22
 8001ff6:	462b      	mov	r3, r5
 8001ff8:	4680      	mov	r8, r0
 8001ffa:	4689      	mov	r9, r1
							if (frequency < 25.0) frequency = 25.0;
 8001ffc:	f7fe fd92 	bl	8000b24 <__aeabi_dcmpge>
 8002000:	2800      	cmp	r0, #0
 8002002:	d18d      	bne.n	8001f20 <cmd_proc+0x6ec>
 8002004:	ee1b 8a10 	vmov	r8, s22
 8002008:	46a9      	mov	r9, r5
						} while( (rxchar_loc == 'n') || (rxchar_loc == 'p') );
 800200a:	e789      	b.n	8001f20 <cmd_proc+0x6ec>
							usart_flush_RX_buffer();
 800200c:	f002 fd66 	bl	8004adc <usart_flush_RX_buffer>
							if (rxchar_loc == 'p') frequency -= step;
 8002010:	ec53 2b1a 	vmov	r2, r3, d10
 8002014:	4640      	mov	r0, r8
 8002016:	4649      	mov	r1, r9
 8002018:	f7fe f946 	bl	80002a8 <__aeabi_dsub>
 800201c:	e7e7      	b.n	8001fee <cmd_proc+0x7ba>
}
 800201e:	b023      	add	sp, #140	; 0x8c
 8002020:	ecbd 8b08 	vpop	{d8-d11}
 8002024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							usart_flush_RX_buffer();
 8002028:	f002 bd58 	b.w	8004adc <usart_flush_RX_buffer>
						reg = (int)strtoul(argv[1], NULL, 0) & 0x3f;
 800202c:	2200      	movs	r2, #0
 800202e:	4611      	mov	r1, r2
 8002030:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002032:	f008 f8a3 	bl	800a17c <strtoul>
						data = strtoul(argv[2], NULL, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	4611      	mov	r1, r2
						reg = (int)strtoul(argv[1], NULL, 0) & 0x3f;
 800203a:	4604      	mov	r4, r0
						data = strtoul(argv[2], NULL, 0);
 800203c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800203e:	f008 f89d 	bl	800a17c <strtoul>
						reg = (int)strtoul(argv[1], NULL, 0) & 0x3f;
 8002042:	f004 043f 	and.w	r4, r4, #63	; 0x3f
						data = strtoul(argv[2], NULL, 0);
 8002046:	4605      	mov	r5, r0
						R820T2_i2c_write_reg(reg, data);
 8002048:	b2e9      	uxtb	r1, r5
 800204a:	4620      	mov	r0, r4
 800204c:	f000 fda2 	bl	8002b94 <R820T2_i2c_write_reg>
						UART_printf("write: 0x%02X 0x%02lX\r\n", reg, data);
 8002050:	f24e 40b8 	movw	r0, #58552	; 0xe4b8
 8002054:	462a      	mov	r2, r5
 8002056:	4621      	mov	r1, r4
 8002058:	f6c0 0000 	movt	r0, #2048	; 0x800
 800205c:	e4f5      	b.n	8001a4a <cmd_proc+0x216>
						UART_printf("volume - missing arg(s)\r\n");
 800205e:	f24e 6064 	movw	r0, #58980	; 0xe664
 8002062:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002066:	e45a      	b.n	800191e <cmd_proc+0xea>
						UART_printf("mixer_gain - missing arg(s)\r\n");
 8002068:	f24e 5074 	movw	r0, #58740	; 0xe574
 800206c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002070:	e455      	b.n	800191e <cmd_proc+0xea>
						UART_printf("bandwidth - missing arg(s)\r\n");
 8002072:	f24e 6028 	movw	r0, #58920	; 0xe628
 8002076:	f6c0 0000 	movt	r0, #2048	; 0x800
 800207a:	e450      	b.n	800191e <cmd_proc+0xea>
						UART_printf("vga_gain - missing arg(s)\r\n");
 800207c:	f24e 50a8 	movw	r0, #58792	; 0xe5a8
 8002080:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002084:	e44b      	b.n	800191e <cmd_proc+0xea>
						UART_printf("freq - missing arg(s)\r\n");
 8002086:	f24e 40e8 	movw	r0, #58600	; 0xe4e8
 800208a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800208e:	e446      	b.n	800191e <cmd_proc+0xea>
						UART_printf("lna_gain - missing arg(s)\r\n");
 8002090:	f24e 5044 	movw	r0, #58692	; 0xe544
 8002094:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002098:	e441      	b.n	800191e <cmd_proc+0xea>
						double frequency = atof(argv[1]);
 800209a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800209c:	f006 fa02 	bl	80084a4 <atof>
						double step = fabs(atof(argv[2]));
 80020a0:	981f      	ldr	r0, [sp, #124]	; 0x7c
						double frequency = atof(argv[1]);
 80020a2:	ec55 4b10 	vmov	r4, r5, d0
						double step = fabs(atof(argv[2]));
 80020a6:	f006 f9fd 	bl	80084a4 <atof>
 80020aa:	ec53 2b10 	vmov	r2, r3, d0
						float module_threshold = atof(argv[3]);
 80020ae:	9820      	ldr	r0, [sp, #128]	; 0x80
						double step = fabs(atof(argv[2]));
 80020b0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020b4:	ee10 8a10 	vmov	r8, s0
						float module_threshold = atof(argv[3]);
 80020b8:	f006 f9f4 	bl	80084a4 <atof>
 80020bc:	ec51 0b10 	vmov	r0, r1, d0
 80020c0:	f7fe fda2 	bl	8000c08 <__aeabi_d2f>
 80020c4:	ee08 0a90 	vmov	s17, r0
						uint8_t Mute_Dis_Ena = atof(argv[4]);
 80020c8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80020ca:	f006 f9eb 	bl	80084a4 <atof>
 80020ce:	ec51 0b10 	vmov	r0, r1, d0
 80020d2:	f7fe fd79 	bl	8000bc8 <__aeabi_d2uiz>
 80020d6:	b2c3      	uxtb	r3, r0
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz ; Mod_thresh: %.2f ; s - stop ; p - pause\r\n\r\n", frequency, step, module_threshold);
 80020d8:	ee18 0a90 	vmov	r0, s17
						uint8_t Mute_Dis_Ena = atof(argv[4]);
 80020dc:	461e      	mov	r6, r3
 80020de:	931b      	str	r3, [sp, #108]	; 0x6c
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz ; Mod_thresh: %.2f ; s - stop ; p - pause\r\n\r\n", frequency, step, module_threshold);
 80020e0:	f7fe fa42 	bl	8000568 <__aeabi_f2d>
 80020e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020e8:	f24e 70e8 	movw	r0, #59368	; 0xe7e8
 80020ec:	e9cd 8900 	strd	r8, r9, [sp]
 80020f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80020f4:	4622      	mov	r2, r4
 80020f6:	462b      	mov	r3, r5
 80020f8:	f000 fd28 	bl	8002b4c <UART_printf>
						if (Mute_Dis_Ena == 1) CS43_Mute();
 80020fc:	2e01      	cmp	r6, #1
 80020fe:	f000 8177 	beq.w	80023f0 <cmd_proc+0xbbc>
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8002102:	f248 4b80 	movw	fp, #33920	; 0x8480
	return 20.0*log10f(module/120.0);
 8002106:	f241 1311 	movw	r3, #4369	; 0x1111
 800210a:	2700      	movs	r7, #0
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 800210c:	f2c4 1b2e 	movt	fp, #16686	; 0x412e
 8002110:	f04f 0a00 	mov.w	sl, #0
	return 20.0*log10f(module/120.0);
 8002114:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002118:	f6c3 7381 	movt	r3, #16257	; 0x3f81
 800211c:	2600      	movs	r6, #0
 800211e:	f2c4 0739 	movt	r7, #16441	; 0x4039
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8002122:	ec4b ab19 	vmov	d9, sl, fp
	return 20.0*log10f(module/120.0);
 8002126:	ec43 2b1a 	vmov	d10, r2, r3
 800212a:	ec47 6b1b 	vmov	d11, r6, r7
 800212e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
							R820T2_set_freq( (uint32_t) (frequency*1.0E6));
 8002132:	ec53 2b19 	vmov	r2, r3, d9
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe fa6d 	bl	8000618 <__aeabi_dmul>
 800213e:	f7fe fd43 	bl	8000bc8 <__aeabi_d2uiz>
 8002142:	f000 fee3 	bl	8002f0c <R820T2_set_freq>
							UART_printf("SCANNING: %.6f MHz", frequency);
 8002146:	f64e 003c 	movw	r0, #59452	; 0xe83c
 800214a:	4622      	mov	r2, r4
 800214c:	462b      	mov	r3, r5
 800214e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002152:	f000 fcfb 	bl	8002b4c <UART_printf>
							int32_t PLL_status = R820T2_PLL_lock_check();
 8002156:	f001 f971 	bl	800343c <R820T2_PLL_lock_check>
							if (PLL_status == -1)
 800215a:	3001      	adds	r0, #1
 800215c:	f000 80e2 	beq.w	8002324 <cmd_proc+0xaf0>
							HAL_Delay(200);
 8002160:	20c8      	movs	r0, #200	; 0xc8
 8002162:	f002 fda3 	bl	8004cac <HAL_Delay>
	float module = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	f640 2a74 	movw	sl, #2676	; 0xa74
 800216c:	f640 2780 	movw	r7, #2688	; 0xa80
 8002170:	ee08 3a10 	vmov	s16, r3
 8002174:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8002178:	f2c2 0700 	movt	r7, #8192	; 0x2000
							HAL_Delay(200);
 800217c:	2678      	movs	r6, #120	; 0x78
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 800217e:	edd7 7a00 	vldr	s15, [r7]
 8002182:	ed9a 7a00 	vldr	s14, [sl]
 8002186:	ee67 7aa7 	vmul.f32	s15, s15, s15
		HAL_Delay(1);
 800218a:	2001      	movs	r0, #1
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 800218c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8002190:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8002194:	ee38 8a07 	vadd.f32	s16, s16, s14
		HAL_Delay(1);
 8002198:	f002 fd88 	bl	8004cac <HAL_Delay>
	for (i = 0; i < 120; i++) //calculating mean module value for scan and tune commands
 800219c:	1e73      	subs	r3, r6, #1
 800219e:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
 80021a2:	d1ec      	bne.n	800217e <cmd_proc+0x94a>
	return 20.0*log10f(module/120.0);
 80021a4:	ee18 0a10 	vmov	r0, s16
 80021a8:	f7fe f9de 	bl	8000568 <__aeabi_f2d>
 80021ac:	ec53 2b1a 	vmov	r2, r3, d10
 80021b0:	f7fe fa32 	bl	8000618 <__aeabi_dmul>
 80021b4:	f7fe fd28 	bl	8000c08 <__aeabi_d2f>
 80021b8:	ee00 0a10 	vmov	s0, r0
 80021bc:	f00a fff0 	bl	800d1a0 <log10f>
 80021c0:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 80021c4:	ee20 8a08 	vmul.f32	s16, s0, s16
							UART_printf(" ; Mod: %.2f\r\n", module);
 80021c8:	ee18 0a10 	vmov	r0, s16
 80021cc:	f7fe f9cc 	bl	8000568 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f64e 0050 	movw	r0, #59472	; 0xe850
 80021d6:	460b      	mov	r3, r1
 80021d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80021dc:	f000 fcb6 	bl	8002b4c <UART_printf>
							led_toggle(LED1);
 80021e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021e4:	f000 f960 	bl	80024a8 <led_toggle>
							if((rxchar_loc = usart_getc())!= EOF)
 80021e8:	f002 fc88 	bl	8004afc <usart_getc>
 80021ec:	b2c3      	uxtb	r3, r0
								if (rxchar_loc == 's') break;
 80021ee:	2b73      	cmp	r3, #115	; 0x73
 80021f0:	f43f aba5 	beq.w	800193e <cmd_proc+0x10a>
								if (rxchar_loc == 'p')
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d03f      	beq.n	8002278 <cmd_proc+0xa44>
							if (module > module_threshold)
 80021f8:	eef4 8ac8 	vcmpe.f32	s17, s16
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	d521      	bpl.n	8002246 <cmd_proc+0xa12>
								if (Mute_Dis_Ena == 1) CS43_Unmute();
 8002202:	f1bb 0f01 	cmp.w	fp, #1
 8002206:	d075      	beq.n	80022f4 <cmd_proc+0xac0>
								UART_printf("***SCANNING HAS STOPPED***");
 8002208:	f64e 009c 	movw	r0, #59548	; 0xe89c
 800220c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002210:	f000 fc9c 	bl	8002b4c <UART_printf>
	UART_printf(" -> u/d - up/down ; s - stop\r\n\r\n");
 8002214:	f64e 0078 	movw	r0, #59512	; 0xe878
 8002218:	f6c0 0000 	movt	r0, #2048	; 0x800
 800221c:	f000 fc96 	bl	8002b4c <UART_printf>
	while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'u') && (rxchar_loc != 'd') && (rxchar_loc != 's')) );
 8002220:	e003      	b.n	800222a <cmd_proc+0x9f6>
 8002222:	2864      	cmp	r0, #100	; 0x64
 8002224:	d052      	beq.n	80022cc <cmd_proc+0xa98>
 8002226:	2873      	cmp	r0, #115	; 0x73
 8002228:	d049      	beq.n	80022be <cmd_proc+0xa8a>
 800222a:	f002 fc67 	bl	8004afc <usart_getc>
 800222e:	b2c0      	uxtb	r0, r0
 8002230:	2875      	cmp	r0, #117	; 0x75
 8002232:	d1f6      	bne.n	8002222 <cmd_proc+0x9ee>
	if (rxchar_loc == 'u') *step = fabs(*step);
 8002234:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002238:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800223c:	9313      	str	r3, [sp, #76]	; 0x4c
 800223e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
	usart_flush_RX_buffer();
 8002242:	f002 fc4b 	bl	8004adc <usart_flush_RX_buffer>
							if (Mute_Dis_Ena == 1) CS43_Mute();
 8002246:	f1bb 0f01 	cmp.w	fp, #1
 800224a:	d03c      	beq.n	80022c6 <cmd_proc+0xa92>
							frequency += step;
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	f7fe f82a 	bl	80002ac <__adddf3>
 8002258:	ec57 6b1b 	vmov	r6, r7, d11
 800225c:	ee1b 2a10 	vmov	r2, s22
 8002260:	463b      	mov	r3, r7
 8002262:	4604      	mov	r4, r0
 8002264:	460d      	mov	r5, r1
							if (frequency < 25.0) frequency = 25.0;
 8002266:	f7fe fc5d 	bl	8000b24 <__aeabi_dcmpge>
 800226a:	2800      	cmp	r0, #0
 800226c:	f47f af61 	bne.w	8002132 <cmd_proc+0x8fe>
 8002270:	ee1b 4a10 	vmov	r4, s22
 8002274:	463d      	mov	r5, r7
 8002276:	e75c      	b.n	8002132 <cmd_proc+0x8fe>
									if (Mute_Dis_Ena == 1) CS43_Unmute();
 8002278:	f1bb 0f01 	cmp.w	fp, #1
 800227c:	d03d      	beq.n	80022fa <cmd_proc+0xac6>
									UART_printf("***SCANNING PAUSED***");
 800227e:	f64e 0060 	movw	r0, #59488	; 0xe860
 8002282:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002286:	f000 fc61 	bl	8002b4c <UART_printf>
	UART_printf(" -> u/d - up/down ; s - stop\r\n\r\n");
 800228a:	f64e 0078 	movw	r0, #59512	; 0xe878
 800228e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002292:	f000 fc5b 	bl	8002b4c <UART_printf>
	while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'u') && (rxchar_loc != 'd') && (rxchar_loc != 's')) );
 8002296:	e003      	b.n	80022a0 <cmd_proc+0xa6c>
 8002298:	2864      	cmp	r0, #100	; 0x64
 800229a:	d021      	beq.n	80022e0 <cmd_proc+0xaac>
 800229c:	2873      	cmp	r0, #115	; 0x73
 800229e:	d00e      	beq.n	80022be <cmd_proc+0xa8a>
 80022a0:	f002 fc2c 	bl	8004afc <usart_getc>
 80022a4:	b2c0      	uxtb	r0, r0
 80022a6:	2875      	cmp	r0, #117	; 0x75
 80022a8:	d1f6      	bne.n	8002298 <cmd_proc+0xa64>
	if (rxchar_loc == 'u') *step = fabs(*step);
 80022aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80022ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80022b2:	9315      	str	r3, [sp, #84]	; 0x54
 80022b4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
	usart_flush_RX_buffer();
 80022b8:	f002 fc10 	bl	8004adc <usart_flush_RX_buffer>
	return rxchar_loc;
 80022bc:	e79c      	b.n	80021f8 <cmd_proc+0x9c4>
	usart_flush_RX_buffer();
 80022be:	f002 fc0d 	bl	8004adc <usart_flush_RX_buffer>
	return rxchar_loc;
 80022c2:	f7ff bb3c 	b.w	800193e <cmd_proc+0x10a>
							if (Mute_Dis_Ena == 1) CS43_Mute();
 80022c6:	f7ff f98d 	bl	80015e4 <CS43_Mute>
 80022ca:	e7bf      	b.n	800224c <cmd_proc+0xa18>
	if (rxchar_loc == 'd') *step *= -1;
 80022cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80022d0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 80022d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80022d6:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
	usart_flush_RX_buffer();
 80022da:	f002 fbff 	bl	8004adc <usart_flush_RX_buffer>
	return rxchar_loc;
 80022de:	e7b2      	b.n	8002246 <cmd_proc+0xa12>
	if (rxchar_loc == 'd') *step *= -1;
 80022e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80022e4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 80022e8:	9319      	str	r3, [sp, #100]	; 0x64
 80022ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
	usart_flush_RX_buffer();
 80022ee:	f002 fbf5 	bl	8004adc <usart_flush_RX_buffer>
	return rxchar_loc;
 80022f2:	e781      	b.n	80021f8 <cmd_proc+0x9c4>
								if (Mute_Dis_Ena == 1) CS43_Unmute();
 80022f4:	f7ff f9d4 	bl	80016a0 <CS43_Unmute>
 80022f8:	e786      	b.n	8002208 <cmd_proc+0x9d4>
									if (Mute_Dis_Ena == 1) CS43_Unmute();
 80022fa:	f7ff f9d1 	bl	80016a0 <CS43_Unmute>
 80022fe:	e7be      	b.n	800227e <cmd_proc+0xa4a>
						UART_printf("read - missing arg(s)\r\n");
 8002300:	f24e 4068 	movw	r0, #58472	; 0xe468
 8002304:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002308:	f7ff bb09 	b.w	800191e <cmd_proc+0xea>
						UART_printf("demod_type - missing arg(s)\r\n");
 800230c:	f24e 60b4 	movw	r0, #59060	; 0xe6b4
 8002310:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002314:	f7ff bb03 	b.w	800191e <cmd_proc+0xea>
							UART_printf("demod_type - unknown type param\r\n");
 8002318:	f64e 00b8 	movw	r0, #59576	; 0xe8b8
 800231c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002320:	f7ff bafd 	b.w	800191e <cmd_proc+0xea>
								UART_printf(" -> PLL has not locked\r\n");
 8002324:	f24e 5010 	movw	r0, #58640	; 0xe510
 8002328:	f6c0 0000 	movt	r0, #2048	; 0x800
 800232c:	f000 fc0e 	bl	8002b4c <UART_printf>
								break;
 8002330:	f7ff bb05 	b.w	800193e <cmd_proc+0x10a>
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 8002334:	2200      	movs	r2, #0
 8002336:	4611      	mov	r1, r2
 8002338:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800233a:	f007 ff1f 	bl	800a17c <strtoul>
 800233e:	f240 0760 	movw	r7, #96	; 0x60
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 8002342:	2200      	movs	r2, #0
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 8002344:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8002348:	b2c6      	uxtb	r6, r0
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 800234a:	4611      	mov	r1, r2
 800234c:	9820      	ldr	r0, [sp, #128]	; 0x80
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 800234e:	703e      	strb	r6, [r7, #0]
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 8002350:	f007 ff14 	bl	800a17c <strtoul>
 8002354:	f240 0362 	movw	r3, #98	; 0x62
 8002358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800235c:	fa56 f280 	uxtab	r2, r6, r0
 8002360:	801a      	strh	r2, [r3, #0]
		a[3] = a3__15kHz;
 8002362:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
 8002366:	f2c4 0395 	movt	r3, #16533	; 0x4095
 800236a:	4699      	mov	r9, r3
		a[4] = a4__15kHz;
 800236c:	f64d 632a 	movw	r3, #56874	; 0xde2a
 8002370:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
 8002374:	461e      	mov	r6, r3
		b[0] = b0__15kHz;
 8002376:	f640 23e0 	movw	r3, #2784	; 0xae0
 800237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800237e:	f64c 3528 	movw	r5, #52008	; 0xcb28
		b[1] = b1__15kHz;
 8002382:	f643 54f3 	movw	r4, #15859	; 0x3df3
		b[2] = b2__15kHz;
 8002386:	f643 50f3 	movw	r0, #15859	; 0x3df3
 800238a:	f2c3 40d4 	movt	r0, #13524	; 0x34d4
		b[0] = b0__15kHz;
 800238e:	f2c3 3529 	movt	r5, #13097	; 0x3329
		b[1] = b1__15kHz;
 8002392:	f2c3 4454 	movt	r4, #13396	; 0x3454
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 8002396:	7839      	ldrb	r1, [r7, #0]
		b[2] = b2__15kHz;
 8002398:	6098      	str	r0, [r3, #8]
		b[3] = b3__15kHz;
 800239a:	60d8      	str	r0, [r3, #12]
		b[0] = b0__15kHz;
 800239c:	601d      	str	r5, [r3, #0]
		b[1] = b1__15kHz;
 800239e:	605c      	str	r4, [r3, #4]
		b[4] = b4__15kHz;
 80023a0:	611c      	str	r4, [r3, #16]
		b[5] = b5__15kHz;
 80023a2:	615d      	str	r5, [r3, #20]
		a[0] = a0__15kHz;
 80023a4:	f640 23cc 	movw	r3, #2764	; 0xacc
 80023a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
										Demod_Type = DEMOD_CW;
 80023ac:	f640 2e72 	movw	lr, #2674	; 0xa72
		a[0] = a0__15kHz;
 80023b0:	f640 1843 	movw	r8, #2371	; 0x943
		a[1] = a1__15kHz;
 80023b4:	f645 7cae 	movw	ip, #24494	; 0x5fae
		a[2] = a2__15kHz;
 80023b8:	f64f 7714 	movw	r7, #65300	; 0xff14
										Demod_Type = DEMOD_CW;
 80023bc:	f2c2 0e00 	movt	lr, #8192	; 0x2000
		a[0] = a0__15kHz;
 80023c0:	f2cc 089d 	movt	r8, #49309	; 0xc09d
		a[1] = a1__15kHz;
 80023c4:	f2c4 1c1a 	movt	ip, #16666	; 0x411a
		a[2] = a2__15kHz;
 80023c8:	f2cc 1717 	movt	r7, #49431	; 0xc117
		a[0] = a0__15kHz;
 80023cc:	f8c3 8000 	str.w	r8, [r3]
		a[1] = a1__15kHz;
 80023d0:	f8c3 c004 	str.w	ip, [r3, #4]
		a[2] = a2__15kHz;
 80023d4:	609f      	str	r7, [r3, #8]
		a[3] = a3__15kHz;
 80023d6:	f8c3 900c 	str.w	r9, [r3, #12]
		a[4] = a4__15kHz;
 80023da:	611e      	str	r6, [r3, #16]
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 80023dc:	f24e 7034 	movw	r0, #59188	; 0xe734
										Demod_Type = DEMOD_CW;
 80023e0:	2303      	movs	r3, #3
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 80023e2:	1a52      	subs	r2, r2, r1
 80023e4:	f6c0 0000 	movt	r0, #2048	; 0x800
										Demod_Type = DEMOD_CW;
 80023e8:	f88e 3000 	strb.w	r3, [lr]
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 80023ec:	f7ff bb2d 	b.w	8001a4a <cmd_proc+0x216>
						if (Mute_Dis_Ena == 1) CS43_Mute();
 80023f0:	f7ff f8f8 	bl	80015e4 <CS43_Mute>
 80023f4:	e685      	b.n	8002102 <cmd_proc+0x8ce>
 80023f6:	bf00      	nop

080023f8 <init_cmd>:
	cmd_wptr = &cmd_buffer[0];
 80023f8:	f240 3314 	movw	r3, #788	; 0x314
 80023fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002400:	f240 22c4 	movw	r2, #708	; 0x2c4
	UART_printf("\r\nCommand>");
 8002404:	f24e 00d0 	movw	r0, #57552	; 0xe0d0
	cmd_wptr = &cmd_buffer[0];
 8002408:	f2c2 0200 	movt	r2, #8192	; 0x2000
	UART_printf("\r\nCommand>");
 800240c:	f6c0 0000 	movt	r0, #2048	; 0x800
	cmd_wptr = &cmd_buffer[0];
 8002410:	601a      	str	r2, [r3, #0]
	UART_printf("\r\nCommand>");
 8002412:	f000 bb9b 	b.w	8002b4c <UART_printf>
 8002416:	bf00      	nop

08002418 <cmd_parse>:
}

void cmd_parse(char ch)
{
	/* accumulate chars until cr, handle backspace */
	if(ch == '\b')
 8002418:	2808      	cmp	r0, #8
{
 800241a:	b510      	push	{r4, lr}
	if(ch == '\b')
 800241c:	d00e      	beq.n	800243c <cmd_parse+0x24>
		{
			UART_printf("\b \b");		/* Erase & backspace */
			cmd_wptr--;		/* remove previous char */
		}
	}
	else if(ch == '\r')
 800241e:	280d      	cmp	r0, #13
 8002420:	d02b      	beq.n	800247a <cmd_parse+0x62>
		cmd_prompt();
	}
	else
	{
		/* check for buffer full (leave room for null) */
		if(cmd_wptr - &cmd_buffer[0] < 254)
 8002422:	f240 3214 	movw	r2, #788	; 0x314
 8002426:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800242a:	f240 23c4 	movw	r3, #708	; 0x2c4
 800242e:	6814      	ldr	r4, [r2, #0]
 8002430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002434:	1ae3      	subs	r3, r4, r3
 8002436:	2bfd      	cmp	r3, #253	; 0xfd
 8002438:	dd16      	ble.n	8002468 <cmd_parse+0x50>
		{
			*cmd_wptr++ = ch;	/* store to buffer */
			usart_putc(NULL, ch);   /* echo */
		}
	}
}
 800243a:	bd10      	pop	{r4, pc}
		if(cmd_wptr - &cmd_buffer[0] > 0)
 800243c:	f240 3414 	movw	r4, #788	; 0x314
 8002440:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002444:	f240 22c4 	movw	r2, #708	; 0x2c4
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	ddf2      	ble.n	800243a <cmd_parse+0x22>
			UART_printf("\b \b");		/* Erase & backspace */
 8002454:	f64e 00f0 	movw	r0, #59632	; 0xe8f0
 8002458:	f6c0 0000 	movt	r0, #2048	; 0x800
 800245c:	f000 fb76 	bl	8002b4c <UART_printf>
			cmd_wptr--;		/* remove previous char */
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	3b01      	subs	r3, #1
 8002464:	6023      	str	r3, [r4, #0]
}
 8002466:	bd10      	pop	{r4, pc}
			*cmd_wptr++ = ch;	/* store to buffer */
 8002468:	1c63      	adds	r3, r4, #1
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	7020      	strb	r0, [r4, #0]
			usart_putc(NULL, ch);   /* echo */
 800246e:	4601      	mov	r1, r0
}
 8002470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usart_putc(NULL, ch);   /* echo */
 8002474:	2000      	movs	r0, #0
 8002476:	f002 bb5f 	b.w	8004b38 <usart_putc>
		*cmd_wptr = '\0';	/* null terminate, no inc */
 800247a:	f240 3414 	movw	r4, #788	; 0x314
 800247e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002482:	2200      	movs	r2, #0
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	701a      	strb	r2, [r3, #0]
		cmd_proc();
 8002488:	f7ff f9d4 	bl	8001834 <cmd_proc>
	cmd_wptr = &cmd_buffer[0];
 800248c:	f240 23c4 	movw	r3, #708	; 0x2c4
	UART_printf("\r\nCommand>");
 8002490:	f24e 00d0 	movw	r0, #57552	; 0xe0d0
	cmd_wptr = &cmd_buffer[0];
 8002494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002498:	6023      	str	r3, [r4, #0]
	UART_printf("\r\nCommand>");
 800249a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 800249e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UART_printf("\r\nCommand>");
 80024a2:	f000 bb53 	b.w	8002b4c <UART_printf>
 80024a6:	bf00      	nop

080024a8 <led_toggle>:

/*
 * Toggle LED
 */
void led_toggle(uint16_t LED)
{
 80024a8:	4601      	mov	r1, r0
	HAL_GPIO_TogglePin(LED_LD4_GPIO_Port, LED);
 80024aa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80024ae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80024b2:	f003 bac9 	b.w	8005a48 <HAL_GPIO_TogglePin>
 80024b6:	bf00      	nop

080024b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	2300      	movs	r3, #0
{
 80024bc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80024c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80024ca:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80024d2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80024d6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d8:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80024dc:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80024e0:	6408      	str	r0, [r1, #64]	; 0x40
 80024e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80024ec:	9100      	str	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	6813      	ldr	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002500:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002506:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 800250a:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800250e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002510:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002514:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002518:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800251c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002520:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002524:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002528:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252a:	f004 fc67 	bl	8006dfc <HAL_RCC_OscConfig>
 800252e:	b108      	cbz	r0, 8002534 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002532:	e7fe      	b.n	8002532 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002538:	2200      	movs	r2, #0
 800253a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800253e:	240f      	movs	r4, #15
 8002540:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002546:	a802      	add	r0, sp, #8
 8002548:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800254e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002550:	f004 febc 	bl	80072cc <HAL_RCC_ClockConfig>
 8002554:	b108      	cbz	r0, 800255a <SystemClock_Config+0xa2>
 8002556:	b672      	cpsid	i
  while (1)
 8002558:	e7fe      	b.n	8002558 <SystemClock_Config+0xa0>
}
 800255a:	b015      	add	sp, #84	; 0x54
 800255c:	bd30      	pop	{r4, r5, pc}
 800255e:	bf00      	nop

08002560 <main>:
{
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	ed2d 8b02 	vpush	{d8}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2400      	movs	r4, #0
{
 800256a:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 800256c:	f002 fb6e 	bl	8004c4c <HAL_Init>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002570:	f44f 5560 	mov.w	r5, #14336	; 0x3800
  SystemClock_Config();
 8002574:	f7ff ffa0 	bl	80024b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 800257c:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002580:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002584:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	9424      	str	r4, [sp, #144]	; 0x90
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002588:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800258a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258e:	632b      	str	r3, [r5, #48]	; 0x30
 8002590:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	9315      	str	r3, [sp, #84]	; 0x54
 8002598:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	9416      	str	r4, [sp, #88]	; 0x58
 800259c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	632b      	str	r3, [r5, #48]	; 0x30
 80025a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	9316      	str	r3, [sp, #88]	; 0x58
 80025ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ae:	9417      	str	r4, [sp, #92]	; 0x5c
 80025b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	632b      	str	r3, [r5, #48]	; 0x30
 80025b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	9317      	str	r3, [sp, #92]	; 0x5c
 80025c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	9418      	str	r4, [sp, #96]	; 0x60
 80025c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	632b      	str	r3, [r5, #48]	; 0x30
 80025cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	9318      	str	r3, [sp, #96]	; 0x60
 80025d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	9419      	str	r4, [sp, #100]	; 0x64
 80025d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	632b      	str	r3, [r5, #48]	; 0x30
 80025e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 80025e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 80025ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 80025f8:	f003 fa22 	bl	8005a40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TEST_Pin|CS43L22_reset_Pin, GPIO_PIN_RESET);
 80025fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002600:	4622      	mov	r2, r4
 8002602:	f248 0110 	movw	r1, #32784	; 0x8010
 8002606:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800260a:	f003 fa19 	bl	8005a40 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  GPIO_InitStruct.Pin = LED_LD4_Pin|CS43L22_reset_Pin;
 8002612:	f241 0210 	movw	r2, #4112	; 0x1010
 8002616:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002618:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800261c:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_LD4_Pin|CS43L22_reset_Pin;
 800261e:	f04f 0800 	mov.w	r8, #0
 8002622:	f04f 0900 	mov.w	r9, #0
 8002626:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800262a:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f003 f8c7 	bl	80057c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TEST_Pin;
 8002632:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002636:	2301      	movs	r3, #1
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8002638:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  GPIO_InitStruct.Pin = TEST_Pin;
 800263c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8002640:	f2c4 0002 	movt	r0, #16386	; 0x4002
  GPIO_InitStruct.Pin = TEST_Pin;
 8002644:	2200      	movs	r2, #0
 8002646:	2303      	movs	r3, #3
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8002648:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = TEST_Pin;
 800264a:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800264e:	f003 f8b7 	bl	80057c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	9413      	str	r4, [sp, #76]	; 0x4c
 8002654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800265a:	632b      	str	r3, [r5, #48]	; 0x30
 800265c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800265e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002662:	9313      	str	r3, [sp, #76]	; 0x4c
 8002664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002666:	9414      	str	r4, [sp, #80]	; 0x50
 8002668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266e:	632b      	str	r3, [r5, #48]	; 0x30
 8002670:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002676:	4622      	mov	r2, r4
 8002678:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800267a:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800267c:	2010      	movs	r0, #16
  __HAL_RCC_DMA2_CLK_ENABLE();
 800267e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002680:	f002 fda2 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002684:	2010      	movs	r0, #16
 8002686:	f002 fddf 	bl	8005248 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800268a:	4622      	mov	r2, r4
 800268c:	4621      	mov	r1, r4
 800268e:	2038      	movs	r0, #56	; 0x38
 8002690:	f002 fd9a 	bl	80051c8 <HAL_NVIC_SetPriority>
  hi2c1.Instance = I2C1;
 8002694:	f240 761c 	movw	r6, #1820	; 0x71c
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002698:	2038      	movs	r0, #56	; 0x38
 800269a:	f002 fdd5 	bl	8005248 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800269e:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80026a2:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80026a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80026aa:	6033      	str	r3, [r6, #0]
  hi2c1.Init.ClockSpeed = 150000;
 80026ac:	f644 13f0 	movw	r3, #18928	; 0x49f0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 150000;
 80026b4:	f2c0 0302 	movt	r3, #2
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b8:	4630      	mov	r0, r6
  hi2c1.Init.OwnAddress1 = 0;
 80026ba:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026be:	e9c6 7404 	strd	r7, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c2:	e9c6 4406 	strd	r4, r4, [r6, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c6:	6234      	str	r4, [r6, #32]
  hi2c1.Init.ClockSpeed = 150000;
 80026c8:	6073      	str	r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ca:	f003 fabd 	bl	8005c48 <HAL_I2C_Init>
 80026ce:	b108      	cbz	r0, 80026d4 <main+0x174>
 80026d0:	b672      	cpsid	i
  while (1)
 80026d2:	e7fe      	b.n	80026d2 <main+0x172>
  hi2s3.Instance = SPI3;
 80026d4:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80026d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80026e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80026e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80026e6:	f44f 42ee 	mov.w	r2, #30464	; 0x7700
 80026ea:	f2c0 0201 	movt	r2, #1
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80026ee:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80026f2:	e9c3 0006 	strd	r0, r0, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80026f6:	6218      	str	r0, [r3, #32]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80026f8:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80026fa:	4618      	mov	r0, r3
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80026fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002702:	611a      	str	r2, [r3, #16]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002704:	f004 f864 	bl	80067d0 <HAL_I2S_Init>
 8002708:	b108      	cbz	r0, 800270e <main+0x1ae>
 800270a:	b672      	cpsid	i
  while (1)
 800270c:	e7fe      	b.n	800270c <main+0x1ac>
  hadc1.Instance = ADC1;
 800270e:	f240 6400 	movw	r4, #1536	; 0x600
 8002712:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800271e:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 8002720:	2301      	movs	r3, #1
 8002722:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002724:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002728:	6163      	str	r3, [r4, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	6063      	str	r3, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002738:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 800273c:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002740:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002742:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002744:	7620      	strb	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002746:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274a:	60e0      	str	r0, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800274c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002750:	4620      	mov	r0, r4
 8002752:	f002 fabf 	bl	8004cd4 <HAL_ADC_Init>
 8002756:	b108      	cbz	r0, 800275c <main+0x1fc>
 8002758:	b672      	cpsid	i
  while (1)
 800275a:	e7fe      	b.n	800275a <main+0x1fa>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800275c:	9022      	str	r0, [sp, #136]	; 0x88
  sConfig.Channel = ADC_CHANNEL_2;
 800275e:	2202      	movs	r2, #2
 8002760:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002762:	4620      	mov	r0, r4
 8002764:	a920      	add	r1, sp, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_2;
 8002766:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276a:	f002 fc67 	bl	800503c <HAL_ADC_ConfigChannel>
 800276e:	b9e0      	cbnz	r0, 80027aa <main+0x24a>
  htim3.Instance = TIM3;
 8002770:	f640 040c 	movw	r4, #2060	; 0x80c
 8002774:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002780:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 8002784:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  htim3.Init.Prescaler = 0;
 800278c:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278e:	6120      	str	r0, [r4, #16]
  htim3.Instance = TIM3;
 8002790:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 98;
 8002792:	2010      	movs	r0, #16
 8002794:	2362      	movs	r3, #98	; 0x62
 8002796:	e9c4 0302 	strd	r0, r3, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800279a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800279c:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800279e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027a0:	f004 ff64 	bl	800766c <HAL_TIM_Base_Init>
 80027a4:	b118      	cbz	r0, 80027ae <main+0x24e>
 80027a6:	b672      	cpsid	i
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <main+0x248>
 80027aa:	b672      	cpsid	i
 80027ac:	e7fe      	b.n	80027ac <main+0x24c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b2:	a920      	add	r1, sp, #128	; 0x80
 80027b4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b6:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b8:	f005 fa86 	bl	8007cc8 <HAL_TIM_ConfigClockSource>
 80027bc:	b108      	cbz	r0, 80027c2 <main+0x262>
 80027be:	b672      	cpsid	i
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <main+0x260>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027c2:	2220      	movs	r2, #32
 80027c4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c6:	4620      	mov	r0, r4
 80027c8:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027ca:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ce:	f005 fb2b 	bl	8007e28 <HAL_TIMEx_MasterConfigSynchronization>
 80027d2:	b108      	cbz	r0, 80027d8 <main+0x278>
 80027d4:	b672      	cpsid	i
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <main+0x276>
  hi2c3.Instance = I2C3;
 80027d8:	f240 7470 	movw	r4, #1904	; 0x770
 80027dc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80027e0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80027e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  hi2c3.Init.OwnAddress1 = 0;
 80027e8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80027ec:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027f0:	e9c4 0007 	strd	r0, r0, [r4, #28]
  hi2c3.Instance = I2C3;
 80027f4:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027f6:	4620      	mov	r0, r4
  hi2c3.Init.ClockSpeed = 50000;
 80027f8:	f24c 3350 	movw	r3, #50000	; 0xc350
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fc:	6127      	str	r7, [r4, #16]
  hi2c3.Init.ClockSpeed = 50000;
 80027fe:	6063      	str	r3, [r4, #4]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002800:	f003 fa22 	bl	8005c48 <HAL_I2C_Init>
 8002804:	b108      	cbz	r0, 800280a <main+0x2aa>
 8002806:	b672      	cpsid	i
  while (1)
 8002808:	e7fe      	b.n	8002808 <main+0x2a8>
  hdac.Instance = DAC;
 800280a:	f240 6548 	movw	r5, #1608	; 0x648
 800280e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002812:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
  DAC_ChannelConfTypeDef sConfig = {0};
 8002816:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  hdac.Instance = DAC;
 800281a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800281e:	4628      	mov	r0, r5
  hdac.Instance = DAC;
 8002820:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002822:	f002 fd3b 	bl	800529c <HAL_DAC_Init>
 8002826:	4602      	mov	r2, r0
 8002828:	b108      	cbz	r0, 800282e <main+0x2ce>
 800282a:	b672      	cpsid	i
  while (1)
 800282c:	e7fe      	b.n	800282c <main+0x2cc>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800282e:	4628      	mov	r0, r5
 8002830:	a920      	add	r1, sp, #128	; 0x80
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002832:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002836:	f002 fd77 	bl	8005328 <HAL_DAC_ConfigChannel>
 800283a:	b108      	cbz	r0, 8002840 <main+0x2e0>
 800283c:	b672      	cpsid	i
  while (1)
 800283e:	e7fe      	b.n	800283e <main+0x2de>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002840:	f240 6048 	movw	r0, #1608	; 0x648
 8002844:	2210      	movs	r2, #16
 8002846:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800284a:	a920      	add	r1, sp, #128	; 0x80
 800284c:	f002 fd6c 	bl	8005328 <HAL_DAC_ConfigChannel>
 8002850:	b108      	cbz	r0, 8002856 <main+0x2f6>
 8002852:	b672      	cpsid	i
  while (1)
 8002854:	e7fe      	b.n	8002854 <main+0x2f4>
  huart5.Instance = UART5;
 8002856:	f640 079c 	movw	r7, #2204	; 0x89c
 800285a:	f2c2 0700 	movt	r7, #8192	; 0x2000
 800285e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002862:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002866:	603b      	str	r3, [r7, #0]
  huart5.Init.BaudRate = 115200;
 8002868:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
 800286c:	e9c7 0002 	strd	r0, r0, [r7, #8]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	e9c7 0006 	strd	r0, r0, [r7, #24]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002874:	6138      	str	r0, [r7, #16]
  huart5.Init.BaudRate = 115200;
 8002876:	607b      	str	r3, [r7, #4]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002878:	4638      	mov	r0, r7
  huart5.Init.Mode = UART_MODE_TX_RX;
 800287a:	230c      	movs	r3, #12
 800287c:	617b      	str	r3, [r7, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800287e:	f005 fb1f 	bl	8007ec0 <HAL_UART_Init>
 8002882:	b108      	cbz	r0, 8002888 <main+0x328>
 8002884:	b672      	cpsid	i
  while (1)
 8002886:	e7fe      	b.n	8002886 <main+0x326>
  htim4.Instance = TIM4;
 8002888:	f640 0554 	movw	r5, #2132	; 0x854
 800288c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002894:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002898:	602b      	str	r3, [r5, #0]
  htim4.Init.Period = 8191;
 800289a:	f641 73ff 	movw	r3, #8191	; 0x1fff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289e:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
 80028a2:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 80028aa:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
 80028ae:	e9cd 0024 	strd	r0, r0, [sp, #144]	; 0x90
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	e9c5 0001 	strd	r0, r0, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b6:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b8:	9026      	str	r0, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ba:	901b      	str	r0, [sp, #108]	; 0x6c
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	6128      	str	r0, [r5, #16]
  htim4.Init.Period = 8191;
 80028be:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028c0:	4628      	mov	r0, r5
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028c6:	f004 fed1 	bl	800766c <HAL_TIM_Base_Init>
 80028ca:	b108      	cbz	r0, 80028d0 <main+0x370>
 80028cc:	b672      	cpsid	i
  while (1)
 80028ce:	e7fe      	b.n	80028ce <main+0x36e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028d4:	a91c      	add	r1, sp, #112	; 0x70
 80028d6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d8:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028da:	f005 f9f5 	bl	8007cc8 <HAL_TIM_ConfigClockSource>
 80028de:	b108      	cbz	r0, 80028e4 <main+0x384>
 80028e0:	b672      	cpsid	i
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <main+0x382>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028e4:	4628      	mov	r0, r5
 80028e6:	f004 ffab 	bl	8007840 <HAL_TIM_PWM_Init>
 80028ea:	b108      	cbz	r0, 80028f0 <main+0x390>
 80028ec:	b672      	cpsid	i
  while (1)
 80028ee:	e7fe      	b.n	80028ee <main+0x38e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2200      	movs	r2, #0
 80028f2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028f4:	a91a      	add	r1, sp, #104	; 0x68
 80028f6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028fc:	f005 fa94 	bl	8007e28 <HAL_TIMEx_MasterConfigSynchronization>
 8002900:	b108      	cbz	r0, 8002906 <main+0x3a6>
 8002902:	b672      	cpsid	i
  while (1)
 8002904:	e7fe      	b.n	8002904 <main+0x3a4>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002906:	9022      	str	r0, [sp, #136]	; 0x88
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002908:	9024      	str	r0, [sp, #144]	; 0x90
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290a:	f04f 0860 	mov.w	r8, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800290e:	a920      	add	r1, sp, #128	; 0x80
 8002910:	2204      	movs	r2, #4
 8002912:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002914:	f04f 0900 	mov.w	r9, #0
 8002918:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800291c:	f005 f8b0 	bl	8007a80 <HAL_TIM_PWM_ConfigChannel>
 8002920:	4680      	mov	r8, r0
 8002922:	b108      	cbz	r0, 8002928 <main+0x3c8>
 8002924:	b672      	cpsid	i
  while (1)
 8002926:	e7fe      	b.n	8002926 <main+0x3c6>
  HAL_TIM_MspPostInit(&htim4);
 8002928:	4628      	mov	r0, r5
 800292a:	f001 f845 	bl	80039b8 <HAL_TIM_MspPostInit>
  usart_init(&huart5);
 800292e:	4638      	mov	r0, r7
 8002930:	f002 f8ae 	bl	8004a90 <usart_init>
  HAL_UART_Receive_IT(&huart5, (uint8_t*) &rxchar, 1);
 8002934:	f640 3104 	movw	r1, #2820	; 0xb04
 8002938:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800293c:	2201      	movs	r2, #1
 800293e:	4638      	mov	r0, r7
 8002940:	f005 fb80 	bl	8008044 <HAL_UART_Receive_IT>
  UART_printf("\r\n");
 8002944:	f24e 50f8 	movw	r0, #58872	; 0xe5f8
 8002948:	f6c0 0000 	movt	r0, #2048	; 0x800
 800294c:	f000 f8fe 	bl	8002b4c <UART_printf>
  UART_printf("+------------------------------------+\r\n");
 8002950:	f64e 10b4 	movw	r0, #59828	; 0xe9b4
 8002954:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002958:	f000 f8f8 	bl	8002b4c <UART_printf>
  UART_printf("|     Experimental SDR receiver      |\r\n");
 800295c:	f64e 10e0 	movw	r0, #59872	; 0xe9e0
 8002960:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002964:	f000 f8f2 	bl	8002b4c <UART_printf>
  UART_printf("| based on the STM32F407 and R820T2. |\r\n");
 8002968:	f64e 200c 	movw	r0, #59916	; 0xea0c
 800296c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002970:	f000 f8ec 	bl	8002b4c <UART_printf>
  UART_printf("+------------------------------------+\r\n");
 8002974:	f64e 10b4 	movw	r0, #59828	; 0xe9b4
 8002978:	f6c0 0000 	movt	r0, #2048	; 0x800
 800297c:	f000 f8e6 	bl	8002b4c <UART_printf>
  R820T2_init(hi2c3);
 8002980:	f240 7180 	movw	r1, #1920	; 0x780
 8002984:	2244      	movs	r2, #68	; 0x44
 8002986:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800298a:	4668      	mov	r0, sp
 800298c:	f005 fdb8 	bl	8008500 <memcpy>
 8002990:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002994:	f000 fd9c 	bl	80034d0 <R820T2_init>
  R820T2_set_mixer_agc(1);
 8002998:	2001      	movs	r0, #1
 800299a:	f000 fc1f 	bl	80031dc <R820T2_set_mixer_agc>
  R820T2_set_lna_agc(1);
 800299e:	2001      	movs	r0, #1
 80029a0:	f000 fbf8 	bl	8003194 <R820T2_set_lna_agc>
  R820T2_config_VAGC_pin(1); //Enable VAGC pin
 80029a4:	2001      	movs	r0, #1
 80029a6:	f000 fbd5 	bl	8003154 <R820T2_config_VAGC_pin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //starting PWM for VAGC pin voltage settings
 80029aa:	2104      	movs	r1, #4
 80029ac:	4628      	mov	r0, r5
 80029ae:	f004 ffeb 	bl	8007988 <HAL_TIM_PWM_Start>
  R820T2_set_vga_gain_VAGC_pin(48.0); //dB
 80029b2:	2300      	movs	r3, #0
 80029b4:	f2c4 2340 	movt	r3, #16960	; 0x4240
 80029b8:	ee00 3a10 	vmov	s0, r3
 80029bc:	f000 fba6 	bl	800310c <R820T2_set_vga_gain_VAGC_pin>
  UART_printf("R820T2 initialized.\r\n");
 80029c0:	f64e 2038 	movw	r0, #59960	; 0xea38
 80029c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80029c8:	f000 f8c0 	bl	8002b4c <UART_printf>
  CS43_Init(hi2c1, MODE_ANALOG_);
 80029cc:	f240 712c 	movw	r1, #1836	; 0x72c
 80029d0:	2301      	movs	r3, #1
 80029d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80029d6:	2244      	movs	r2, #68	; 0x44
 80029d8:	4668      	mov	r0, sp
 80029da:	9311      	str	r3, [sp, #68]	; 0x44
 80029dc:	f005 fd90 	bl	8008500 <memcpy>
 80029e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029e4:	f7fe fb20 	bl	8001028 <CS43_Init>
  CS43_SetVolume(CS43_default_vol); //maximum value without distortion for 3.00 Vpp from DAC is CS43_default_vol=48 for DISCOVERY BOARD
 80029e8:	2030      	movs	r0, #48	; 0x30
 80029ea:	f7fe fd07 	bl	80013fc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80029ee:	2003      	movs	r0, #3
 80029f0:	f7fe fcc8 	bl	8001384 <CS43_Enable_RightLeft>
  CS43_Start();
 80029f4:	f7fe fd60 	bl	80014b8 <CS43_Start>
  UART_printf("CS43L22 initialized.\r\n");
 80029f8:	f64e 2050 	movw	r0, #59984	; 0xea50
 80029fc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002a00:	f000 f8a4 	bl	8002b4c <UART_printf>
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8002a04:	f64f 031a 	movw	r3, #63514	; 0xf81a
 8002a08:	f6c3 6342 	movt	r3, #15938	; 0x3e42
 8002a0c:	f640 0ae0 	movw	sl, #2272	; 0x8e0
 8002a10:	f240 5970 	movw	r9, #1392	; 0x570
 8002a14:	ee08 3a10 	vmov	s16, r3
 8002a18:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8002a1c:	f2c2 0900 	movt	r9, #8192	; 0x2000
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a20:	4647      	mov	r7, r8
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8002a22:	f04f 0b21 	mov.w	fp, #33	; 0x21
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8002a26:	ee07 8a90 	vmov	s15, r8
 8002a2a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a2e:	3701      	adds	r7, #1
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8002a30:	ee68 8a88 	vmul.f32	s17, s17, s16
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8002a34:	f108 080a 	add.w	r8, r8, #10
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8002a38:	eeb0 0a68 	vmov.f32	s0, s17
 8002a3c:	f00a fb24 	bl	800d088 <sinf>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
	  cosine_arr[i] = cosf(dx*k);
 8002a44:	eeb0 0a68 	vmov.f32	s0, s17
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8002a48:	ecea 7a01 	vstmia	sl!, {s15}
	  cosine_arr[i] = cosf(dx*k);
 8002a4c:	f00a fad8 	bl	800d000 <cosf>
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8002a50:	fbb8 f3fb 	udiv	r3, r8, fp
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a54:	b2ff      	uxtb	r7, r7
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8002a56:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8002a5a:	eba8 0803 	sub.w	r8, r8, r3
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a5e:	2f21      	cmp	r7, #33	; 0x21
	  cosine_arr[i] = cosf(dx*k);
 8002a60:	eca9 0a01 	vstmia	r9!, {s0}
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8002a64:	fa5f f888 	uxtb.w	r8, r8
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a68:	d1dd      	bne.n	8002a26 <main+0x4c6>
  for (uint8_t i=0; i<N_asin; i++) asin_arr[i] = asinf(dx*i - 1.0); //calculating look-up table for arsine (needed for FM)
 8002a6a:	f247 430e 	movw	r3, #29710	; 0x740e
 8002a6e:	f6c3 435a 	movt	r3, #15450	; 0x3c5a
 8002a72:	f240 3518 	movw	r5, #792	; 0x318
 8002a76:	ee08 3a10 	vmov	s16, r3
 8002a7a:	f2c2 0500 	movt	r5, #8192	; 0x2000
  for (uint8_t i=0; i<N_cos_sin; i++)
 8002a7e:	2400      	movs	r4, #0
  for (uint8_t i=0; i<N_asin; i++) asin_arr[i] = asinf(dx*i - 1.0); //calculating look-up table for arsine (needed for FM)
 8002a80:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8002a84:	ee07 4a90 	vmov	s15, r4
 8002a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8c:	eeb0 0a68 	vmov.f32	s0, s17
 8002a90:	eea7 0a88 	vfma.f32	s0, s15, s16
 8002a94:	f00a fb58 	bl	800d148 <asinf>
 8002a98:	3401      	adds	r4, #1
 8002a9a:	2c96      	cmp	r4, #150	; 0x96
 8002a9c:	eca5 0a01 	vstmia	r5!, {s0}
 8002aa0:	d1f0      	bne.n	8002a84 <main+0x524>
  set_IQ_filters_coeff(b, a, Demod_Type);
 8002aa2:	f640 2372 	movw	r3, #2674	; 0xa72
 8002aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aaa:	f640 21cc 	movw	r1, #2764	; 0xacc
 8002aae:	f640 20e0 	movw	r0, #2784	; 0xae0
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002ab8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002abc:	f7fe fe4e 	bl	800175c <set_IQ_filters_coeff>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002ac0:	f240 6048 	movw	r0, #1608	; 0x648
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aca:	f002 fbfd 	bl	80052c8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002ace:	f240 6048 	movw	r0, #1608	; 0x648
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ad8:	f002 fbf6 	bl	80052c8 <HAL_DAC_Start>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 4); //starting I2S 16-bits dummy words sending with circular buffer just for MCLK clock for CS43L22
 8002adc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002ae0:	f240 70c4 	movw	r0, #1988	; 0x7c4
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aee:	f003 ff11 	bl	8006914 <HAL_I2S_Transmit_DMA>
  HAL_TIM_Base_Start(&htim3); //starting timer for ADC triggering
 8002af2:	f640 000c 	movw	r0, #2060	; 0x80c
 8002af6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002afa:	f004 fe5b 	bl	80077b4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, v_in_samples, 8); //starting DMA for ADC with circular buffer
 8002afe:	f640 1164 	movw	r1, #2404	; 0x964
 8002b02:	f240 6000 	movw	r0, #1536	; 0x600
 8002b06:	2208      	movs	r2, #8
 8002b08:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002b0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b10:	f002 f98e 	bl	8004e30 <HAL_ADC_Start_DMA>
  init_cmd();
 8002b14:	f7ff fc70 	bl	80023f8 <init_cmd>
  tick = HAL_GetTick() + 100;
 8002b18:	f002 f8c2 	bl	8004ca0 <HAL_GetTick>
 8002b1c:	f100 0464 	add.w	r4, r0, #100	; 0x64
	if((rxchar_loc = usart_getc())!= EOF)
 8002b20:	f001 ffec 	bl	8004afc <usart_getc>
 8002b24:	1c43      	adds	r3, r0, #1
		cmd_parse(rxchar_loc);
 8002b26:	b2c0      	uxtb	r0, r0
	if((rxchar_loc = usart_getc())!= EOF)
 8002b28:	d001      	beq.n	8002b2e <main+0x5ce>
		cmd_parse(rxchar_loc);
 8002b2a:	f7ff fc75 	bl	8002418 <cmd_parse>
	if(tick < HAL_GetTick())
 8002b2e:	f002 f8b7 	bl	8004ca0 <HAL_GetTick>
 8002b32:	4284      	cmp	r4, r0
 8002b34:	d2f4      	bcs.n	8002b20 <main+0x5c0>
		  led_toggle(LED1);
 8002b36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b3a:	f7ff fcb5 	bl	80024a8 <led_toggle>
		  tick = HAL_GetTick() + 100;
 8002b3e:	f002 f8af 	bl	8004ca0 <HAL_GetTick>
 8002b42:	f100 0464 	add.w	r4, r0, #100	; 0x64
 8002b46:	e7eb      	b.n	8002b20 <main+0x5c0>

08002b48 <Error_Handler>:
 8002b48:	b672      	cpsid	i
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <Error_Handler+0x2>

08002b4c <UART_printf>:
#include "usart.h"

char UART_printf_tmp_buf[100];

void UART_printf(const char *format, ...)
{
 8002b4c:	b40f      	push	{r0, r1, r2, r3}
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	aa04      	add	r2, sp, #16
   va_list args;
   va_start(args, format);
   vsprintf(UART_printf_tmp_buf, format, args);
 8002b54:	f640 1484 	movw	r4, #2436	; 0x984
 8002b58:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
 8002b5c:	f852 1b04 	ldr.w	r1, [r2], #4
   va_start(args, format);
 8002b60:	9201      	str	r2, [sp, #4]
   vsprintf(UART_printf_tmp_buf, format, args);
 8002b62:	4620      	mov	r0, r4
 8002b64:	f007 fb2a 	bl	800a1bc <vsiprintf>
   va_end(args);

   char *tmp_pointer = UART_printf_tmp_buf;
   while(*tmp_pointer != '\0') usart_putc(0, *tmp_pointer++);
 8002b68:	7821      	ldrb	r1, [r4, #0]
 8002b6a:	b131      	cbz	r1, 8002b7a <UART_printf+0x2e>
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f001 ffe3 	bl	8004b38 <usart_putc>
 8002b72:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b76:	2900      	cmp	r1, #0
 8002b78:	d1f8      	bne.n	8002b6c <UART_printf+0x20>
}
 8002b7a:	b002      	add	sp, #8
 8002b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b80:	b004      	add	sp, #16
 8002b82:	4770      	bx	lr

08002b84 <R820T2_TIMEOUT_UserCallback>:
/*
 * exception handler for I2C timeout
 */
void R820T2_TIMEOUT_UserCallback(void)
{
	UART_printf("\r\nFailed to communicate with R820T2\n\r");
 8002b84:	f64e 2068 	movw	r0, #60008	; 0xea68
{
 8002b88:	b508      	push	{r3, lr}
	UART_printf("\r\nFailed to communicate with R820T2\n\r");
 8002b8a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b8e:	f7ff ffdd 	bl	8002b4c <UART_printf>
  /* Block communication and all processes */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <R820T2_TIMEOUT_UserCallback+0xe>

08002b94 <R820T2_i2c_write_reg>:
 * Write single R820T2 reg via I2C
 */
void R820T2_i2c_write_reg(uint8_t reg, uint8_t data)
{
    /* check for legal reg */
    if(reg>=R820T2_NUM_REGS)
 8002b94:	281f      	cmp	r0, #31
 8002b96:	d900      	bls.n	8002b9a <R820T2_i2c_write_reg+0x6>
 8002b98:	4770      	bx	lr
{
 8002b9a:	b510      	push	{r4, lr}
        return;
    
    /* update cache */
    r820t_regs[reg] = data;
 8002b9c:	f640 2c44 	movw	ip, #2628	; 0xa44
{
 8002ba0:	b084      	sub	sp, #16
    r820t_regs[reg] = data;
 8002ba2:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    
    /* send via I2C */
    R820T2_i2c_write(reg, &r820t_regs[reg], 1);
 8002ba6:	eb0c 0200 	add.w	r2, ip, r0
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002baa:	2301      	movs	r3, #1
 8002bac:	2496      	movs	r4, #150	; 0x96
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002bb4:	4602      	mov	r2, r0
    r820t_regs[reg] = data;
 8002bb6:	f80c 1000 	strb.w	r1, [ip, r0]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002bba:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002bbe:	2134      	movs	r1, #52	; 0x34
 8002bc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bc4:	f003 fd10 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002bc8:	b908      	cbnz	r0, 8002bce <R820T2_i2c_write_reg+0x3a>
}
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd10      	pop	{r4, pc}
    	R820T2_TIMEOUT_UserCallback();
 8002bce:	f7ff ffd9 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>
 8002bd2:	bf00      	nop

08002bd4 <R820T2_i2c_read_reg_uncached>:

/*
 * Read R820T2 reg - uncached
 */
uint8_t R820T2_i2c_read_reg_uncached(uint8_t reg)
{
 8002bd4:	b570      	push	{r4, r5, r6, lr}
    uint8_t sz = reg+1;
 8002bd6:	1c44      	adds	r4, r0, #1
 8002bd8:	b2e4      	uxtb	r4, r4
    uint8_t *data = r820t_regs;

    /* check for legal read */
    if(sz>R820T2_NUM_REGS)
 8002bda:	2c20      	cmp	r4, #32
{
 8002bdc:	b082      	sub	sp, #8
    if(sz>R820T2_NUM_REGS)
 8002bde:	d902      	bls.n	8002be6 <R820T2_i2c_read_reg_uncached+0x12>
        return 0;
 8002be0:	2000      	movs	r0, #0
    /* get all regs up to & including desired reg */
    R820T2_i2c_read_raw(data, sz);

    /* return desired */
    return r820t_regs[reg];
}
 8002be2:	b002      	add	sp, #8
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
	if (HAL_I2C_Master_Receive(&hi2cx, R820T2_I2C_ADDRESS, data, sz, 150) != HAL_OK)
 8002be6:	f640 2644 	movw	r6, #2628	; 0xa44
 8002bea:	2396      	movs	r3, #150	; 0x96
 8002bec:	4605      	mov	r5, r0
 8002bee:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002bf2:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4632      	mov	r2, r6
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c00:	2134      	movs	r1, #52	; 0x34
 8002c02:	f003 fa83 	bl	800610c <HAL_I2C_Master_Receive>
 8002c06:	b9a8      	cbnz	r0, 8002c34 <R820T2_i2c_read_reg_uncached+0x60>
	while(sz--)
 8002c08:	b18c      	cbz	r4, 8002c2e <R820T2_i2c_read_reg_uncached+0x5a>
 8002c0a:	f64e 625c 	movw	r2, #61020	; 0xee5c
 8002c0e:	4434      	add	r4, r6
 8002c10:	4631      	mov	r1, r6
 8002c12:	f6c0 0200 	movt	r2, #2048	; 0x800
		value = *data;
 8002c16:	780b      	ldrb	r3, [r1, #0]
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 8002c18:	f003 000f 	and.w	r0, r3, #15
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	5c10      	ldrb	r0, [r2, r0]
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002c26:	f801 3b01 	strb.w	r3, [r1], #1
	while(sz--)
 8002c2a:	42a1      	cmp	r1, r4
 8002c2c:	d1f3      	bne.n	8002c16 <R820T2_i2c_read_reg_uncached+0x42>
    return r820t_regs[reg];
 8002c2e:	5d70      	ldrb	r0, [r6, r5]
}
 8002c30:	b002      	add	sp, #8
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
		R820T2_TIMEOUT_UserCallback();
 8002c34:	f7ff ffa6 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

08002c38 <R820T2_set_pll>:

/*
 * Update LO PLL
 */
void R820T2_set_pll(uint32_t freq)
{
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t nint;

    /* Calculate vco output divider */
    for (div_num = 0; div_num < 5; div_num++)
    {
        vco_exact = freq << (div_num + 1);
 8002c3c:	0047      	lsls	r7, r0, #1
    uint32_t pll_ref = (r820t_xtal_freq >> 1);
 8002c3e:	f640 2164 	movw	r1, #2660	; 0xa64
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c42:	f1a7 43d3 	sub.w	r3, r7, #1769996288	; 0x69800000
 8002c46:	f44f 5262 	mov.w	r2, #14464	; 0x3880
    uint32_t pll_ref = (r820t_xtal_freq >> 1);
 8002c4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c4e:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8002c52:	f6c7 62f5 	movt	r2, #32501	; 0x7ef5
 8002c56:	4293      	cmp	r3, r2
    uint32_t pll_ref = (r820t_xtal_freq >> 1);
 8002c58:	680d      	ldr	r5, [r1, #0]
{
 8002c5a:	b085      	sub	sp, #20
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c5c:	f240 814a 	bls.w	8002ef4 <R820T2_set_pll+0x2bc>
        vco_exact = freq << (div_num + 1);
 8002c60:	0087      	lsls	r7, r0, #2
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c62:	f1a7 43d3 	sub.w	r3, r7, #1769996288	; 0x69800000
 8002c66:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f240 8146 	bls.w	8002efc <R820T2_set_pll+0x2c4>
        vco_exact = freq << (div_num + 1);
 8002c70:	00c7      	lsls	r7, r0, #3
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c72:	f1a7 43d3 	sub.w	r3, r7, #1769996288	; 0x69800000
 8002c76:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	f240 8140 	bls.w	8002f00 <R820T2_set_pll+0x2c8>
        vco_exact = freq << (div_num + 1);
 8002c80:	0107      	lsls	r7, r0, #4
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c82:	f1a7 43d3 	sub.w	r3, r7, #1769996288	; 0x69800000
 8002c86:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f240 813a 	bls.w	8002f04 <R820T2_set_pll+0x2cc>
        vco_exact = freq << (div_num + 1);
 8002c90:	0147      	lsls	r7, r0, #5
        if (vco_exact >= vco_min && vco_exact <= vco_max)
 8002c92:	f1a7 43d3 	sub.w	r3, r7, #1769996288	; 0x69800000
 8002c96:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f240 8134 	bls.w	8002f08 <R820T2_set_pll+0x2d0>
            break;
        }
    }

    /* Calculate the integer PLL feedback divider */
    vco_exact = freq << (div_num + 1);
 8002ca0:	0187      	lsls	r7, r0, #6
 8002ca2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
    r820t_regs[reg] = data;
 8002ca6:	f640 2644 	movw	r6, #2628	; 0xa44
 8002caa:	f2c2 0600 	movt	r6, #8192	; 0x2000
    nint = (uint8_t) ((vco_exact + (pll_ref >> 16)) / pll_ref_2x);
 8002cae:	eb07 4255 	add.w	r2, r7, r5, lsr #17
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002cb2:	7c31      	ldrb	r1, [r6, #16]
    nint = (uint8_t) ((vco_exact + (pll_ref >> 16)) / pll_ref_2x);
 8002cb4:	fbb2 f2f5 	udiv	r2, r2, r5
 8002cb8:	b2d2      	uxtb	r2, r2
    vco_frac = vco_exact - pll_ref_2x * nint;

    nint -= 13;
 8002cba:	f1a2 0c0d 	sub.w	ip, r2, #13
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002cbe:	f001 011f 	and.w	r1, r1, #31
    vco_frac = vco_exact - pll_ref_2x * nint;
 8002cc2:	fb05 7712 	mls	r7, r5, r2, r7
    r820t_regs[reg] = data;
 8002cc6:	4632      	mov	r2, r6
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002cc8:	430b      	orrs	r3, r1
    r820t_regs[reg] = data;
 8002cca:	f802 3f10 	strb.w	r3, [r2, #16]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002cce:	f04f 0901 	mov.w	r9, #1
 8002cd2:	f04f 0896 	mov.w	r8, #150	; 0x96
 8002cd6:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002cda:	9200      	str	r2, [sp, #0]
 8002cdc:	e9cd 9801 	strd	r9, r8, [sp, #4]
 8002ce0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ce4:	464b      	mov	r3, r9
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	2134      	movs	r1, #52	; 0x34
    nint = (uint8_t) ((vco_exact + (pll_ref >> 16)) / pll_ref_2x);
 8002cea:	0c6c      	lsrs	r4, r5, #17
    ni = (nint >> 2);
 8002cec:	f3cc 0a85 	ubfx	sl, ip, #2, #6
    si = nint - (ni << 2);
 8002cf0:	f00c 0b03 	and.w	fp, ip, #3
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002cf4:	f003 fc78 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f040 80f9 	bne.w	8002ef0 <R820T2_set_pll+0x2b8>
    r820t_regs[reg] = data;
 8002cfe:	4633      	mov	r3, r6

    /* Set the vco output divider */
    R820T2_i2c_write_cache_mask(0x10, (uint8_t) (div_num << 5), 0xe0);

    /* Set the PLL Feedback integer divider */
    R820T2_i2c_write_reg(0x14, (uint8_t) (ni + (si << 6)));
 8002d00:	eb0a 1a8b 	add.w	sl, sl, fp, lsl #6
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002d04:	e9cd 9801 	strd	r9, r8, [sp, #4]
    r820t_regs[reg] = data;
 8002d08:	f803 af14 	strb.w	sl, [r3, #20]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002d0c:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d16:	464b      	mov	r3, r9
 8002d18:	2214      	movs	r2, #20
 8002d1a:	2134      	movs	r1, #52	; 0x34
 8002d1c:	f003 fc64 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002d20:	2800      	cmp	r0, #0
 8002d22:	f040 80e5 	bne.w	8002ef0 <R820T2_set_pll+0x2b8>

    /* Update Fractional PLL */
    if (vco_frac == 0)
 8002d26:	2f00      	cmp	r7, #0
 8002d28:	f000 80cc 	beq.w	8002ec4 <R820T2_set_pll+0x28c>
        R820T2_i2c_write_cache_mask(0x12, 0x08, 0x08);
    }
    else
    {
        /* Compute the Sigma-Delta Modulator */
        vco_frac += pll_ref >> 16;
 8002d2c:	19e3      	adds	r3, r4, r7
        sdm = 0;
        for(n_sdm = 0; n_sdm < 16; n_sdm++)
        {
            con_frac = pll_ref >> n_sdm;
            if (vco_frac >= con_frac)
 8002d2e:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
    uint32_t pll_ref = (r820t_xtal_freq >> 1);
 8002d32:	ea4f 0255 	mov.w	r2, r5, lsr #1
            if (vco_frac >= con_frac)
 8002d36:	f080 80bf 	bcs.w	8002eb8 <R820T2_set_pll+0x280>
        sdm = 0;
 8002d3a:	4604      	mov	r4, r0
            if (vco_frac >= con_frac)
 8002d3c:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
            con_frac = pll_ref >> n_sdm;
 8002d40:	ea4f 0295 	mov.w	r2, r5, lsr #2
            if (vco_frac >= con_frac)
 8002d44:	d303      	bcc.n	8002d4e <R820T2_set_pll+0x116>
            {
                sdm |= (uint16_t) (0x8000 >> n_sdm);
                vco_frac -= con_frac;
                if (vco_frac == 0)
 8002d46:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002d48:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
                if (vco_frac == 0)
 8002d4c:	d079      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002d4e:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
            con_frac = pll_ref >> n_sdm;
 8002d52:	ea4f 02d5 	mov.w	r2, r5, lsr #3
            if (vco_frac >= con_frac)
 8002d56:	d303      	bcc.n	8002d60 <R820T2_set_pll+0x128>
                if (vco_frac == 0)
 8002d58:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002d5a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
                if (vco_frac == 0)
 8002d5e:	d070      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002d60:	ebb3 1f15 	cmp.w	r3, r5, lsr #4
            con_frac = pll_ref >> n_sdm;
 8002d64:	ea4f 1215 	mov.w	r2, r5, lsr #4
            if (vco_frac >= con_frac)
 8002d68:	d303      	bcc.n	8002d72 <R820T2_set_pll+0x13a>
                if (vco_frac == 0)
 8002d6a:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002d6c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
                if (vco_frac == 0)
 8002d70:	d067      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002d72:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
            con_frac = pll_ref >> n_sdm;
 8002d76:	ea4f 1255 	mov.w	r2, r5, lsr #5
            if (vco_frac >= con_frac)
 8002d7a:	d303      	bcc.n	8002d84 <R820T2_set_pll+0x14c>
                if (vco_frac == 0)
 8002d7c:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002d7e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
                if (vco_frac == 0)
 8002d82:	d05e      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002d84:	ebb3 1f95 	cmp.w	r3, r5, lsr #6
            con_frac = pll_ref >> n_sdm;
 8002d88:	ea4f 1295 	mov.w	r2, r5, lsr #6
            if (vco_frac >= con_frac)
 8002d8c:	d303      	bcc.n	8002d96 <R820T2_set_pll+0x15e>
                if (vco_frac == 0)
 8002d8e:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002d90:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
                if (vco_frac == 0)
 8002d94:	d055      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002d96:	ebb3 1fd5 	cmp.w	r3, r5, lsr #7
            con_frac = pll_ref >> n_sdm;
 8002d9a:	ea4f 12d5 	mov.w	r2, r5, lsr #7
            if (vco_frac >= con_frac)
 8002d9e:	d303      	bcc.n	8002da8 <R820T2_set_pll+0x170>
                if (vco_frac == 0)
 8002da0:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002da2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
                if (vco_frac == 0)
 8002da6:	d04c      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002da8:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
            con_frac = pll_ref >> n_sdm;
 8002dac:	ea4f 2215 	mov.w	r2, r5, lsr #8
            if (vco_frac >= con_frac)
 8002db0:	d303      	bcc.n	8002dba <R820T2_set_pll+0x182>
                if (vco_frac == 0)
 8002db2:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002db4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
                if (vco_frac == 0)
 8002db8:	d043      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002dba:	ebb3 2f55 	cmp.w	r3, r5, lsr #9
            con_frac = pll_ref >> n_sdm;
 8002dbe:	ea4f 2255 	mov.w	r2, r5, lsr #9
            if (vco_frac >= con_frac)
 8002dc2:	d303      	bcc.n	8002dcc <R820T2_set_pll+0x194>
                if (vco_frac == 0)
 8002dc4:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002dc6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
                if (vco_frac == 0)
 8002dca:	d03a      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002dcc:	ebb3 2f95 	cmp.w	r3, r5, lsr #10
            con_frac = pll_ref >> n_sdm;
 8002dd0:	ea4f 2295 	mov.w	r2, r5, lsr #10
            if (vco_frac >= con_frac)
 8002dd4:	d303      	bcc.n	8002dde <R820T2_set_pll+0x1a6>
                if (vco_frac == 0)
 8002dd6:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002dd8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
                if (vco_frac == 0)
 8002ddc:	d031      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002dde:	ebb3 2fd5 	cmp.w	r3, r5, lsr #11
            con_frac = pll_ref >> n_sdm;
 8002de2:	ea4f 22d5 	mov.w	r2, r5, lsr #11
            if (vco_frac >= con_frac)
 8002de6:	d303      	bcc.n	8002df0 <R820T2_set_pll+0x1b8>
                if (vco_frac == 0)
 8002de8:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002dea:	f044 0420 	orr.w	r4, r4, #32
                if (vco_frac == 0)
 8002dee:	d028      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002df0:	ebb3 3f15 	cmp.w	r3, r5, lsr #12
            con_frac = pll_ref >> n_sdm;
 8002df4:	ea4f 3215 	mov.w	r2, r5, lsr #12
            if (vco_frac >= con_frac)
 8002df8:	d303      	bcc.n	8002e02 <R820T2_set_pll+0x1ca>
                if (vco_frac == 0)
 8002dfa:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002dfc:	f044 0410 	orr.w	r4, r4, #16
                if (vco_frac == 0)
 8002e00:	d01f      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002e02:	ebb3 3f55 	cmp.w	r3, r5, lsr #13
            con_frac = pll_ref >> n_sdm;
 8002e06:	ea4f 3255 	mov.w	r2, r5, lsr #13
            if (vco_frac >= con_frac)
 8002e0a:	d303      	bcc.n	8002e14 <R820T2_set_pll+0x1dc>
                if (vco_frac == 0)
 8002e0c:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002e0e:	f044 0408 	orr.w	r4, r4, #8
                if (vco_frac == 0)
 8002e12:	d016      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002e14:	ebb3 3f95 	cmp.w	r3, r5, lsr #14
            con_frac = pll_ref >> n_sdm;
 8002e18:	ea4f 3295 	mov.w	r2, r5, lsr #14
            if (vco_frac >= con_frac)
 8002e1c:	d303      	bcc.n	8002e26 <R820T2_set_pll+0x1ee>
                if (vco_frac == 0)
 8002e1e:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002e20:	f044 0404 	orr.w	r4, r4, #4
                if (vco_frac == 0)
 8002e24:	d00d      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002e26:	ebb3 3fd5 	cmp.w	r3, r5, lsr #15
            con_frac = pll_ref >> n_sdm;
 8002e2a:	ea4f 32d5 	mov.w	r2, r5, lsr #15
            if (vco_frac >= con_frac)
 8002e2e:	d303      	bcc.n	8002e38 <R820T2_set_pll+0x200>
                if (vco_frac == 0)
 8002e30:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002e32:	f044 0402 	orr.w	r4, r4, #2
                if (vco_frac == 0)
 8002e36:	d004      	beq.n	8002e42 <R820T2_set_pll+0x20a>
            if (vco_frac >= con_frac)
 8002e38:	ebb3 4f15 	cmp.w	r3, r5, lsr #16
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002e3c:	bf28      	it	cs
 8002e3e:	f044 0401 	orrcs.w	r4, r4, #1
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e42:	f640 2759 	movw	r7, #2649	; 0xa59
 8002e46:	2501      	movs	r5, #1
 8002e48:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8002e4c:	f04f 0896 	mov.w	r8, #150	; 0x96
 8002e50:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002e54:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8002e58:	9700      	str	r7, [sp, #0]
 8002e5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e5e:	462b      	mov	r3, r5
 8002e60:	2215      	movs	r2, #21
 8002e62:	2134      	movs	r1, #52	; 0x34
            fprintf(stderr,"Tunning delta: %d Hz", delta);
        }
        */
        
        /* Update Sigma-Delta Modulator */
        R820T2_i2c_write_reg(0x15, (uint8_t)(sdm & 0xff));
 8002e64:	7574      	strb	r4, [r6, #21]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e66:	f003 fbbf 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d140      	bne.n	8002ef0 <R820T2_set_pll+0x2b8>
 8002e6e:	197b      	adds	r3, r7, r5
 8002e70:	f640 10e8 	movw	r0, #2536	; 0x9e8
        R820T2_i2c_write_reg(0x16, (uint8_t)(sdm >> 8));
 8002e74:	0a24      	lsrs	r4, r4, #8
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e82:	2216      	movs	r2, #22
 8002e84:	2134      	movs	r1, #52	; 0x34
        R820T2_i2c_write_reg(0x16, (uint8_t)(sdm >> 8));
 8002e86:	75b4      	strb	r4, [r6, #22]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e88:	f003 fbae 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002e8c:	bb80      	cbnz	r0, 8002ef0 <R820T2_set_pll+0x2b8>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002e8e:	7cb0      	ldrb	r0, [r6, #18]
 8002e90:	f020 0008 	bic.w	r0, r0, #8
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e94:	3f03      	subs	r7, #3
    r820t_regs[reg] = data;
 8002e96:	74b0      	strb	r0, [r6, #18]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002e98:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002e9c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8002ea0:	9700      	str	r7, [sp, #0]
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	2212      	movs	r2, #18
 8002ea6:	2134      	movs	r1, #52	; 0x34
 8002ea8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002eac:	f003 fb9c 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002eb0:	b9f0      	cbnz	r0, 8002ef0 <R820T2_set_pll+0x2b8>

        /* Enable frac pll */
        R820T2_i2c_write_cache_mask(0x12, 0x00, 0x08);
    }
}
 8002eb2:	b005      	add	sp, #20
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (vco_frac == 0)
 8002eb8:	1a9b      	subs	r3, r3, r2
                sdm |= (uint16_t) (0x8000 >> n_sdm);
 8002eba:	f44f 4400 	mov.w	r4, #32768	; 0x8000
                if (vco_frac == 0)
 8002ebe:	f47f af3d 	bne.w	8002d3c <R820T2_set_pll+0x104>
 8002ec2:	e7be      	b.n	8002e42 <R820T2_set_pll+0x20a>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002ec4:	7cb3      	ldrb	r3, [r6, #18]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002ec6:	f8cd 8008 	str.w	r8, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002eca:	f023 0308 	bic.w	r3, r3, #8
 8002ece:	f043 0308 	orr.w	r3, r3, #8
    r820t_regs[reg] = data;
 8002ed2:	f806 3f12 	strb.w	r3, [r6, #18]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002ed6:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002eda:	e9cd 6900 	strd	r6, r9, [sp]
 8002ede:	464b      	mov	r3, r9
 8002ee0:	2212      	movs	r2, #18
 8002ee2:	2134      	movs	r1, #52	; 0x34
 8002ee4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ee8:	f003 fb7e 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d0e0      	beq.n	8002eb2 <R820T2_set_pll+0x27a>
    	R820T2_TIMEOUT_UserCallback();
 8002ef0:	f7ff fe48 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>
    for (div_num = 0; div_num < 5; div_num++)
 8002ef4:	2200      	movs	r2, #0
    R820T2_i2c_write_cache_mask(0x10, (uint8_t) (div_num << 5), 0xe0);
 8002ef6:	0153      	lsls	r3, r2, #5
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	e6d4      	b.n	8002ca6 <R820T2_set_pll+0x6e>
        vco_exact = freq << (div_num + 1);
 8002efc:	2201      	movs	r2, #1
 8002efe:	e7fa      	b.n	8002ef6 <R820T2_set_pll+0x2be>
 8002f00:	2202      	movs	r2, #2
 8002f02:	e7f8      	b.n	8002ef6 <R820T2_set_pll+0x2be>
 8002f04:	2203      	movs	r2, #3
 8002f06:	e7f6      	b.n	8002ef6 <R820T2_set_pll+0x2be>
 8002f08:	2204      	movs	r2, #4
 8002f0a:	e7f4      	b.n	8002ef6 <R820T2_set_pll+0x2be>

08002f0c <R820T2_set_freq>:

/*
 * Update Tracking Filter and LO to frequency
 */
void R820T2_set_freq(uint32_t freq)
{
 8002f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t lo_freq = freq + r820t_if_freq;
 8002f10:	f640 2340 	movw	r3, #2624	; 0xa40
 8002f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f18:	f64e 686c 	movw	r8, #61036	; 0xee6c
 8002f1c:	681f      	ldr	r7, [r3, #0]
{
 8002f1e:	4606      	mov	r6, r0
 8002f20:	f6c0 0800 	movt	r8, #2048	; 0x800
    freq = (uint32_t)((uint64_t)freq * 4295 >> 32); // fast approach
 8002f24:	f241 00c7 	movw	r0, #4295	; 0x10c7
 8002f28:	fba6 3000 	umull	r3, r0, r6, r0
{
 8002f2c:	b084      	sub	sp, #16
  uint32_t lo_freq = freq + r820t_if_freq;
 8002f2e:	4437      	add	r7, r6
    for(i=0;i<ARRAY_SIZE(freq_ranges)-1;i++)
 8002f30:	4643      	mov	r3, r8
 8002f32:	2400      	movs	r4, #0
 8002f34:	e004      	b.n	8002f40 <R820T2_set_freq+0x34>
 8002f36:	2c14      	cmp	r4, #20
 8002f38:	f103 0306 	add.w	r3, r3, #6
 8002f3c:	f000 809e 	beq.w	800307c <R820T2_set_freq+0x170>
        if (freq < freq_ranges[i + 1].freq)
 8002f40:	88da      	ldrh	r2, [r3, #6]
 8002f42:	4290      	cmp	r0, r2
 8002f44:	4621      	mov	r1, r4
 8002f46:	f104 0401 	add.w	r4, r4, #1
 8002f4a:	d2f4      	bcs.n	8002f36 <R820T2_set_freq+0x2a>
    R820T2_i2c_write_cache_mask(0x17, range->open_d, 0x08);
 8002f4c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002f50:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002f54:	460c      	mov	r4, r1
 8002f56:	789b      	ldrb	r3, [r3, #2]
 8002f58:	f003 0308 	and.w	r3, r3, #8
    r820t_regs[reg] = data;
 8002f5c:	f640 2544 	movw	r5, #2628	; 0xa44
 8002f60:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002f64:	462a      	mov	r2, r5
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002f66:	7de9      	ldrb	r1, [r5, #23]
 8002f68:	f021 0108 	bic.w	r1, r1, #8
 8002f6c:	430b      	orrs	r3, r1
    r820t_regs[reg] = data;
 8002f6e:	f802 3f17 	strb.w	r3, [r2, #23]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002f72:	f04f 0a01 	mov.w	sl, #1
 8002f76:	f04f 0996 	mov.w	r9, #150	; 0x96
 8002f7a:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002f7e:	9200      	str	r2, [sp, #0]
 8002f80:	e9cd a901 	strd	sl, r9, [sp, #4]
 8002f84:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f88:	4653      	mov	r3, sl
 8002f8a:	2217      	movs	r2, #23
 8002f8c:	2134      	movs	r1, #52	; 0x34
 8002f8e:	f003 fb2b 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d174      	bne.n	8003080 <R820T2_set_freq+0x174>
    R820T2_i2c_write_cache_mask(0x1a, range->rf_mux_ploy, 0xc3);
 8002f96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002f9a:	7eab      	ldrb	r3, [r5, #26]
    R820T2_i2c_write_cache_mask(0x1a, range->rf_mux_ploy, 0xc3);
 8002f9c:	eb08 0444 	add.w	r4, r8, r4, lsl #1
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002fa0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002fa4:	78e3      	ldrb	r3, [r4, #3]
 8002fa6:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8002faa:	4313      	orrs	r3, r2
    r820t_regs[reg] = data;
 8002fac:	462a      	mov	r2, r5
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002fae:	e9cd a901 	strd	sl, r9, [sp, #4]
    r820t_regs[reg] = data;
 8002fb2:	f802 3f1a 	strb.w	r3, [r2, #26]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002fb6:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fc0:	4653      	mov	r3, sl
 8002fc2:	221a      	movs	r2, #26
 8002fc4:	2134      	movs	r1, #52	; 0x34
 8002fc6:	f003 fb0f 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d158      	bne.n	8003080 <R820T2_set_freq+0x174>
    r820t_regs[reg] = data;
 8002fce:	462b      	mov	r3, r5
 8002fd0:	7922      	ldrb	r2, [r4, #4]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002fd2:	e9cd a901 	strd	sl, r9, [sp, #4]
    r820t_regs[reg] = data;
 8002fd6:	f803 2f1b 	strb.w	r2, [r3, #27]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002fda:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fe4:	4653      	mov	r3, sl
 8002fe6:	221b      	movs	r2, #27
 8002fe8:	2134      	movs	r1, #52	; 0x34
 8002fea:	f003 fafd 	bl	80065e8 <HAL_I2C_Mem_Write>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d146      	bne.n	8003080 <R820T2_set_freq+0x174>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002ff2:	7c2b      	ldrb	r3, [r5, #16]
    r820t_regs[reg] = data;
 8002ff4:	462a      	mov	r2, r5
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8002ff6:	f023 030b 	bic.w	r3, r3, #11
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8002ffe:	e9cd a901 	strd	sl, r9, [sp, #4]
    r820t_regs[reg] = data;
 8003002:	f802 3f10 	strb.w	r3, [r2, #16]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003006:	f640 10e8 	movw	r0, #2536	; 0x9e8
 800300a:	9200      	str	r2, [sp, #0]
 800300c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003010:	4653      	mov	r3, sl
 8003012:	2210      	movs	r2, #16
 8003014:	2134      	movs	r1, #52	; 0x34
 8003016:	f003 fae7 	bl	80065e8 <HAL_I2C_Mem_Write>
 800301a:	bb88      	cbnz	r0, 8003080 <R820T2_set_freq+0x174>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 800301c:	7a2a      	ldrb	r2, [r5, #8]
    r820t_regs[reg] = data;
 800301e:	462b      	mov	r3, r5
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003020:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003024:	e9cd a901 	strd	sl, r9, [sp, #4]
    r820t_regs[reg] = data;
 8003028:	f803 2f08 	strb.w	r2, [r3, #8]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800302c:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003036:	4653      	mov	r3, sl
 8003038:	2208      	movs	r2, #8
 800303a:	2134      	movs	r1, #52	; 0x34
 800303c:	f003 fad4 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003040:	b9f0      	cbnz	r0, 8003080 <R820T2_set_freq+0x174>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003042:	7a6a      	ldrb	r2, [r5, #9]
 8003044:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    r820t_regs[reg] = data;
 8003048:	f805 2f09 	strb.w	r2, [r5, #9]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800304c:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003050:	e9cd a901 	strd	sl, r9, [sp, #4]
 8003054:	4653      	mov	r3, sl
 8003056:	2209      	movs	r2, #9
 8003058:	9500      	str	r5, [sp, #0]
 800305a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800305e:	2134      	movs	r1, #52	; 0x34
 8003060:	f003 fac2 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003064:	b960      	cbnz	r0, 8003080 <R820T2_set_freq+0x174>

  R820T2_set_tf(freq);
  R820T2_set_pll(lo_freq);
 8003066:	4638      	mov	r0, r7
 8003068:	f7ff fde6 	bl	8002c38 <R820T2_set_pll>
  r820t_freq = freq;
 800306c:	f640 233c 	movw	r3, #2620	; 0xa3c
 8003070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003074:	601e      	str	r6, [r3, #0]
}
 8003076:	b004      	add	sp, #16
 8003078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307c:	2300      	movs	r3, #0
 800307e:	e76d      	b.n	8002f5c <R820T2_set_freq+0x50>
    	R820T2_TIMEOUT_UserCallback();
 8003080:	f7ff fd80 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

08003084 <R820T2_set_lna_gain>:

/*
 * Update LNA Gain
 */
void R820T2_set_lna_gain(uint8_t gain_index)
{
 8003084:	b500      	push	{lr}
    r820t_regs[reg] = data;
 8003086:	f640 2344 	movw	r3, #2628	; 0xa44
 800308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800308e:	461a      	mov	r2, r3
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003090:	7959      	ldrb	r1, [r3, #5]
 8003092:	f000 000f 	and.w	r0, r0, #15
 8003096:	f021 030f 	bic.w	r3, r1, #15
 800309a:	4303      	orrs	r3, r0
    r820t_regs[reg] = data;
 800309c:	f802 3f05 	strb.w	r3, [r2, #5]!
{
 80030a0:	b085      	sub	sp, #20
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80030a2:	2196      	movs	r1, #150	; 0x96
 80030a4:	2301      	movs	r3, #1
 80030a6:	f640 10e8 	movw	r0, #2536	; 0x9e8
 80030aa:	e9cd 2300 	strd	r2, r3, [sp]
 80030ae:	9102      	str	r1, [sp, #8]
 80030b0:	2205      	movs	r2, #5
 80030b2:	2134      	movs	r1, #52	; 0x34
 80030b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030b8:	f003 fa96 	bl	80065e8 <HAL_I2C_Mem_Write>
 80030bc:	b910      	cbnz	r0, 80030c4 <R820T2_set_lna_gain+0x40>
  R820T2_i2c_write_cache_mask(0x05, gain_index, 0x0f);
}
 80030be:	b005      	add	sp, #20
 80030c0:	f85d fb04 	ldr.w	pc, [sp], #4
    	R820T2_TIMEOUT_UserCallback();
 80030c4:	f7ff fd5e 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

080030c8 <R820T2_set_mixer_gain>:

/*
 * Update Mixer Gain
 */
void R820T2_set_mixer_gain(uint8_t gain_index)
{
 80030c8:	b500      	push	{lr}
    r820t_regs[reg] = data;
 80030ca:	f640 2344 	movw	r3, #2628	; 0xa44
 80030ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030d2:	461a      	mov	r2, r3
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80030d4:	79d9      	ldrb	r1, [r3, #7]
 80030d6:	f000 000f 	and.w	r0, r0, #15
 80030da:	f021 030f 	bic.w	r3, r1, #15
 80030de:	4303      	orrs	r3, r0
    r820t_regs[reg] = data;
 80030e0:	f802 3f07 	strb.w	r3, [r2, #7]!
{
 80030e4:	b085      	sub	sp, #20
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80030e6:	2196      	movs	r1, #150	; 0x96
 80030e8:	2301      	movs	r3, #1
 80030ea:	f640 10e8 	movw	r0, #2536	; 0x9e8
 80030ee:	e9cd 2300 	strd	r2, r3, [sp]
 80030f2:	9102      	str	r1, [sp, #8]
 80030f4:	2207      	movs	r2, #7
 80030f6:	2134      	movs	r1, #52	; 0x34
 80030f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030fc:	f003 fa74 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003100:	b910      	cbnz	r0, 8003108 <R820T2_set_mixer_gain+0x40>
  R820T2_i2c_write_cache_mask(0x07, gain_index, 0x0f);
}
 8003102:	b005      	add	sp, #20
 8003104:	f85d fb04 	ldr.w	pc, [sp], #4
    	R820T2_TIMEOUT_UserCallback();
 8003108:	f7ff fd3c 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

0800310c <R820T2_set_vga_gain_VAGC_pin>:
 * 1...49.3 dB
 * ~0.1 dB steps
 */
void R820T2_set_vga_gain_VAGC_pin(float gain_dB)
{
  int16_t index_value = A_TIM_CCR_reg_scale*gain_dB + B_TIM_CCR_reg_scale;
 800310c:	f245 43ce 	movw	r3, #21710	; 0x54ce
 8003110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003114:	f2c4 1320 	movt	r3, #16672	; 0x4120
 8003118:	ee30 0a67 	vsub.f32	s0, s0, s15
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	ee20 0a27 	vmul.f32	s0, s0, s15
  if (index_value < 0) index_value = 0;
  if (index_value > N_TIM_CCR_lookup_table-1) index_value = N_TIM_CCR_lookup_table;
  TIM4->CCR2 = TIM_CCR_reg_lookup_table[index_value];
 8003124:	f64e 2290 	movw	r2, #60048	; 0xea90
  int16_t index_value = A_TIM_CCR_reg_scale*gain_dB + B_TIM_CCR_reg_scale;
 8003128:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  TIM4->CCR2 = TIM_CCR_reg_lookup_table[index_value];
 800312c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003130:	ee10 3a10 	vmov	r3, s0
 8003134:	b21b      	sxth	r3, r3
 8003136:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800313a:	bfa8      	it	ge
 800313c:	f44f 73f2 	movge.w	r3, #484	; 0x1e4
 8003140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003148:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800314c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003150:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003152:	4770      	bx	lr

08003154 <R820T2_config_VAGC_pin>:
 * Enable/Disable VAGC pin
 * value=0 -> Disable VAGC pin
 * value=1 -> Enable VAGC pin
 */
void R820T2_config_VAGC_pin(uint8_t value)
{
 8003154:	b500      	push	{lr}
    r820t_regs[reg] = data;
 8003156:	f640 2244 	movw	r2, #2628	; 0xa44
  if (value == 0)
	  value = 0x40;
  else
	  value = 0x50;
 800315a:	2800      	cmp	r0, #0
    r820t_regs[reg] = data;
 800315c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	  value = 0x50;
 8003160:	bf0c      	ite	eq
 8003162:	2340      	moveq	r3, #64	; 0x40
 8003164:	2350      	movne	r3, #80	; 0x50
    r820t_regs[reg] = data;
 8003166:	f802 3f0c 	strb.w	r3, [r2, #12]!
{
 800316a:	b085      	sub	sp, #20
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800316c:	2196      	movs	r1, #150	; 0x96
 800316e:	2301      	movs	r3, #1
 8003170:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003174:	e9cd 2300 	strd	r2, r3, [sp]
 8003178:	9102      	str	r1, [sp, #8]
 800317a:	220c      	movs	r2, #12
 800317c:	2134      	movs	r1, #52	; 0x34
 800317e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003182:	f003 fa31 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003186:	b910      	cbnz	r0, 800318e <R820T2_config_VAGC_pin+0x3a>
  R820T2_i2c_write_cache_mask(0x0C, value, 0xFF);
}
 8003188:	b005      	add	sp, #20
 800318a:	f85d fb04 	ldr.w	pc, [sp], #4
    	R820T2_TIMEOUT_UserCallback();
 800318e:	f7ff fcf9 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>
 8003192:	bf00      	nop

08003194 <R820T2_set_lna_agc>:

/*
 * Enable/Disable LNA AGC
 */
void R820T2_set_lna_agc(uint8_t value)
{
 8003194:	b500      	push	{lr}
    r820t_regs[reg] = data;
 8003196:	f640 2344 	movw	r3, #2628	; 0xa44
 800319a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  value = value != 0 ? 0x00 : 0x10;
 800319e:	2800      	cmp	r0, #0
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031a0:	7959      	ldrb	r1, [r3, #5]
    r820t_regs[reg] = data;
 80031a2:	461a      	mov	r2, r3
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031a4:	f021 0110 	bic.w	r1, r1, #16
  value = value != 0 ? 0x00 : 0x10;
 80031a8:	bf14      	ite	ne
 80031aa:	2300      	movne	r3, #0
 80031ac:	2310      	moveq	r3, #16
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031ae:	430b      	orrs	r3, r1
    r820t_regs[reg] = data;
 80031b0:	f802 3f05 	strb.w	r3, [r2, #5]!
{
 80031b4:	b085      	sub	sp, #20
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80031b6:	2196      	movs	r1, #150	; 0x96
 80031b8:	2301      	movs	r3, #1
 80031ba:	f640 10e8 	movw	r0, #2536	; 0x9e8
 80031be:	e9cd 2300 	strd	r2, r3, [sp]
 80031c2:	9102      	str	r1, [sp, #8]
 80031c4:	2205      	movs	r2, #5
 80031c6:	2134      	movs	r1, #52	; 0x34
 80031c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80031cc:	f003 fa0c 	bl	80065e8 <HAL_I2C_Mem_Write>
 80031d0:	b910      	cbnz	r0, 80031d8 <R820T2_set_lna_agc+0x44>
  R820T2_i2c_write_cache_mask(0x05, value, 0x10);
}
 80031d2:	b005      	add	sp, #20
 80031d4:	f85d fb04 	ldr.w	pc, [sp], #4
    	R820T2_TIMEOUT_UserCallback();
 80031d8:	f7ff fcd4 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

080031dc <R820T2_set_mixer_agc>:

/*
 * Enable/Disable Mixer AGC
 */
void R820T2_set_mixer_agc(uint8_t value)
{
 80031dc:	b500      	push	{lr}
    r820t_regs[reg] = data;
 80031de:	f640 2344 	movw	r3, #2628	; 0xa44
 80031e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  value = value != 0 ? 0x10 : 0x00;
 80031e6:	2800      	cmp	r0, #0
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031e8:	79d9      	ldrb	r1, [r3, #7]
    r820t_regs[reg] = data;
 80031ea:	461a      	mov	r2, r3
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031ec:	f021 0110 	bic.w	r1, r1, #16
  value = value != 0 ? 0x10 : 0x00;
 80031f0:	bf14      	ite	ne
 80031f2:	2310      	movne	r3, #16
 80031f4:	2300      	moveq	r3, #0
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80031f6:	430b      	orrs	r3, r1
    r820t_regs[reg] = data;
 80031f8:	f802 3f07 	strb.w	r3, [r2, #7]!
{
 80031fc:	b085      	sub	sp, #20
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80031fe:	2196      	movs	r1, #150	; 0x96
 8003200:	2301      	movs	r3, #1
 8003202:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003206:	e9cd 2300 	strd	r2, r3, [sp]
 800320a:	9102      	str	r1, [sp, #8]
 800320c:	2207      	movs	r2, #7
 800320e:	2134      	movs	r1, #52	; 0x34
 8003210:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003214:	f003 f9e8 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003218:	b910      	cbnz	r0, 8003220 <R820T2_set_mixer_agc+0x44>
  R820T2_i2c_write_cache_mask(0x07, value, 0x10);
}
 800321a:	b005      	add	sp, #20
 800321c:	f85d fb04 	ldr.w	pc, [sp], #4
    	R820T2_TIMEOUT_UserCallback();
 8003220:	f7ff fcb0 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

08003224 <R820T2_set_if_bandwidth>:
 * Set IF Bandwidth - doesn't work properly
 * bw=15 -> widest
 * bw=0  -> narrowest
 */
void R820T2_set_if_bandwidth(uint8_t bw)
{
 8003224:	b570      	push	{r4, r5, r6, lr}
    r820t_regs[reg] = data;
 8003226:	f640 2444 	movw	r4, #2628	; 0xa44
    const uint8_t modes[] = { 0xE0, 0x80, 0x60, 0x00 };
    uint8_t a = 0xB0 | (0x0F-(bw & 0x0F));
 800322a:	43c0      	mvns	r0, r0
    r820t_regs[reg] = data;
 800322c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003230:	4623      	mov	r3, r4
    uint8_t a = 0xB0 | (0x0F-(bw & 0x0F));
 8003232:	f000 000f 	and.w	r0, r0, #15
 8003236:	f060 004f 	orn	r0, r0, #79	; 0x4f
    r820t_regs[reg] = data;
 800323a:	f803 0f0a 	strb.w	r0, [r3, #10]!
{
 800323e:	b084      	sub	sp, #16
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003240:	2501      	movs	r5, #1
 8003242:	2696      	movs	r6, #150	; 0x96
 8003244:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800324e:	462b      	mov	r3, r5
 8003250:	220a      	movs	r2, #10
 8003252:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003256:	2134      	movs	r1, #52	; 0x34
 8003258:	f003 f9c6 	bl	80065e8 <HAL_I2C_Mem_Write>
 800325c:	b988      	cbnz	r0, 8003282 <R820T2_set_if_bandwidth+0x5e>
    r820t_regs[reg] = data;
 800325e:	23ef      	movs	r3, #239	; 0xef
 8003260:	f804 3f0b 	strb.w	r3, [r4, #11]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003264:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8003268:	e9cd 4500 	strd	r4, r5, [sp]
 800326c:	9602      	str	r6, [sp, #8]
 800326e:	462b      	mov	r3, r5
 8003270:	220b      	movs	r2, #11
 8003272:	2134      	movs	r1, #52	; 0x34
 8003274:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003278:	f003 f9b6 	bl	80065e8 <HAL_I2C_Mem_Write>
 800327c:	b908      	cbnz	r0, 8003282 <R820T2_set_if_bandwidth+0x5e>
    uint8_t b = 0x0F | modes[(bw & 0x3) >> 4];
    R820T2_i2c_write_reg(0x0A, a);
    R820T2_i2c_write_reg(0x0B, b);
}
 800327e:	b004      	add	sp, #16
 8003280:	bd70      	pop	{r4, r5, r6, pc}
    	R820T2_TIMEOUT_UserCallback();
 8003282:	f7ff fc7f 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>
 8003286:	bf00      	nop

08003288 <R820T2_calibrate>:
 * "inspired by Mauro Carvalho Chehab calibration technique"
 * https://stuff.mit.edu/afs/sipb/contrib/linux/drivers/media/tuners/r820t.c
 * part of r820t_set_tv_standard()
 */
int32_t R820T2_calibrate(void)
{
 8003288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	f640 2444 	movw	r4, #2628	; 0xa44
 8003290:	f2c2 0400 	movt	r4, #8192	; 0x2000
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003294:	f640 16e8 	movw	r6, #2536	; 0x9e8
{
 8003298:	b085      	sub	sp, #20
 800329a:	f04f 0805 	mov.w	r8, #5
 800329e:	f104 070b 	add.w	r7, r4, #11
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80032a6:	f104 090f 	add.w	r9, r4, #15
 80032aa:	f104 0a10 	add.w	sl, r4, #16
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80032ae:	7ae0      	ldrb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032b0:	9700      	str	r7, [sp, #0]
 80032b2:	2501      	movs	r5, #1
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80032b4:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032b8:	f04f 0b96 	mov.w	fp, #150	; 0x96
    r820t_regs[reg] = data;
 80032bc:	72e0      	strb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032be:	e9cd 5b01 	strd	r5, fp, [sp, #4]
 80032c2:	462b      	mov	r3, r5
 80032c4:	220b      	movs	r2, #11
 80032c6:	2134      	movs	r1, #52	; 0x34
 80032c8:	4630      	mov	r0, r6
 80032ca:	f003 f98d 	bl	80065e8 <HAL_I2C_Mem_Write>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f040 80b2 	bne.w	8003438 <R820T2_calibrate+0x1b0>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80032d4:	7be0      	ldrb	r0, [r4, #15]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032d6:	f8cd b008 	str.w	fp, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80032da:	f020 0004 	bic.w	r0, r0, #4
 80032de:	f040 0004 	orr.w	r0, r0, #4
    r820t_regs[reg] = data;
 80032e2:	73e0      	strb	r0, [r4, #15]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032e4:	e9cd 9500 	strd	r9, r5, [sp]
 80032e8:	462b      	mov	r3, r5
 80032ea:	220f      	movs	r2, #15
 80032ec:	2134      	movs	r1, #52	; 0x34
 80032ee:	4630      	mov	r0, r6
 80032f0:	f003 f97a 	bl	80065e8 <HAL_I2C_Mem_Write>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	f040 809f 	bne.w	8003438 <R820T2_calibrate+0x1b0>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 80032fa:	7c20      	ldrb	r0, [r4, #16]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 80032fc:	f8cd b008 	str.w	fp, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003300:	f020 0003 	bic.w	r0, r0, #3
    r820t_regs[reg] = data;
 8003304:	7420      	strb	r0, [r4, #16]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003306:	e9cd a500 	strd	sl, r5, [sp]
 800330a:	462b      	mov	r3, r5
 800330c:	2210      	movs	r2, #16
 800330e:	2134      	movs	r1, #52	; 0x34
 8003310:	4630      	mov	r0, r6
 8003312:	f003 f969 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003316:	2800      	cmp	r0, #0
 8003318:	f040 808e 	bne.w	8003438 <R820T2_calibrate+0x1b0>

    /* X'tal cap 0pF for PLL */
    R820T2_i2c_write_cache_mask(0x10, 0x00, 0x03);

    /* freq used for calibration */
    R820T2_set_pll(CALIBRATION_LO * 1000);
 800331c:	f44f 4046 	mov.w	r0, #50688	; 0xc600
 8003320:	f2c0 503e 	movt	r0, #1342	; 0x53e
 8003324:	f7ff fc88 	bl	8002c38 <R820T2_set_pll>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003328:	7ae0      	ldrb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800332a:	f8cd b008 	str.w	fp, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 800332e:	f020 0010 	bic.w	r0, r0, #16
 8003332:	f040 0010 	orr.w	r0, r0, #16
    r820t_regs[reg] = data;
 8003336:	72e0      	strb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003338:	e9cd 7500 	strd	r7, r5, [sp]
 800333c:	462b      	mov	r3, r5
 800333e:	220b      	movs	r2, #11
 8003340:	2134      	movs	r1, #52	; 0x34
 8003342:	4630      	mov	r0, r6
 8003344:	f003 f950 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003348:	2800      	cmp	r0, #0
 800334a:	d175      	bne.n	8003438 <R820T2_calibrate+0x1b0>

    /* Start Trigger */
    R820T2_i2c_write_cache_mask(0x0b, 0x10, 0x10);

    HAL_Delay(2);
 800334c:	2002      	movs	r0, #2
 800334e:	f001 fcad 	bl	8004cac <HAL_Delay>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003352:	7ae0      	ldrb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003354:	f8cd b008 	str.w	fp, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003358:	f020 0010 	bic.w	r0, r0, #16
    r820t_regs[reg] = data;
 800335c:	72e0      	strb	r0, [r4, #11]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800335e:	e9cd 7500 	strd	r7, r5, [sp]
 8003362:	462b      	mov	r3, r5
 8003364:	220b      	movs	r2, #11
 8003366:	2134      	movs	r1, #52	; 0x34
 8003368:	4630      	mov	r0, r6
 800336a:	f003 f93d 	bl	80065e8 <HAL_I2C_Mem_Write>
 800336e:	2800      	cmp	r0, #0
 8003370:	d162      	bne.n	8003438 <R820T2_calibrate+0x1b0>
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 8003372:	f894 c00f 	ldrb.w	ip, [r4, #15]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003376:	f8cd b008 	str.w	fp, [sp, #8]
    data = (data & mask) | (r820t_regs[reg] & ~mask);
 800337a:	f02c 0c04 	bic.w	ip, ip, #4
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800337e:	e9cd 9500 	strd	r9, r5, [sp]
 8003382:	462b      	mov	r3, r5
 8003384:	220f      	movs	r2, #15
 8003386:	2134      	movs	r1, #52	; 0x34
 8003388:	4630      	mov	r0, r6
    r820t_regs[reg] = data;
 800338a:	f884 c00f 	strb.w	ip, [r4, #15]
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800338e:	f003 f92b 	bl	80065e8 <HAL_I2C_Mem_Write>
 8003392:	2800      	cmp	r0, #0
 8003394:	d150      	bne.n	8003438 <R820T2_calibrate+0x1b0>
	if (HAL_I2C_Master_Receive(&hi2cx, R820T2_I2C_ADDRESS, data, sz, 150) != HAL_OK)
 8003396:	f640 2244 	movw	r2, #2628	; 0xa44
 800339a:	f8cd b000 	str.w	fp, [sp]
 800339e:	2305      	movs	r3, #5
 80033a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80033a4:	2134      	movs	r1, #52	; 0x34
 80033a6:	4630      	mov	r0, r6
 80033a8:	f002 feb0 	bl	800610c <HAL_I2C_Master_Receive>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d143      	bne.n	8003438 <R820T2_calibrate+0x1b0>
		value = *data;
 80033b0:	7825      	ldrb	r5, [r4, #0]
 80033b2:	7861      	ldrb	r1, [r4, #1]
 80033b4:	78a2      	ldrb	r2, [r4, #2]
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 80033b6:	f64e 635c 	movw	r3, #61020	; 0xee5c
 80033ba:	f6c0 0300 	movt	r3, #2048	; 0x800
 80033be:	f005 0c0f 	and.w	ip, r5, #15
 80033c2:	092d      	lsrs	r5, r5, #4
 80033c4:	f813 c00c 	ldrb.w	ip, [r3, ip]
 80033c8:	5d5d      	ldrb	r5, [r3, r5]
 80033ca:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
 80033ce:	f001 0c0f 	and.w	ip, r1, #15
 80033d2:	0909      	lsrs	r1, r1, #4
 80033d4:	f813 e00c 	ldrb.w	lr, [r3, ip]
 80033d8:	f813 c001 	ldrb.w	ip, [r3, r1]
 80033dc:	7025      	strb	r5, [r4, #0]
 80033de:	f002 010f 	and.w	r1, r2, #15
 80033e2:	0912      	lsrs	r2, r2, #4
 80033e4:	5c59      	ldrb	r1, [r3, r1]
 80033e6:	5c9a      	ldrb	r2, [r3, r2]
 80033e8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		value = *data;
 80033ec:	78e1      	ldrb	r1, [r4, #3]
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 80033ee:	70a2      	strb	r2, [r4, #2]
 80033f0:	f001 050f 	and.w	r5, r1, #15
 80033f4:	0909      	lsrs	r1, r1, #4
		value = *data;
 80033f6:	7922      	ldrb	r2, [r4, #4]
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 80033f8:	5d5d      	ldrb	r5, [r3, r5]
 80033fa:	5c59      	ldrb	r1, [r3, r1]
 80033fc:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003400:	f002 050f 	and.w	r5, r2, #15
 8003404:	0912      	lsrs	r2, r2, #4
 8003406:	5d5d      	ldrb	r5, [r3, r5]
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	70e1      	strb	r1, [r4, #3]
 800340c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003410:	b2db      	uxtb	r3, r3
 8003412:	ea4c 1c0e 	orr.w	ip, ip, lr, lsl #4
 8003416:	7123      	strb	r3, [r4, #4]
    /* set cali clk =off */
    R820T2_i2c_write_cache_mask(0x0f, 0x00, 0x04);

    /* Check if calibration worked */
    cal_code = R820T2_i2c_read_reg_uncached(0x04) & 0x0f;
    if (cal_code && cal_code != 0x0f)
 8003418:	f013 030f 	ands.w	r3, r3, #15
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 800341c:	f884 c001 	strb.w	ip, [r4, #1]
    if (cal_code && cal_code != 0x0f)
 8003420:	d001      	beq.n	8003426 <R820T2_calibrate+0x19e>
 8003422:	2b0f      	cmp	r3, #15
 8003424:	d105      	bne.n	8003432 <R820T2_calibrate+0x1aa>
  for (i = 0; i < 5; i++)
 8003426:	f1b8 0801 	subs.w	r8, r8, #1
 800342a:	f47f af40 	bne.w	80032ae <R820T2_calibrate+0x26>
      return 0;
  }

  /* cal failed */
  return -1;
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003432:	b005      	add	sp, #20
 8003434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	R820T2_TIMEOUT_UserCallback();
 8003438:	f7ff fba4 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

0800343c <R820T2_PLL_lock_check>:
		[5:0]	VCO_INDICATOR	VCO band
	 							000000: min (1.75 GHz), 111111: max (3.6 GHz)
------------------------------------------------------------------------------------
*/
int32_t R820T2_PLL_lock_check(void)
{
 800343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003440:	f640 2444 	movw	r4, #2628	; 0xa44
	if (HAL_I2C_Master_Receive(&hi2cx, R820T2_I2C_ADDRESS, data, sz, 150) != HAL_OK)
 8003444:	f640 17e8 	movw	r7, #2536	; 0x9e8
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 8003448:	f64e 655c 	movw	r5, #61020	; 0xee5c
{
 800344c:	b082      	sub	sp, #8
 800344e:	2614      	movs	r6, #20
 8003450:	f2c2 0400 	movt	r4, #8192	; 0x2000
	if (HAL_I2C_Master_Receive(&hi2cx, R820T2_I2C_ADDRESS, data, sz, 150) != HAL_OK)
 8003454:	f2c2 0700 	movt	r7, #8192	; 0x2000
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 8003458:	f6c0 0500 	movt	r5, #2048	; 0x800
 800345c:	e003      	b.n	8003466 <R820T2_PLL_lock_check+0x2a>
	uint8_t reg_R2, i = 20;

	while(i != 0) //20 attempts for PLL lock check
 800345e:	3e01      	subs	r6, #1
 8003460:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8003464:	d02d      	beq.n	80034c2 <R820T2_PLL_lock_check+0x86>
	if (HAL_I2C_Master_Receive(&hi2cx, R820T2_I2C_ADDRESS, data, sz, 150) != HAL_OK)
 8003466:	2396      	movs	r3, #150	; 0x96
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4622      	mov	r2, r4
 800346c:	2303      	movs	r3, #3
 800346e:	2134      	movs	r1, #52	; 0x34
 8003470:	4638      	mov	r0, r7
 8003472:	f002 fe4b 	bl	800610c <HAL_I2C_Master_Receive>
 8003476:	bb48      	cbnz	r0, 80034cc <R820T2_PLL_lock_check+0x90>
		value = *data;
 8003478:	78a2      	ldrb	r2, [r4, #2]
 800347a:	7823      	ldrb	r3, [r4, #0]
 800347c:	7860      	ldrb	r0, [r4, #1]
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 800347e:	0911      	lsrs	r1, r2, #4
 8003480:	f002 080f 	and.w	r8, r2, #15
 8003484:	f003 0e0f 	and.w	lr, r3, #15
 8003488:	091a      	lsrs	r2, r3, #4
 800348a:	f000 0c0f 	and.w	ip, r0, #15
 800348e:	5c6b      	ldrb	r3, [r5, r1]
 8003490:	f815 8008 	ldrb.w	r8, [r5, r8]
 8003494:	5ca9      	ldrb	r1, [r5, r2]
 8003496:	f815 e00e 	ldrb.w	lr, [r5, lr]
 800349a:	f815 c00c 	ldrb.w	ip, [r5, ip]
 800349e:	0900      	lsrs	r0, r0, #4
 80034a0:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 80034a4:	5c2a      	ldrb	r2, [r5, r0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
 80034ac:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 80034b0:	70a3      	strb	r3, [r4, #2]
	{
		reg_R2 = R820T2_i2c_read_reg_uncached(0x02);
		if ( (reg_R2 & 0x40) != 0) return 1; //PLL has locked
 80034b2:	065b      	lsls	r3, r3, #25
		*data++ = (bitrev_lut[value & 0xf] << 4) | bitrev_lut[value >> 4];
 80034b4:	7021      	strb	r1, [r4, #0]
 80034b6:	7062      	strb	r2, [r4, #1]
		if ( (reg_R2 & 0x40) != 0) return 1; //PLL has locked
 80034b8:	d5d1      	bpl.n	800345e <R820T2_PLL_lock_check+0x22>
 80034ba:	2001      	movs	r0, #1
		i--;
	}
	return -1; //PLL has not locked
}
 80034bc:	b002      	add	sp, #8
 80034be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -1; //PLL has not locked
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034c6:	b002      	add	sp, #8
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		R820T2_TIMEOUT_UserCallback();
 80034cc:	f7ff fb5a 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

080034d0 <R820T2_init>:

/*
 * Initialize the R820T
 */
void R820T2_init(I2C_HandleTypeDef i2c_handle)
{
 80034d0:	b084      	sub	sp, #16
 80034d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d6:	b085      	sub	sp, #20
 80034d8:	ac0e      	add	r4, sp, #56	; 0x38
 80034da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hi2cx = i2c_handle;
 80034de:	f640 10e8 	movw	r0, #2536	; 0x9e8
 80034e2:	4621      	mov	r1, r4
 80034e4:	2254      	movs	r2, #84	; 0x54
 80034e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80034ea:	f005 f809 	bl	8008500 <memcpy>
	uint8_t i;

    /* initialize some operating parameters */
    r820t_xtal_freq = XTAL_FREQ; //28.8 MHz
 80034ee:	f640 2264 	movw	r2, #2660	; 0xa64
 80034f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80034f6:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 80034fa:	f2c0 11b7 	movt	r1, #439	; 0x1b7
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
    r820t_freq = 106100000; //106.1 MHz
 80034fe:	f640 2b3c 	movw	fp, #2620	; 0xa3c
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
 8003502:	f640 2340 	movw	r3, #2624	; 0xa40
    r820t_xtal_freq = XTAL_FREQ; //28.8 MHz
 8003506:	6011      	str	r1, [r2, #0]
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
 8003508:	f64e 67f0 	movw	r7, #61168	; 0xeef0
 800350c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    r820t_freq = 106100000; //106.1 MHz
 8003510:	f2c2 0b00 	movt	fp, #8192	; 0x2000
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
 8003514:	f64a 2120 	movw	r1, #43552	; 0xaa20
    r820t_freq = 106100000; //106.1 MHz
 8003518:	f24f 5220 	movw	r2, #62752	; 0xf520
 800351c:	f6c0 0700 	movt	r7, #2048	; 0x800
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
 8003520:	f2c0 0144 	movt	r1, #68	; 0x44
    r820t_freq = 106100000; //106.1 MHz
 8003524:	f2c0 6252 	movt	r2, #1618	; 0x652
 8003528:	f640 2548 	movw	r5, #2632	; 0xa48
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800352c:	f640 16e8 	movw	r6, #2536	; 0x9e8
    r820t_if_freq = 4500000; //4.5 MHz - required for IF amplifier
 8003530:	6019      	str	r1, [r3, #0]
    r820t_freq = 106100000; //106.1 MHz
 8003532:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8003536:	f8cb 2000 	str.w	r2, [fp]
    
    /* initialize the device */
    for(i=R820T2_WRITE_START;i<R820T2_NUM_REGS;i++)
 800353a:	f107 0a1b 	add.w	sl, r7, #27
    r820t_freq = 106100000; //106.1 MHz
 800353e:	463c      	mov	r4, r7
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003540:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8003544:	f04f 0996 	mov.w	r9, #150	; 0x96
 8003548:	f04f 0801 	mov.w	r8, #1
        R820T2_i2c_write_reg(i, r82xx_init_array[i]);
 800354c:	3401      	adds	r4, #1
    r820t_regs[reg] = data;
 800354e:	4622      	mov	r2, r4
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 8003550:	f8cd 9008 	str.w	r9, [sp, #8]
    r820t_regs[reg] = data;
 8003554:	f812 3b04 	ldrb.w	r3, [r2], #4
 8003558:	f805 3f01 	strb.w	r3, [r5, #1]!
    if (HAL_I2C_Mem_Write(&hi2cx, R820T2_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, sz, 150) != HAL_OK)
 800355c:	1bd2      	subs	r2, r2, r7
 800355e:	e9cd 5800 	strd	r5, r8, [sp]
 8003562:	2301      	movs	r3, #1
 8003564:	b292      	uxth	r2, r2
 8003566:	2134      	movs	r1, #52	; 0x34
 8003568:	4630      	mov	r0, r6
 800356a:	f003 f83d 	bl	80065e8 <HAL_I2C_Mem_Write>
 800356e:	b958      	cbnz	r0, 8003588 <R820T2_init+0xb8>
    for(i=R820T2_WRITE_START;i<R820T2_NUM_REGS;i++)
 8003570:	4554      	cmp	r4, sl
 8003572:	d1eb      	bne.n	800354c <R820T2_init+0x7c>

    /* Calibrate */
    R820T2_calibrate();
 8003574:	f7ff fe88 	bl	8003288 <R820T2_calibrate>
    
    /* set freq after calibrate */
    R820T2_set_freq(r820t_freq);
 8003578:	f8db 0000 	ldr.w	r0, [fp]
}
 800357c:	b005      	add	sp, #20
 800357e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003582:	b004      	add	sp, #16
    R820T2_set_freq(r820t_freq);
 8003584:	f7ff bcc2 	b.w	8002f0c <R820T2_set_freq>
    	R820T2_TIMEOUT_UserCallback();
 8003588:	f7ff fafc 	bl	8002b84 <R820T2_TIMEOUT_UserCallback>

0800358c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800358c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003592:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003596:	2100      	movs	r1, #0
 8003598:	9100      	str	r1, [sp, #0]
 800359a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
 80035a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	9101      	str	r1, [sp, #4]
 80035ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c0:	b002      	add	sp, #8
 80035c2:	4770      	bx	lr

080035c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035c4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80035c6:	6802      	ldr	r2, [r0, #0]
 80035c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 80035cc:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 80035ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80035d4:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80035da:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80035de:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80035e0:	d001      	beq.n	80035e6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035e2:	b008      	add	sp, #32
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80035ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035ee:	9400      	str	r4, [sp, #0]
 80035f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003602:	9401      	str	r4, [sp, #4]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4605      	mov	r5, r0
 8003610:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003618:	2204      	movs	r2, #4
 800361a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003620:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA2_Stream0;
 8003622:	f240 665c 	movw	r6, #1628	; 0x65c
 8003626:	f2c2 0600 	movt	r6, #8192	; 0x2000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800362a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	f002 f8c6 	bl	80057c0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8003634:	f246 4310 	movw	r3, #25616	; 0x6410
 8003638:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800363c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003640:	e9c6 3400 	strd	r3, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003644:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800364a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800364e:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003652:	2304      	movs	r3, #4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003654:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003658:	6273      	str	r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800365a:	4630      	mov	r0, r6
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800365c:	2301      	movs	r3, #1
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800365e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003662:	e9c6 2407 	strd	r2, r4, [r6, #28]
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8003666:	e9c6 340a 	strd	r3, r4, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800366a:	6334      	str	r4, [r6, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800366c:	f001 fe82 	bl	8005374 <HAL_DMA_Init>
 8003670:	b918      	cbnz	r0, 800367a <HAL_ADC_MspInit+0xb6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003672:	63ae      	str	r6, [r5, #56]	; 0x38
 8003674:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8003676:	b008      	add	sp, #32
 8003678:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800367a:	f7ff fa65 	bl	8002b48 <Error_Handler>
 800367e:	e7f8      	b.n	8003672 <HAL_ADC_MspInit+0xae>

08003680 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003680:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8003682:	6801      	ldr	r1, [r0, #0]
 8003684:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
{
 8003688:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 800368a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368e:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8003690:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003696:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800369a:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800369c:	d001      	beq.n	80036a2 <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800369e:	b009      	add	sp, #36	; 0x24
 80036a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80036a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80036ae:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80036b2:	6410      	str	r0, [r2, #64]	; 0x40
 80036b4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80036b6:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80036ba:	9000      	str	r0, [sp, #0]
 80036bc:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6313      	str	r3, [r2, #48]	; 0x30
 80036c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ca:	2000      	movs	r0, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036d4:	2430      	movs	r4, #48	; 0x30
 80036d6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f002 f86d 	bl	80057c0 <HAL_GPIO_Init>
}
 80036e6:	b009      	add	sp, #36	; 0x24
 80036e8:	bd30      	pop	{r4, r5, pc}
 80036ea:	bf00      	nop

080036ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036ec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80036ee:	6802      	ldr	r2, [r0, #0]
 80036f0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
{
 80036f4:	b08c      	sub	sp, #48	; 0x30
  if(hi2c->Instance==I2C1)
 80036f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fa:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80036fc:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003702:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003706:	940a      	str	r4, [sp, #40]	; 0x28
  if(hi2c->Instance==I2C1)
 8003708:	d007      	beq.n	800371a <HAL_I2C_MspInit+0x2e>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800370a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800370e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003712:	429a      	cmp	r2, r3
 8003714:	d02b      	beq.n	800376e <HAL_I2C_MspInit+0x82>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003716:	b00c      	add	sp, #48	; 0x30
 8003718:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800371e:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8003722:	9401      	str	r4, [sp, #4]
 8003724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	632b      	str	r3, [r5, #48]	; 0x30
 800372c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003734:	f44f 7210 	mov.w	r2, #576	; 0x240
 8003738:	2312      	movs	r3, #18
 800373a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003748:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374e:	930a      	str	r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003750:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f002 f835 	bl	80057c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003756:	9402      	str	r4, [sp, #8]
 8003758:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800375a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800375e:	642b      	str	r3, [r5, #64]	; 0x40
 8003760:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	9b02      	ldr	r3, [sp, #8]
}
 800376a:	b00c      	add	sp, #48	; 0x30
 800376c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376e:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8003772:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8003776:	9403      	str	r4, [sp, #12]
 8003778:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	632b      	str	r3, [r5, #48]	; 0x30
 8003780:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	9404      	str	r4, [sp, #16]
 800378c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	632b      	str	r3, [r5, #48]	; 0x30
 8003794:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800379c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a0:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037aa:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ac:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ae:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037b6:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b8:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ba:	f002 f801 	bl	80057c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c2:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	2000      	movs	r0, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037cc:	2200      	movs	r2, #0
 80037ce:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037d8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f001 fff1 	bl	80057c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037de:	9405      	str	r4, [sp, #20]
 80037e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80037e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037e6:	642b      	str	r3, [r5, #64]	; 0x40
 80037e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80037ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ee:	9305      	str	r3, [sp, #20]
 80037f0:	9b05      	ldr	r3, [sp, #20]
}
 80037f2:	b00c      	add	sp, #48	; 0x30
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	bf00      	nop

080037f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hi2s->Instance==SPI3)
 80037fc:	6801      	ldr	r1, [r0, #0]
 80037fe:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
{
 8003802:	b08f      	sub	sp, #60	; 0x3c
  if(hi2s->Instance==SPI3)
 8003804:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	2300      	movs	r3, #0
  if(hi2s->Instance==SPI3)
 800380a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003810:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8003814:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003816:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI3)
 8003818:	d002      	beq.n	8003820 <HAL_I2S_MspInit+0x28>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800381a:	b00f      	add	sp, #60	; 0x3c
 800381c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003820:	23c0      	movs	r3, #192	; 0xc0
 8003822:	2201      	movs	r2, #1
 8003824:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003828:	4604      	mov	r4, r0
 800382a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382c:	a804      	add	r0, sp, #16
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800382e:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003830:	f003 fe32 	bl	8007498 <HAL_RCCEx_PeriphCLKConfig>
 8003834:	2800      	cmp	r0, #0
 8003836:	f040 8086 	bne.w	8003946 <HAL_I2S_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800383a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800383e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003842:	2600      	movs	r6, #0
 8003844:	9600      	str	r6, [sp, #0]
 8003846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
 800384e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003850:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003854:	9200      	str	r2, [sp, #0]
 8003856:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003858:	9601      	str	r6, [sp, #4]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	f042 0204 	orr.w	r2, r2, #4
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
 8003862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003864:	f002 0204 	and.w	r2, r2, #4
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	9602      	str	r6, [sp, #8]
 800386e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
 8003876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003878:	f002 0201 	and.w	r2, r2, #1
 800387c:	9202      	str	r2, [sp, #8]
 800387e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003880:	9603      	str	r6, [sp, #12]
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	f042 0202 	orr.w	r2, r2, #2
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8003896:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800389a:	f04f 0800 	mov.w	r8, #0
 800389e:	f04f 0900 	mov.w	r9, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038a2:	2706      	movs	r7, #6
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80038a4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80038aa:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80038ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038b6:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b8:	f001 ff82 	bl	80057c0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	4630      	mov	r0, r6
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80038c8:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038ce:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038d2:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f001 ff74 	bl	80057c0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038dc:	2220      	movs	r2, #32
 80038de:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80038e4:	f240 65bc 	movw	r5, #1724	; 0x6bc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	a908      	add	r1, sp, #32
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80038ea:	f2c2 0500 	movt	r5, #8192	; 0x2000
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038f2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038f6:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f8:	f001 ff62 	bl	80057c0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80038fc:	f246 0388 	movw	r3, #24712	; 0x6088
 8003900:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003904:	2240      	movs	r2, #64	; 0x40
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003906:	e9c5 3600 	strd	r3, r6, [r5]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800390a:	60aa      	str	r2, [r5, #8]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800390c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003914:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003918:	616b      	str	r3, [r5, #20]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800391a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800391e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003922:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003926:	4628      	mov	r0, r5
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003928:	2204      	movs	r2, #4
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800392a:	2303      	movs	r3, #3
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800392c:	e9c5 6208 	strd	r6, r2, [r5, #32]
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003930:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003934:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003936:	f001 fd1d 	bl	8005374 <HAL_DMA_Init>
 800393a:	b938      	cbnz	r0, 800394c <HAL_I2S_MspInit+0x154>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800393c:	63a5      	str	r5, [r4, #56]	; 0x38
 800393e:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8003940:	b00f      	add	sp, #60	; 0x3c
 8003942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8003946:	f7ff f8ff 	bl	8002b48 <Error_Handler>
 800394a:	e776      	b.n	800383a <HAL_I2S_MspInit+0x42>
      Error_Handler();
 800394c:	f7ff f8fc 	bl	8002b48 <Error_Handler>
 8003950:	e7f4      	b.n	800393c <HAL_I2S_MspInit+0x144>
 8003952:	bf00      	nop

08003954 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8003954:	6802      	ldr	r2, [r0, #0]
 8003956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800395e:	429a      	cmp	r2, r3
{
 8003960:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8003962:	d018      	beq.n	8003996 <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8003964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003968:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_MspInit+0x20>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003970:	b002      	add	sp, #8
 8003972:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003974:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003978:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800397c:	2200      	movs	r2, #0
 800397e:	9201      	str	r2, [sp, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	f042 0204 	orr.w	r2, r2, #4
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	9b01      	ldr	r3, [sp, #4]
}
 8003992:	b002      	add	sp, #8
 8003994:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003996:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800399a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800399e:	2200      	movs	r2, #0
 80039a0:	9200      	str	r2, [sp, #0]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a4:	f042 0202 	orr.w	r2, r2, #2
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	9b00      	ldr	r3, [sp, #0]
}
 80039b4:	b002      	add	sp, #8
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039b8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 80039ba:	6801      	ldr	r1, [r0, #0]
 80039bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 80039c0:	b089      	sub	sp, #36	; 0x24
  if(htim->Instance==TIM4)
 80039c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c6:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 80039c8:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80039ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80039d2:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 80039d4:	d001      	beq.n	80039da <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80039d6:	b009      	add	sp, #36	; 0x24
 80039d8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039f8:	2480      	movs	r4, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039fa:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039fc:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	a902      	add	r1, sp, #8
 8003a00:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a04:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a08:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a0a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0c:	f001 fed8 	bl	80057c0 <HAL_GPIO_Init>
}
 8003a10:	b009      	add	sp, #36	; 0x24
 8003a12:	bd30      	pop	{r4, r5, pc}

08003a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a14:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART5)
 8003a16:	6802      	ldr	r2, [r0, #0]
 8003a18:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
{
 8003a1c:	b08b      	sub	sp, #44	; 0x2c
  if(huart->Instance==UART5)
 8003a1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a22:	2400      	movs	r4, #0
  if(huart->Instance==UART5)
 8003a24:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003a2a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003a2e:	9408      	str	r4, [sp, #32]
  if(huart->Instance==UART5)
 8003a30:	d001      	beq.n	8003a36 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003a32:	b00b      	add	sp, #44	; 0x2c
 8003a34:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8003a36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a3e:	9401      	str	r4, [sp, #4]
 8003a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
 8003a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a4e:	9201      	str	r2, [sp, #4]
 8003a50:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a52:	9402      	str	r4, [sp, #8]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	f042 0204 	orr.w	r2, r2, #4
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5e:	f002 0204 	and.w	r2, r2, #4
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a66:	9403      	str	r4, [sp, #12]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a7c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a86:	2508      	movs	r5, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a88:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a8a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a90:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a96:	f001 fe93 	bl	80057c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a9e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aac:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ab0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ab4:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab6:	f001 fe83 	bl	80057c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003aba:	4622      	mov	r2, r4
 8003abc:	4621      	mov	r1, r4
 8003abe:	2035      	movs	r0, #53	; 0x35
 8003ac0:	f001 fb82 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003ac4:	2035      	movs	r0, #53	; 0x35
 8003ac6:	f001 fbbf 	bl	8005248 <HAL_NVIC_EnableIRQ>
}
 8003aca:	b00b      	add	sp, #44	; 0x2c
 8003acc:	bd30      	pop	{r4, r5, pc}
 8003ace:	bf00      	nop

08003ad0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <NMI_Handler>
 8003ad2:	bf00      	nop

08003ad4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <HardFault_Handler>
 8003ad6:	bf00      	nop

08003ad8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <MemManage_Handler>
 8003ada:	bf00      	nop

08003adc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <BusFault_Handler>
 8003ade:	bf00      	nop

08003ae0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <UsageFault_Handler>
 8003ae2:	bf00      	nop

08003ae4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <DebugMon_Handler>:
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <PendSV_Handler>:
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af0:	f001 b8c8 	b.w	8004c84 <HAL_IncTick>

08003af4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003af4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8003af8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003afc:	f001 bd6e 	b.w	80055dc <HAL_DMA_IRQHandler>

08003b00 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b00:	f640 009c 	movw	r0, #2204	; 0x89c
 8003b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003b08:	f004 bb3a 	b.w	8008180 <HAL_UART_IRQHandler>

08003b0c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b0c:	f240 605c 	movw	r0, #1628	; 0x65c
 8003b10:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003b14:	f001 bd62 	b.w	80055dc <HAL_DMA_IRQHandler>

08003b18 <HAL_ADC_ConvHalfCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef * hadc)
{
 8003b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
		Q_tmp = sig_in*sine_arr[cnt];
		if (++cnt == N_cos_sin) cnt = 0;

		//I low pass filter
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003b1c:	f640 23cc 	movw	r3, #2764	; 0xacc
 8003b20:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8003b24:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 8003b2c:	ed2d 8b0e 	vpush	{d8-d14}
 8003b30:	ed91 2a01 	vldr	s4, [r1, #4]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003b34:	edd3 ba02 	vldr	s23, [r3, #8]
 8003b38:	edd3 aa01 	vldr	s21, [r3, #4]
 8003b3c:	ed93 3a00 	vldr	s6, [r3]
 8003b40:	edd1 2a00 	vldr	s5, [r1]
 8003b44:	ed93 ca03 	vldr	s24, [r3, #12]
 8003b48:	edd1 5a02 	vldr	s11, [r1, #8]
 8003b4c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b50:	edd1 6a03 	vldr	s13, [r1, #12]
		Z_I[2] = Z_I[1];
		Z_I[1] = Z_I[0];
		Z_I[0] = I_tmp;

		//Q low pass filter
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003b54:	ee22 aa2b 	vmul.f32	s20, s4, s23
 8003b58:	ee22 4a2a 	vmul.f32	s8, s4, s21
 8003b5c:	eeaa aaa2 	vfma.f32	s20, s21, s5
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8003b60:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003b64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b68:	eea3 4a22 	vfma.f32	s8, s6, s5
 8003b6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003b70:	f640 1c64 	movw	ip, #2404	; 0x964
 8003b74:	eea5 aa8c 	vfma.f32	s20, s11, s24
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8003b78:	6190      	str	r0, [r2, #24]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003b7a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8003b7e:	eea5 4aab 	vfma.f32	s8, s11, s23
 8003b82:	f640 0301 	movw	r3, #2049	; 0x801
 8003b86:	f6c3 2300 	movt	r3, #14848	; 0x3a00
 8003b8a:	eea6 aa87 	vfma.f32	s20, s13, s14
 8003b8e:	f640 25f8 	movw	r5, #2808	; 0xaf8
 8003b92:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8003b96:	eea6 4a8c 	vfma.f32	s8, s13, s24
 8003b9a:	782e      	ldrb	r6, [r5, #0]
 8003b9c:	eddc 6a00 	vldr	s13, [ip]
 8003ba0:	eddc 4a02 	vldr	s9, [ip, #8]
 8003ba4:	ee0d 3a10 	vmov	s26, r3
 8003ba8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8003bac:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003bb0:	eef0 0a46 	vmov.f32	s1, s12
 8003bb4:	eee6 0a8d 	vfma.f32	s1, s13, s26
		Q_tmp = sig_in*sine_arr[cnt];
 8003bb8:	f640 09e0 	movw	r9, #2272	; 0x8e0
 8003bbc:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8003bc0:	edd1 6a04 	vldr	s13, [r1, #16]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003bc4:	eeb0 5a44 	vmov.f32	s10, s8
 8003bc8:	eea6 5a87 	vfma.f32	s10, s13, s14
		Q_tmp = sig_in*sine_arr[cnt];
 8003bcc:	eb09 0386 	add.w	r3, r9, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 8003bd0:	1c70      	adds	r0, r6, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003bd2:	ee62 6a0c 	vmul.f32	s13, s4, s24
		Q_tmp = sig_in*sine_arr[cnt];
 8003bd6:	ed93 4a00 	vldr	s8, [r3]
 8003bda:	eee2 6aab 	vfma.f32	s13, s5, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8003bde:	b2c0      	uxtb	r0, r0
 8003be0:	2821      	cmp	r0, #33	; 0x21
		Q_tmp = sig_in*sine_arr[cnt];
 8003be2:	ee20 4a84 	vmul.f32	s8, s1, s8
 8003be6:	eee5 6a87 	vfma.f32	s13, s11, s14
 8003bea:	f640 2294 	movw	r2, #2708	; 0xa94
 8003bee:	f2c2 0200 	movt	r2, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003bf2:	eddc 5a01 	vldr	s11, [ip, #4]
 8003bf6:	edd2 7a01 	vldr	s15, [r2, #4]
 8003bfa:	ed92 ba00 	vldr	s22, [r2]
 8003bfe:	edd2 ca02 	vldr	s25, [r2, #8]
 8003c02:	ed92 1a03 	vldr	s2, [r2, #12]
 8003c06:	ed92 0a04 	vldr	s0, [r2, #16]
 8003c0a:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8003c0e:	eeb0 8a46 	vmov.f32	s16, s12
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003c12:	ee34 4a45 	vsub.f32	s8, s8, s10
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003c16:	eea5 8a8d 	vfma.f32	s16, s11, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8003c1a:	bf08      	it	eq
 8003c1c:	2000      	moveq	r0, #0
		Q_tmp = sig_in*sine_arr[cnt];
 8003c1e:	eb09 0380 	add.w	r3, r9, r0, lsl #2
 8003c22:	eef0 3a4a 	vmov.f32	s7, s20
 8003c26:	eee3 3a04 	vfma.f32	s7, s6, s8
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003c2a:	f240 5870 	movw	r8, #1392	; 0x570
 8003c2e:	f2c2 0800 	movt	r8, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8003c32:	ed93 aa00 	vldr	s20, [r3]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003c36:	ee67 5aaa 	vmul.f32	s11, s15, s21
		Q_tmp = sig_in*sine_arr[cnt];
 8003c3a:	ee28 aa0a 	vmul.f32	s20, s16, s20
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003c3e:	eef8 4a64 	vcvt.f32.u32	s9, s9
 8003c42:	eeeb 5a03 	vfma.f32	s11, s22, s6
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003c46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 8003c4a:	1c43      	adds	r3, r0, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003c4c:	ee3a aa63 	vsub.f32	s20, s20, s7
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003c50:	eef0 3a46 	vmov.f32	s7, s12
 8003c54:	eee4 3a8d 	vfma.f32	s7, s9, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b21      	cmp	r3, #33	; 0x21
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003c5c:	ee67 4aab 	vmul.f32	s9, s15, s23
 8003c60:	eeec 5aab 	vfma.f32	s11, s25, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8003c64:	bf08      	it	eq
 8003c66:	2300      	moveq	r3, #0
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003c68:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 8003c6c:	eeeb 4a2a 	vfma.f32	s9, s22, s21
 8003c70:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8003c74:	f640 2478 	movw	r4, #2680	; 0xa78
 8003c78:	eee1 5a0c 	vfma.f32	s11, s2, s24
 8003c7c:	f640 2e74 	movw	lr, #2676	; 0xa74
 8003c80:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003c84:	eeec 4a8c 	vfma.f32	s9, s25, s24
 8003c88:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 8003c8c:	eee0 5a07 	vfma.f32	s11, s0, s14
 8003c90:	eee1 4a07 	vfma.f32	s9, s2, s14
 8003c94:	ed96 1a00 	vldr	s2, [r6]
 8003c98:	edd4 1a00 	vldr	s3, [r4]
 8003c9c:	ee60 0a81 	vmul.f32	s1, s1, s2
		Q_tmp = sig_in*sine_arr[cnt];
 8003ca0:	eb09 0683 	add.w	r6, r9, r3, lsl #2
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003ca4:	ee70 5ae5 	vsub.f32	s11, s1, s11
		if (++cnt == N_cos_sin) cnt = 0;
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2db      	uxtb	r3, r3
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003cac:	ee22 5a07 	vmul.f32	s10, s4, s14
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003cb0:	ed90 1a00 	vldr	s2, [r0]
		if (++cnt == N_cos_sin) cnt = 0;
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	eee3 4a25 	vfma.f32	s9, s6, s11
 8003cba:	bf08      	it	eq
 8003cbc:	2300      	moveq	r3, #0
		Q_tmp = sig_in*sine_arr[cnt];
 8003cbe:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8003cc2:	eea2 5a8c 	vfma.f32	s10, s5, s24
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003cc6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8003cca:	f640 20e0 	movw	r0, #2784	; 0xae0
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003cce:	ee28 8a01 	vmul.f32	s16, s16, s2
		if (++cnt == N_cos_sin) cnt = 0;
 8003cd2:	3301      	adds	r3, #1
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8003cd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (++cnt == N_cos_sin) cnt = 0;
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	eeea 6a84 	vfma.f32	s13, s21, s8
 8003cde:	2b21      	cmp	r3, #33	; 0x21
 8003ce0:	bf08      	it	eq
 8003ce2:	2300      	moveq	r3, #0
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003ce4:	ee78 4a64 	vsub.f32	s9, s16, s9
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8003ce8:	edd0 0a00 	vldr	s1, [r0]
 8003cec:	ed90 0a01 	vldr	s0, [r0, #4]
 8003cf0:	ed90 9a02 	vldr	s18, [r0, #8]
 8003cf4:	edd0 9a03 	vldr	s19, [r0, #12]
 8003cf8:	edd0 8a04 	vldr	s17, [r0, #16]
 8003cfc:	ed90 8a05 	vldr	s16, [r0, #20]
 8003d00:	ed9e 1a00 	vldr	s2, [lr]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003d04:	ed97 ea00 	vldr	s28, [r7]
 8003d08:	ed84 1a00 	vstr	s2, [r4]
 8003d0c:	eeab 5a84 	vfma.f32	s10, s23, s8
 8003d10:	702b      	strb	r3, [r5, #0]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003d12:	f8dc 300c 	ldr.w	r3, [ip, #12]
		Q_tmp = sig_in*sine_arr[cnt];
 8003d16:	edd6 da00 	vldr	s27, [r6]
 8003d1a:	edc2 4a02 	vstr	s9, [r2, #8]
 8003d1e:	eee3 6a0a 	vfma.f32	s13, s6, s20
	}

	float phase;
	int32_t DAC_value;

	switch(Demod_Type)
 8003d22:	f640 2472 	movw	r4, #2674	; 0xa72
 8003d26:	f2c2 0400 	movt	r4, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8003d2a:	ee63 daad 	vmul.f32	s27, s7, s27
 8003d2e:	eeaa 5a8a 	vfma.f32	s10, s21, s20
			Q_Z2 = Q_Z1;
 8003d32:	f640 2088 	movw	r0, #2696	; 0xa88
	switch(Demod_Type)
 8003d36:	7824      	ldrb	r4, [r4, #0]
 8003d38:	edc2 5a03 	vstr	s11, [r2, #12]
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003d3c:	ee7d 6ae6 	vsub.f32	s13, s27, s13
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003d40:	ee0d 3a90 	vmov	s27, r3
 8003d44:	eea6 5a83 	vfma.f32	s10, s13, s6
			Q_Z1 = Q;
 8003d48:	f640 2380 	movw	r3, #2688	; 0xa80
 8003d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003d50:	eef8 da6d 	vcvt.f32.u32	s27, s27
		Z_Q[1] = Z_Q[0];
 8003d54:	edc1 6a01 	vstr	s13, [r1, #4]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8003d58:	eead 6a8d 	vfma.f32	s12, s27, s26
			Q_Z2 = Q_Z1;
 8003d5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d60:	eeb0 da45 	vmov.f32	s26, s10
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003d64:	ee27 5a8c 	vmul.f32	s10, s15, s24
 8003d68:	ed82 ba04 	vstr	s22, [r2, #16]
 8003d6c:	eeab 5a2b 	vfma.f32	s10, s22, s23
		Z_Q[4] = Z_Q[3];
 8003d70:	edc1 2a04 	vstr	s5, [r1, #16]
 8003d74:	eeac 5a87 	vfma.f32	s10, s25, s14
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003d78:	ee27 7a87 	vmul.f32	s14, s15, s14
		Z_Q[3] = Z_Q[2];
 8003d7c:	ed81 4a03 	vstr	s8, [r1, #12]
 8003d80:	eeab 7a0c 	vfma.f32	s14, s22, s24
		Z_Q[2] = Z_Q[1];
 8003d84:	ed81 aa02 	vstr	s20, [r1, #8]
		Q_tmp = sig_in*sine_arr[cnt];
 8003d88:	edd9 ca00 	vldr	s25, [r9]
 8003d8c:	eeab 7aa5 	vfma.f32	s14, s23, s11
 8003d90:	ee66 ba2c 	vmul.f32	s23, s12, s25
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8003d94:	ee60 6a26 	vmul.f32	s13, s0, s13
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8003d98:	ee7b bacd 	vsub.f32	s23, s23, s26
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8003d9c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003da0:	eeaa 5aa5 	vfma.f32	s10, s21, s11
 8003da4:	eee8 7a8b 	vfma.f32	s15, s17, s22
 8003da8:	eee0 6aab 	vfma.f32	s13, s1, s23
 8003dac:	eee9 7aa5 	vfma.f32	s15, s19, s11
 8003db0:	eee9 6a0a 	vfma.f32	s13, s18, s20
 8003db4:	eea3 5a24 	vfma.f32	s10, s6, s9
 8003db8:	eeaa 7aa4 	vfma.f32	s14, s21, s9
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003dbc:	ee63 3a8e 	vmul.f32	s7, s7, s28
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003dc0:	eee9 6a84 	vfma.f32	s13, s19, s8
 8003dc4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003dc8:	eee9 7a24 	vfma.f32	s15, s18, s9
		Z_Q[0] = Q_tmp;
 8003dcc:	edc1 ba00 	vstr	s23, [r1]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003dd0:	edd8 5a00 	vldr	s11, [r8]
 8003dd4:	edc2 3a01 	vstr	s7, [r2, #4]
 8003dd8:	eea3 7a23 	vfma.f32	s14, s6, s7
			Q_Z2 = Q_Z1;
 8003ddc:	f640 2184 	movw	r1, #2692	; 0xa84
 8003de0:	f2c2 0100 	movt	r1, #8192	; 0x2000
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8003de4:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003de8:	eee8 6aa2 	vfma.f32	s13, s17, s5
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8003dec:	eee0 7a23 	vfma.f32	s15, s0, s7
 8003df0:	ee36 7a47 	vsub.f32	s14, s12, s14
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8003df4:	eee8 6a02 	vfma.f32	s13, s16, s4
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8003df8:	eee0 7a87 	vfma.f32	s15, s1, s14
			Q_Z2 = Q_Z1;
 8003dfc:	edd1 5a00 	vldr	s11, [r1]
			Q_Z1 = Q;
 8003e00:	ed93 6a00 	vldr	s12, [r3]
 8003e04:	ed82 7a00 	vstr	s14, [r2]
 8003e08:	f640 227c 	movw	r2, #2684	; 0xa7c
 8003e0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003e10:	edce 7a00 	vstr	s15, [lr]
			Q_Z2 = Q_Z1;
 8003e14:	edc2 1a00 	vstr	s3, [r2]
 8003e18:	edc0 5a00 	vstr	s11, [r0]
			Q_Z1 = Q;
 8003e1c:	ed81 6a00 	vstr	s12, [r1]
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8003e20:	edc3 6a00 	vstr	s13, [r3]
	switch(Demod_Type)
 8003e24:	2c03      	cmp	r4, #3
 8003e26:	f200 8094 	bhi.w	8003f52 <HAL_ADC_ConvHalfCpltCallback+0x43a>
 8003e2a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003e2e:	0152      	.short	0x0152
 8003e30:	01250004 	.word	0x01250004
 8003e34:	009d      	.short	0x009d
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
		break;

	//AM detector
	case DEMOD_AM: //simple AM detector based on module
			module = sqrtf(I*I + Q*Q);
 8003e36:	ee66 6aa6 	vmul.f32	s13, s13, s13

			//digital AGC - more likely automatic scaling
			if (module > module_max_tmp) module_max_tmp = module;
 8003e3a:	f640 3100 	movw	r1, #2816	; 0xb00
			module = sqrtf(I*I + Q*Q);
 8003e3e:	eee7 6aa7 	vfma.f32	s13, s15, s15
			AM_mod_max_cnt++;
 8003e42:	f640 236c 	movw	r3, #2668	; 0xa6c
			if (module > module_max_tmp) module_max_tmp = module;
 8003e46:	f2c2 0100 	movt	r1, #8192	; 0x2000
			AM_mod_max_cnt++;
 8003e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
			module = sqrtf(I*I + Q*Q);
 8003e4e:	eeb1 6ae6 	vsqrt.f32	s12, s13
			AM_mod_max_cnt++;
 8003e52:	681a      	ldr	r2, [r3, #0]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 8003e54:	f64e 2460 	movw	r4, #60000	; 0xea60
			AM_mod_max_cnt++;
 8003e58:	3201      	adds	r2, #1
			module = sqrtf(I*I + Q*Q);
 8003e5a:	f640 20fc 	movw	r0, #2812	; 0xafc
 8003e5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
			AM_mod_max_cnt++;
 8003e62:	601a      	str	r2, [r3, #0]
			if (module > module_max_tmp) module_max_tmp = module;
 8003e64:	edd1 7a00 	vldr	s15, [r1]
 8003e68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	bfc4      	itt	gt
 8003e72:	eef0 7a46 	vmovgt.f32	s15, s12
 8003e76:	ed81 6a00 	vstrgt	s12, [r1]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 8003e7a:	42a2      	cmp	r2, r4
 8003e7c:	f000 81b4 	beq.w	80041e8 <HAL_ADC_ConvHalfCpltCallback+0x6d0>
			Z_audio[3] = Z_audio[2];
			Z_audio[2] = Z_audio[1];
			Z_audio[1] = Z_audio[0];
			Z_audio[0] = tmp;

			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003e80:	f640 2368 	movw	r3, #2664	; 0xa68
 8003e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e88:	edd3 3a00 	vldr	s7, [r3]
				tmp -= Z_audio[k]*a_AM[k];
 8003e8c:	f640 22bc 	movw	r2, #2748	; 0xabc
 8003e90:	f647 6319 	movw	r3, #32281	; 0x7e19
 8003e94:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003e98:	f2c4 03b4 	movt	r3, #16564	; 0x40b4
 8003e9c:	ed92 5a01 	vldr	s10, [r2, #4]
 8003ea0:	edd2 4a00 	vldr	s9, [r2]
 8003ea4:	ed92 4a02 	vldr	s8, [r2, #8]
			Z_audio[1] = Z_audio[0];
 8003ea8:	edc2 4a01 	vstr	s9, [r2, #4]
				tmp -= Z_audio[k]*a_AM[k];
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	f64f 738e 	movw	r3, #65422	; 0xff8e
 8003eb4:	f2cc 0377 	movt	r3, #49271	; 0xc077
 8003eb8:	ee07 3a10 	vmov	s14, r3
 8003ebc:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003ec0:	f64f 0351 	movw	r3, #63569	; 0xf851
 8003ec4:	eee4 7a87 	vfma.f32	s15, s9, s14
 8003ec8:	f2cc 0369 	movt	r3, #49257	; 0xc069
 8003ecc:	f64e 61be 	movw	r1, #61118	; 0xeebe
 8003ed0:	ee07 3a10 	vmov	s14, r3
				module += Z_audio[k]*b_AM[k+1];
 8003ed4:	f247 131d 	movw	r3, #28957	; 0x711d
 8003ed8:	eee4 7a07 	vfma.f32	s15, s8, s14
				tmp -= Z_audio[k]*a_AM[k];
 8003edc:	f6c3 7163 	movt	r1, #16227	; 0x3f63
				module += Z_audio[k]*b_AM[k+1];
 8003ee0:	f6c3 333f 	movt	r3, #15167	; 0x3b3f
				tmp -= Z_audio[k]*a_AM[k];
 8003ee4:	ed92 7a03 	vldr	s14, [r2, #12]
			Z_audio[2] = Z_audio[1];
 8003ee8:	ed82 5a02 	vstr	s10, [r2, #8]
				module += Z_audio[k]*b_AM[k+1];
 8003eec:	ee05 3a90 	vmov	s11, r3
 8003ef0:	ee06 1a90 	vmov	s13, r1
 8003ef4:	f247 131d 	movw	r3, #28957	; 0x711d
 8003ef8:	f6cb 33bf 	movt	r3, #48063	; 0xbbbf
 8003efc:	eee7 7a26 	vfma.f32	s15, s14, s13
			if (DAC_value > 4095) DAC_value = 4095;
			if (DAC_value < 0) DAC_value = 0;
			DAC->DHR12R1 = DAC_value;
 8003f00:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8003f04:	f2c4 0100 	movt	r1, #16384	; 0x4000
				module += Z_audio[k]*b_AM[k+1];
 8003f08:	ee06 3a90 	vmov	s13, r3
 8003f0c:	ee27 7a25 	vmul.f32	s14, s14, s11
				tmp -= Z_audio[k]*a_AM[k];
 8003f10:	ee36 6a67 	vsub.f32	s12, s12, s15
				module += Z_audio[k]*b_AM[k+1];
 8003f14:	eea5 7a26 	vfma.f32	s14, s10, s13
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003f18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f1c:	f2c4 53c1 	movt	r3, #17857	; 0x45c1
 8003f20:	ee06 3a90 	vmov	s13, r3
			module += tmp*b_AM[0];
 8003f24:	eea6 7a25 	vfma.f32	s14, s12, s11
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003f28:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	ee67 6a26 	vmul.f32	s13, s14, s13
			module += tmp*b_AM[0];
 8003f34:	ed80 7a00 	vstr	s14, [r0]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003f38:	eee6 7aa3 	vfma.f32	s15, s13, s7
			Z_audio[3] = Z_audio[2];
 8003f3c:	ed82 4a03 	vstr	s8, [r2, #12]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			Z_audio[0] = tmp;
 8003f44:	ed82 6a00 	vstr	s12, [r2]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8003f48:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 8003f4c:	f383 030c 	usat	r3, #12, r3
 8003f50:	608b      	str	r3, [r1, #8]
	default:
		break;
	}

	GPIOD->BSRR = 1<<31; //calculation time measurement
}
 8003f52:	ecbd 8b0e 	vpop	{d8-d14}
	GPIOD->BSRR = 1<<31; //calculation time measurement
 8003f56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f62:	619a      	str	r2, [r3, #24]
}
 8003f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		module = sqrtf(I*I + Q*Q);
 8003f68:	ee66 6aa6 	vmul.f32	s13, s13, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8003f6c:	f640 2190 	movw	r1, #2704	; 0xa90
		module = sqrtf(I*I + Q*Q);
 8003f70:	eee7 6aa7 	vfma.f32	s13, s15, s15
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8003f74:	f648 63bc 	movw	r3, #36540	; 0x8ebc
 8003f78:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003f7c:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
		module = sqrtf(I*I + Q*Q);
 8003f80:	eeb1 6ae6 	vsqrt.f32	s12, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8003f84:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003f88:	f244 60b4 	movw	r0, #18100	; 0x46b4
 8003f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003f90:	f6cb 70ff 	movt	r0, #49151	; 0xbfff
 8003f94:	edd1 7a00 	vldr	s15, [r1]
 8003f98:	edd2 5a00 	vldr	s11, [r2]
 8003f9c:	ee07 3a10 	vmov	s14, r3
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003fa0:	f240 0364 	movw	r3, #100	; 0x64
 8003fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fa8:	ee06 0a90 	vmov	s13, r0
 8003fac:	ed93 5a02 	vldr	s10, [r3, #8]
		Z2_audio = Z1_audio;
 8003fb0:	edc1 5a00 	vstr	s11, [r1]
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8003fb4:	ee27 7a87 	vmul.f32	s14, s15, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003fb8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003fbc:	eea5 7aa6 	vfma.f32	s14, s11, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8003fc0:	f240 0062 	movw	r0, #98	; 0x62
 8003fc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fc8:	ed93 5a01 	vldr	s10, [r3, #4]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003fcc:	edd3 6a00 	vldr	s13, [r3]
 8003fd0:	eee5 7a85 	vfma.f32	s15, s11, s10
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f2c4 33fa 	movt	r3, #17402	; 0x43fa
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8003fda:	ee36 7a47 	vsub.f32	s14, s12, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003fde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003fe2:	ee06 3a90 	vmov	s13, r3
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8003fe6:	8803      	ldrh	r3, [r0, #0]
		Z1_audio = tmp;
 8003fe8:	ed82 7a00 	vstr	s14, [r2]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003fec:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8003ff0:	ee06 3a90 	vmov	s13, r3
 8003ff4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ff8:	f640 2371 	movw	r3, #2673	; 0xa71
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8003ffc:	f640 20fc 	movw	r0, #2812	; 0xafc
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004000:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004004:	f2c2 0300 	movt	r3, #8192	; 0x2000
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8004008:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	781a      	ldrb	r2, [r3, #0]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8004012:	edc0 7a00 	vstr	s15, [r0]
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004016:	f340 80e3 	ble.w	80041e0 <HAL_ADC_ConvHalfCpltCallback+0x6c8>
 800401a:	b932      	cbnz	r2, 800402a <HAL_ADC_ConvHalfCpltCallback+0x512>
			DAC->DHR12R1 = 0;
 800401c:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004020:	f2c4 0100 	movt	r1, #16384	; 0x4000
			CW_triggered = true;
 8004024:	2001      	movs	r0, #1
 8004026:	7018      	strb	r0, [r3, #0]
			DAC->DHR12R1 = 0;
 8004028:	608a      	str	r2, [r1, #8]
			CW_decim_cnt++;
 800402a:	f640 2170 	movw	r1, #2672	; 0xa70
 800402e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004032:	780a      	ldrb	r2, [r1, #0]
 8004034:	3201      	adds	r2, #1
 8004036:	b2d2      	uxtb	r2, r2
			if (CW_decim_cnt == 107)
 8004038:	2a6b      	cmp	r2, #107	; 0x6b
			CW_decim_cnt++;
 800403a:	700a      	strb	r2, [r1, #0]
			if (CW_decim_cnt == 107)
 800403c:	d10b      	bne.n	8004056 <HAL_ADC_ConvHalfCpltCallback+0x53e>
				DAC->DHR12R1 ^= 0xFFF;
 800403e:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 8004042:	f2c4 0000 	movt	r0, #16384	; 0x4000
				CW_decim_cnt = 0;
 8004046:	2400      	movs	r4, #0
				DAC->DHR12R1 ^= 0xFFF;
 8004048:	6882      	ldr	r2, [r0, #8]
 800404a:	f482 627f 	eor.w	r2, r2, #4080	; 0xff0
 800404e:	f082 020f 	eor.w	r2, r2, #15
 8004052:	6082      	str	r2, [r0, #8]
				CW_decim_cnt = 0;
 8004054:	700c      	strb	r4, [r1, #0]
			if (module < CW_trig_lower_level) CW_triggered = false;
 8004056:	f240 0260 	movw	r2, #96	; 0x60
 800405a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	ee07 2a10 	vmov	s14, r2
 8004064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	bf44      	itt	mi
 8004072:	2200      	movmi	r2, #0
 8004074:	701a      	strbmi	r2, [r3, #0]
 8004076:	e76c      	b.n	8003f52 <HAL_ADC_ConvHalfCpltCallback+0x43a>
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 8004078:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800407c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004080:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
 8004084:	f2c4 5255 	movt	r2, #17749	; 0x4555
 8004088:	ee05 2a90 	vmov	s11, r2
 800408c:	ee06 3a10 	vmov	s12, r3
 8004090:	ee07 3a10 	vmov	s14, r3
 8004094:	eea7 6aa5 	vfma.f32	s12, s15, s11
			DAC->DHR12R1 = DAC_value;
 8004098:	f640 70ff 	movw	r0, #4095	; 0xfff
 800409c:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 80040a0:	eea6 7aa5 	vfma.f32	s14, s13, s11
			DAC->DHR12R1 = DAC_value;
 80040a4:	f2c4 0100 	movt	r1, #16384	; 0x4000
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 80040a8:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80040ac:	ee17 2a90 	vmov	r2, s15
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 80040b0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80040b4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80040b8:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 80040bc:	4282      	cmp	r2, r0
 80040be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040c2:	bfa8      	it	ge
 80040c4:	4602      	movge	r2, r0
			DAC->DHR12R2 = DAC_value;
 80040c6:	4283      	cmp	r3, r0
 80040c8:	bfa8      	it	ge
 80040ca:	4603      	movge	r3, r0
			DAC->DHR12R1 = DAC_value;
 80040cc:	608a      	str	r2, [r1, #8]
			DAC->DHR12R2 = DAC_value;
 80040ce:	614b      	str	r3, [r1, #20]
		break;
 80040d0:	e73f      	b.n	8003f52 <HAL_ADC_ConvHalfCpltCallback+0x43a>
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80040d2:	ee71 7ae7 	vsub.f32	s15, s3, s15
 80040d6:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80040da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040de:	ee26 6a06 	vmul.f32	s12, s12, s12
 80040e2:	eee6 7a81 	vfma.f32	s15, s13, s2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 80040e6:	2300      	movs	r3, #0
 80040e8:	f2c4 2395 	movt	r3, #17045	; 0x4295
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80040ec:	eea1 6a01 	vfma.f32	s12, s2, s2
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80040f0:	f640 2090 	movw	r0, #2704	; 0xa90
 80040f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80040f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004100:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8004104:	ee87 7a86 	vdiv.f32	s14, s15, s12
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004108:	f640 218c 	movw	r1, #2700	; 0xa8c
 800410c:	f24a 322f 	movw	r2, #41775	; 0xa32f
 8004110:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004114:	f6cb 72d2 	movt	r2, #49106	; 0xbfd2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004118:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
 800411c:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	bf8c      	ite	hi
 8004126:	eef0 7a64 	vmovhi.f32	s15, s9
 800412a:	eef0 7a47 	vmovls.f32	s15, s14
 800412e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	bfb8      	it	lt
 8004138:	eef0 7a45 	vmovlt.f32	s15, s10
 800413c:	ee05 3a90 	vmov	s11, r3
 8004140:	ee77 7aa4 	vadd.f32	s15, s15, s9
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004144:	f240 738c 	movw	r3, #1932	; 0x78c
 8004148:	f6c3 733a 	movt	r3, #16186	; 0x3f3a
 800414c:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004150:	ee67 7aa5 	vmul.f32	s15, s15, s11
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004154:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8004158:	f6c3 4393 	movt	r3, #15507	; 0x3c93
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 800415c:	edd0 6a00 	vldr	s13, [r0]
 8004160:	edd1 4a00 	vldr	s9, [r1]
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004164:	ee05 3a90 	vmov	s11, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416c:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8004170:	f6c3 5313 	movt	r3, #15635	; 0x3d13
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004174:	ee26 7a86 	vmul.f32	s14, s13, s12
 8004178:	ee05 2a10 	vmov	s10, r2
 800417c:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004180:	ee17 3a90 	vmov	r3, s15
 8004184:	f240 3218 	movw	r2, #792	; 0x318
 8004188:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800418c:	eea4 7a85 	vfma.f32	s14, s9, s10
 8004190:	b29b      	uxth	r3, r3
 8004192:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004196:	ee66 6aa5 	vmul.f32	s13, s13, s11
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 800419a:	edd3 7a00 	vldr	s15, [r3]
			Z2_audio = Z1_audio;
 800419e:	edc0 4a00 	vstr	s9, [r0]
 80041a2:	eee4 6a86 	vfma.f32	s13, s9, s12
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 80041a6:	f64e 7254 	movw	r2, #61268	; 0xef54
 80041aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80041ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 80041b2:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 80041b6:	eee7 6a25 	vfma.f32	s13, s14, s11
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 80041ba:	f2c4 42a2 	movt	r2, #17570	; 0x44a2
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	ee06 2a10 	vmov	s12, r2
 80041c6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80041ca:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80041ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
			Z1_audio = tmp;
 80041d2:	ed81 7a00 	vstr	s14, [r1]
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 80041d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041da:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 80041de:	e6b8      	b.n	8003f52 <HAL_ADC_ConvHalfCpltCallback+0x43a>
		if (CW_triggered)
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	f43f aeb6 	beq.w	8003f52 <HAL_ADC_ConvHalfCpltCallback+0x43a>
 80041e6:	e720      	b.n	800402a <HAL_ADC_ConvHalfCpltCallback+0x512>
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 80041e8:	f243 3233 	movw	r2, #13107	; 0x3333
 80041ec:	f6c3 7233 	movt	r2, #16179	; 0x3f33
 80041f0:	ee07 2a10 	vmov	s14, r2
 80041f4:	eec7 3a27 	vdiv.f32	s7, s14, s15
 80041f8:	f640 2268 	movw	r2, #2664	; 0xa68
				AM_mod_max_cnt = 0;
 80041fc:	2400      	movs	r4, #0
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 80041fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
				AM_mod_max_cnt = 0;
 8004202:	601c      	str	r4, [r3, #0]
				module_max_tmp = -1.0;
 8004204:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004208:	edc1 7a00 	vstr	s15, [r1]
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 800420c:	edc2 3a00 	vstr	s7, [r2]
				module_max_tmp = -1.0;
 8004210:	e63c      	b.n	8003e8c <HAL_ADC_ConvHalfCpltCallback+0x374>
 8004212:	bf00      	nop

08004214 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 8004214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
		I_tmp = sig_in*cosine_arr[cnt];
		Q_tmp = sig_in*sine_arr[cnt];
		if (++cnt == N_cos_sin) cnt = 0;

		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004218:	f640 23cc 	movw	r3, #2764	; 0xacc
 800421c:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8004220:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004224:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 8004228:	ed2d 8b0e 	vpush	{d8-d14}
 800422c:	ed91 2a01 	vldr	s4, [r1, #4]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004230:	edd3 ba02 	vldr	s23, [r3, #8]
 8004234:	edd3 aa01 	vldr	s21, [r3, #4]
 8004238:	ed93 3a00 	vldr	s6, [r3]
 800423c:	edd1 2a00 	vldr	s5, [r1]
 8004240:	ed93 ca03 	vldr	s24, [r3, #12]
 8004244:	edd1 5a02 	vldr	s11, [r1, #8]
 8004248:	ed93 7a04 	vldr	s14, [r3, #16]
 800424c:	edd1 6a03 	vldr	s13, [r1, #12]
		Z_I[3] = Z_I[2];
		Z_I[2] = Z_I[1];
		Z_I[1] = Z_I[0];
		Z_I[0] = I_tmp;

		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004250:	ee22 aa2b 	vmul.f32	s20, s4, s23
 8004254:	ee22 4a2a 	vmul.f32	s8, s4, s21
 8004258:	eeaa aaa2 	vfma.f32	s20, s21, s5
	GPIOD->BSRR = 1<<15; //calculation time measurement
 800425c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004260:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004264:	eea3 4a22 	vfma.f32	s8, s6, s5
 8004268:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800426c:	f640 1c64 	movw	ip, #2404	; 0x964
 8004270:	eea5 aa8c 	vfma.f32	s20, s11, s24
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8004274:	6190      	str	r0, [r2, #24]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004276:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 800427a:	eea5 4aab 	vfma.f32	s8, s11, s23
 800427e:	f640 0301 	movw	r3, #2049	; 0x801
 8004282:	f6c3 2300 	movt	r3, #14848	; 0x3a00
 8004286:	eea6 aa87 	vfma.f32	s20, s13, s14
 800428a:	f640 25f8 	movw	r5, #2808	; 0xaf8
 800428e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004292:	eea6 4a8c 	vfma.f32	s8, s13, s24
 8004296:	782e      	ldrb	r6, [r5, #0]
 8004298:	eddc 6a04 	vldr	s13, [ip, #16]
 800429c:	eddc 4a06 	vldr	s9, [ip, #24]
 80042a0:	ee0d 3a10 	vmov	s26, r3
 80042a4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 80042a8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80042ac:	eef0 0a46 	vmov.f32	s1, s12
 80042b0:	eee6 0a8d 	vfma.f32	s1, s13, s26
		Q_tmp = sig_in*sine_arr[cnt];
 80042b4:	f640 09e0 	movw	r9, #2272	; 0x8e0
 80042b8:	f2c2 0900 	movt	r9, #8192	; 0x2000
 80042bc:	edd1 6a04 	vldr	s13, [r1, #16]
		I_tmp = sig_in*cosine_arr[cnt];
 80042c0:	eeb0 5a44 	vmov.f32	s10, s8
 80042c4:	eea6 5a87 	vfma.f32	s10, s13, s14
		Q_tmp = sig_in*sine_arr[cnt];
 80042c8:	eb09 0386 	add.w	r3, r9, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 80042cc:	1c70      	adds	r0, r6, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 80042ce:	ee62 6a0c 	vmul.f32	s13, s4, s24
		Q_tmp = sig_in*sine_arr[cnt];
 80042d2:	ed93 4a00 	vldr	s8, [r3]
 80042d6:	eee2 6aab 	vfma.f32	s13, s5, s23
		if (++cnt == N_cos_sin) cnt = 0;
 80042da:	b2c0      	uxtb	r0, r0
 80042dc:	2821      	cmp	r0, #33	; 0x21
		Q_tmp = sig_in*sine_arr[cnt];
 80042de:	ee20 4a84 	vmul.f32	s8, s1, s8
 80042e2:	eee5 6a87 	vfma.f32	s13, s11, s14
 80042e6:	f640 2294 	movw	r2, #2708	; 0xa94
 80042ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 80042ee:	eddc 5a05 	vldr	s11, [ip, #20]
 80042f2:	edd2 7a01 	vldr	s15, [r2, #4]
 80042f6:	ed92 ba00 	vldr	s22, [r2]
 80042fa:	edd2 ca02 	vldr	s25, [r2, #8]
 80042fe:	ed92 1a03 	vldr	s2, [r2, #12]
 8004302:	ed92 0a04 	vldr	s0, [r2, #16]
 8004306:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800430a:	eeb0 8a46 	vmov.f32	s16, s12
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 800430e:	ee34 4a45 	vsub.f32	s8, s8, s10
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004312:	eea5 8a8d 	vfma.f32	s16, s11, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8004316:	bf08      	it	eq
 8004318:	2000      	moveq	r0, #0
		Q_tmp = sig_in*sine_arr[cnt];
 800431a:	eb09 0380 	add.w	r3, r9, r0, lsl #2
 800431e:	eef0 3a4a 	vmov.f32	s7, s20
 8004322:	eee3 3a04 	vfma.f32	s7, s6, s8
		I_tmp = sig_in*cosine_arr[cnt];
 8004326:	f240 5870 	movw	r8, #1392	; 0x570
 800432a:	f2c2 0800 	movt	r8, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 800432e:	ed93 aa00 	vldr	s20, [r3]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004332:	ee67 5aaa 	vmul.f32	s11, s15, s21
		Q_tmp = sig_in*sine_arr[cnt];
 8004336:	ee28 aa0a 	vmul.f32	s20, s16, s20
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800433a:	eef8 4a64 	vcvt.f32.u32	s9, s9
 800433e:	eeeb 5a03 	vfma.f32	s11, s22, s6
		I_tmp = sig_in*cosine_arr[cnt];
 8004342:	eb08 0686 	add.w	r6, r8, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 8004346:	1c43      	adds	r3, r0, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004348:	ee3a aa63 	vsub.f32	s20, s20, s7
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800434c:	eef0 3a46 	vmov.f32	s7, s12
 8004350:	eee4 3a8d 	vfma.f32	s7, s9, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b21      	cmp	r3, #33	; 0x21
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004358:	ee67 4aab 	vmul.f32	s9, s15, s23
 800435c:	eeec 5aab 	vfma.f32	s11, s25, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8004360:	bf08      	it	eq
 8004362:	2300      	moveq	r3, #0
		I_tmp = sig_in*cosine_arr[cnt];
 8004364:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 8004368:	eeeb 4a2a 	vfma.f32	s9, s22, s21
 800436c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004370:	f640 2478 	movw	r4, #2680	; 0xa78
 8004374:	eee1 5a0c 	vfma.f32	s11, s2, s24
 8004378:	f640 2e74 	movw	lr, #2676	; 0xa74
 800437c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004380:	eeec 4a8c 	vfma.f32	s9, s25, s24
 8004384:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 8004388:	eee0 5a07 	vfma.f32	s11, s0, s14
 800438c:	eee1 4a07 	vfma.f32	s9, s2, s14
 8004390:	ed96 1a00 	vldr	s2, [r6]
 8004394:	edd4 1a00 	vldr	s3, [r4]
 8004398:	ee60 0a81 	vmul.f32	s1, s1, s2
		Q_tmp = sig_in*sine_arr[cnt];
 800439c:	eb09 0683 	add.w	r6, r9, r3, lsl #2
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80043a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
		if (++cnt == N_cos_sin) cnt = 0;
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2db      	uxtb	r3, r3
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 80043a8:	ee22 5a07 	vmul.f32	s10, s4, s14
		I_tmp = sig_in*cosine_arr[cnt];
 80043ac:	ed90 1a00 	vldr	s2, [r0]
		if (++cnt == N_cos_sin) cnt = 0;
 80043b0:	2b21      	cmp	r3, #33	; 0x21
 80043b2:	eee3 4a25 	vfma.f32	s9, s6, s11
 80043b6:	bf08      	it	eq
 80043b8:	2300      	moveq	r3, #0
		Q_tmp = sig_in*sine_arr[cnt];
 80043ba:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 80043be:	eea2 5a8c 	vfma.f32	s10, s5, s24
		I_tmp = sig_in*cosine_arr[cnt];
 80043c2:	eb08 0883 	add.w	r8, r8, r3, lsl #2
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80043c6:	f640 20e0 	movw	r0, #2784	; 0xae0
		I_tmp = sig_in*cosine_arr[cnt];
 80043ca:	ee28 8a01 	vmul.f32	s16, s16, s2
		if (++cnt == N_cos_sin) cnt = 0;
 80043ce:	3301      	adds	r3, #1
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80043d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (++cnt == N_cos_sin) cnt = 0;
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	eeea 6a84 	vfma.f32	s13, s21, s8
 80043da:	2b21      	cmp	r3, #33	; 0x21
 80043dc:	bf08      	it	eq
 80043de:	2300      	moveq	r3, #0
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80043e0:	ee78 4a64 	vsub.f32	s9, s16, s9
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80043e4:	edd0 0a00 	vldr	s1, [r0]
 80043e8:	ed90 0a01 	vldr	s0, [r0, #4]
 80043ec:	ed90 9a02 	vldr	s18, [r0, #8]
 80043f0:	edd0 9a03 	vldr	s19, [r0, #12]
 80043f4:	edd0 8a04 	vldr	s17, [r0, #16]
 80043f8:	ed90 8a05 	vldr	s16, [r0, #20]
 80043fc:	ed9e 1a00 	vldr	s2, [lr]
		I_tmp = sig_in*cosine_arr[cnt];
 8004400:	ed97 ea00 	vldr	s28, [r7]
 8004404:	ed84 1a00 	vstr	s2, [r4]
 8004408:	eeab 5a84 	vfma.f32	s10, s23, s8
 800440c:	702b      	strb	r3, [r5, #0]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800440e:	f8dc 301c 	ldr.w	r3, [ip, #28]
		Q_tmp = sig_in*sine_arr[cnt];
 8004412:	edd6 da00 	vldr	s27, [r6]
 8004416:	edc2 4a02 	vstr	s9, [r2, #8]
 800441a:	eee3 6a0a 	vfma.f32	s13, s6, s20
	}

	float phase;
	int32_t DAC_value;

	switch(Demod_Type)
 800441e:	f640 2472 	movw	r4, #2674	; 0xa72
 8004422:	f2c2 0400 	movt	r4, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8004426:	ee63 daad 	vmul.f32	s27, s7, s27
 800442a:	eeaa 5a8a 	vfma.f32	s10, s21, s20
			Q_Z2 = Q_Z1;
 800442e:	f640 2088 	movw	r0, #2696	; 0xa88
	switch(Demod_Type)
 8004432:	7824      	ldrb	r4, [r4, #0]
 8004434:	edc2 5a03 	vstr	s11, [r2, #12]
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004438:	ee7d 6ae6 	vsub.f32	s13, s27, s13
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800443c:	ee0d 3a90 	vmov	s27, r3
 8004440:	eea6 5a83 	vfma.f32	s10, s13, s6
			Q_Z1 = Q;
 8004444:	f640 2380 	movw	r3, #2688	; 0xa80
 8004448:	f2c2 0300 	movt	r3, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 800444c:	eef8 da6d 	vcvt.f32.u32	s27, s27
		Z_Q[1] = Z_Q[0];
 8004450:	edc1 6a01 	vstr	s13, [r1, #4]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004454:	eead 6a8d 	vfma.f32	s12, s27, s26
			Q_Z2 = Q_Z1;
 8004458:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800445c:	eeb0 da45 	vmov.f32	s26, s10
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004460:	ee27 5a8c 	vmul.f32	s10, s15, s24
 8004464:	ed82 ba04 	vstr	s22, [r2, #16]
 8004468:	eeab 5a2b 	vfma.f32	s10, s22, s23
		Z_Q[4] = Z_Q[3];
 800446c:	edc1 2a04 	vstr	s5, [r1, #16]
 8004470:	eeac 5a87 	vfma.f32	s10, s25, s14
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004474:	ee27 7a87 	vmul.f32	s14, s15, s14
		Z_Q[3] = Z_Q[2];
 8004478:	ed81 4a03 	vstr	s8, [r1, #12]
 800447c:	eeab 7a0c 	vfma.f32	s14, s22, s24
		Z_Q[2] = Z_Q[1];
 8004480:	ed81 aa02 	vstr	s20, [r1, #8]
		Q_tmp = sig_in*sine_arr[cnt];
 8004484:	edd9 ca00 	vldr	s25, [r9]
 8004488:	eeab 7aa5 	vfma.f32	s14, s23, s11
 800448c:	ee66 ba2c 	vmul.f32	s23, s12, s25
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004490:	ee60 6a26 	vmul.f32	s13, s0, s13
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004494:	ee7b bacd 	vsub.f32	s23, s23, s26
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004498:	ee68 7a27 	vmul.f32	s15, s16, s15
 800449c:	eeaa 5aa5 	vfma.f32	s10, s21, s11
 80044a0:	eee8 7a8b 	vfma.f32	s15, s17, s22
 80044a4:	eee0 6aab 	vfma.f32	s13, s1, s23
 80044a8:	eee9 7aa5 	vfma.f32	s15, s19, s11
 80044ac:	eee9 6a0a 	vfma.f32	s13, s18, s20
 80044b0:	eea3 5a24 	vfma.f32	s10, s6, s9
 80044b4:	eeaa 7aa4 	vfma.f32	s14, s21, s9
		I_tmp = sig_in*cosine_arr[cnt];
 80044b8:	ee63 3a8e 	vmul.f32	s7, s7, s28
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80044bc:	eee9 6a84 	vfma.f32	s13, s19, s8
 80044c0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80044c4:	eee9 7a24 	vfma.f32	s15, s18, s9
		Z_Q[0] = Q_tmp;
 80044c8:	edc1 ba00 	vstr	s23, [r1]
		I_tmp = sig_in*cosine_arr[cnt];
 80044cc:	edd8 5a00 	vldr	s11, [r8]
 80044d0:	edc2 3a01 	vstr	s7, [r2, #4]
 80044d4:	eea3 7a23 	vfma.f32	s14, s6, s7
			Q_Z2 = Q_Z1;
 80044d8:	f640 2184 	movw	r1, #2692	; 0xa84
 80044dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
		I_tmp = sig_in*cosine_arr[cnt];
 80044e0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80044e4:	eee8 6aa2 	vfma.f32	s13, s17, s5
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80044e8:	eee0 7a23 	vfma.f32	s15, s0, s7
 80044ec:	ee36 7a47 	vsub.f32	s14, s12, s14
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 80044f0:	eee8 6a02 	vfma.f32	s13, s16, s4
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80044f4:	eee0 7a87 	vfma.f32	s15, s1, s14
			Q_Z2 = Q_Z1;
 80044f8:	edd1 5a00 	vldr	s11, [r1]
			Q_Z1 = Q;
 80044fc:	ed93 6a00 	vldr	s12, [r3]
 8004500:	ed82 7a00 	vstr	s14, [r2]
 8004504:	f640 227c 	movw	r2, #2684	; 0xa7c
 8004508:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800450c:	edce 7a00 	vstr	s15, [lr]
			Q_Z2 = Q_Z1;
 8004510:	edc2 1a00 	vstr	s3, [r2]
 8004514:	edc0 5a00 	vstr	s11, [r0]
			Q_Z1 = Q;
 8004518:	ed81 6a00 	vstr	s12, [r1]
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 800451c:	edc3 6a00 	vstr	s13, [r3]
	switch(Demod_Type)
 8004520:	2c03      	cmp	r4, #3
 8004522:	f200 8094 	bhi.w	800464e <HAL_ADC_ConvCpltCallback+0x43a>
 8004526:	e8df f014 	tbh	[pc, r4, lsl #1]
 800452a:	0152      	.short	0x0152
 800452c:	01250004 	.word	0x01250004
 8004530:	009d      	.short	0x009d

			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
		break;

	case DEMOD_AM:
			module = sqrtf(I*I + Q*Q);
 8004532:	ee66 6aa6 	vmul.f32	s13, s13, s13

			if (module > module_max_tmp) module_max_tmp = module;
 8004536:	f640 3100 	movw	r1, #2816	; 0xb00
			module = sqrtf(I*I + Q*Q);
 800453a:	eee7 6aa7 	vfma.f32	s13, s15, s15
			AM_mod_max_cnt++;
 800453e:	f640 236c 	movw	r3, #2668	; 0xa6c
			if (module > module_max_tmp) module_max_tmp = module;
 8004542:	f2c2 0100 	movt	r1, #8192	; 0x2000
			AM_mod_max_cnt++;
 8004546:	f2c2 0300 	movt	r3, #8192	; 0x2000
			module = sqrtf(I*I + Q*Q);
 800454a:	eeb1 6ae6 	vsqrt.f32	s12, s13
			AM_mod_max_cnt++;
 800454e:	681a      	ldr	r2, [r3, #0]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 8004550:	f64e 2460 	movw	r4, #60000	; 0xea60
			AM_mod_max_cnt++;
 8004554:	3201      	adds	r2, #1
			module = sqrtf(I*I + Q*Q);
 8004556:	f640 20fc 	movw	r0, #2812	; 0xafc
 800455a:	f2c2 0000 	movt	r0, #8192	; 0x2000
			AM_mod_max_cnt++;
 800455e:	601a      	str	r2, [r3, #0]
			if (module > module_max_tmp) module_max_tmp = module;
 8004560:	edd1 7a00 	vldr	s15, [r1]
 8004564:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	bfc4      	itt	gt
 800456e:	eef0 7a46 	vmovgt.f32	s15, s12
 8004572:	ed81 6a00 	vstrgt	s12, [r1]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 8004576:	42a2      	cmp	r2, r4
 8004578:	f000 81b4 	beq.w	80048e4 <HAL_ADC_ConvCpltCallback+0x6d0>
			Z_audio[3] = Z_audio[2];
			Z_audio[2] = Z_audio[1];
			Z_audio[1] = Z_audio[0];
			Z_audio[0] = tmp;

			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 800457c:	f640 2368 	movw	r3, #2664	; 0xa68
 8004580:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004584:	edd3 3a00 	vldr	s7, [r3]
				tmp -= Z_audio[k]*a_AM[k];
 8004588:	f640 22bc 	movw	r2, #2748	; 0xabc
 800458c:	f647 6319 	movw	r3, #32281	; 0x7e19
 8004590:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004594:	f2c4 03b4 	movt	r3, #16564	; 0x40b4
 8004598:	ed92 5a01 	vldr	s10, [r2, #4]
 800459c:	edd2 4a00 	vldr	s9, [r2]
 80045a0:	ed92 4a02 	vldr	s8, [r2, #8]
			Z_audio[1] = Z_audio[0];
 80045a4:	edc2 4a01 	vstr	s9, [r2, #4]
				tmp -= Z_audio[k]*a_AM[k];
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	f64f 738e 	movw	r3, #65422	; 0xff8e
 80045b0:	f2cc 0377 	movt	r3, #49271	; 0xc077
 80045b4:	ee07 3a10 	vmov	s14, r3
 80045b8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80045bc:	f64f 0351 	movw	r3, #63569	; 0xf851
 80045c0:	eee4 7a87 	vfma.f32	s15, s9, s14
 80045c4:	f2cc 0369 	movt	r3, #49257	; 0xc069
 80045c8:	f64e 61be 	movw	r1, #61118	; 0xeebe
 80045cc:	ee07 3a10 	vmov	s14, r3
				module += Z_audio[k]*b_AM[k+1];
 80045d0:	f247 131d 	movw	r3, #28957	; 0x711d
 80045d4:	eee4 7a07 	vfma.f32	s15, s8, s14
				tmp -= Z_audio[k]*a_AM[k];
 80045d8:	f6c3 7163 	movt	r1, #16227	; 0x3f63
				module += Z_audio[k]*b_AM[k+1];
 80045dc:	f6c3 333f 	movt	r3, #15167	; 0x3b3f
				tmp -= Z_audio[k]*a_AM[k];
 80045e0:	ed92 7a03 	vldr	s14, [r2, #12]
			Z_audio[2] = Z_audio[1];
 80045e4:	ed82 5a02 	vstr	s10, [r2, #8]
				module += Z_audio[k]*b_AM[k+1];
 80045e8:	ee05 3a90 	vmov	s11, r3
 80045ec:	ee06 1a90 	vmov	s13, r1
 80045f0:	f247 131d 	movw	r3, #28957	; 0x711d
 80045f4:	f6cb 33bf 	movt	r3, #48063	; 0xbbbf
 80045f8:	eee7 7a26 	vfma.f32	s15, s14, s13
			if (DAC_value > 4095) DAC_value = 4095;
			if (DAC_value < 0) DAC_value = 0;
			DAC->DHR12R1 = DAC_value;
 80045fc:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004600:	f2c4 0100 	movt	r1, #16384	; 0x4000
				module += Z_audio[k]*b_AM[k+1];
 8004604:	ee06 3a90 	vmov	s13, r3
 8004608:	ee27 7a25 	vmul.f32	s14, s14, s11
				tmp -= Z_audio[k]*a_AM[k];
 800460c:	ee36 6a67 	vsub.f32	s12, s12, s15
				module += Z_audio[k]*b_AM[k+1];
 8004610:	eea5 7a26 	vfma.f32	s14, s10, s13
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004614:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004618:	f2c4 53c1 	movt	r3, #17857	; 0x45c1
 800461c:	ee06 3a90 	vmov	s13, r3
			module += tmp*b_AM[0];
 8004620:	eea6 7a25 	vfma.f32	s14, s12, s11
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004624:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	ee67 6a26 	vmul.f32	s13, s14, s13
			module += tmp*b_AM[0];
 8004630:	ed80 7a00 	vstr	s14, [r0]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004634:	eee6 7aa3 	vfma.f32	s15, s13, s7
			Z_audio[3] = Z_audio[2];
 8004638:	ed82 4a03 	vstr	s8, [r2, #12]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 800463c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			Z_audio[0] = tmp;
 8004640:	ed82 6a00 	vstr	s12, [r2]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004644:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 8004648:	f383 030c 	usat	r3, #12, r3
 800464c:	608b      	str	r3, [r1, #8]
	default:
		break;
	}

	GPIOD->BSRR = 1<<31; //calculation time measurement
}
 800464e:	ecbd 8b0e 	vpop	{d8-d14}
	GPIOD->BSRR = 1<<31; //calculation time measurement
 8004652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004656:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800465a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800465e:	619a      	str	r2, [r3, #24]
}
 8004660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		module = sqrtf(I*I + Q*Q);
 8004664:	ee66 6aa6 	vmul.f32	s13, s13, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8004668:	f640 2190 	movw	r1, #2704	; 0xa90
		module = sqrtf(I*I + Q*Q);
 800466c:	eee7 6aa7 	vfma.f32	s13, s15, s15
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8004670:	f648 63bc 	movw	r3, #36540	; 0x8ebc
 8004674:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004678:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
		module = sqrtf(I*I + Q*Q);
 800467c:	eeb1 6ae6 	vsqrt.f32	s12, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8004680:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004684:	f244 60b4 	movw	r0, #18100	; 0x46b4
 8004688:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800468c:	f6cb 70ff 	movt	r0, #49151	; 0xbfff
 8004690:	edd1 7a00 	vldr	s15, [r1]
 8004694:	edd2 5a00 	vldr	s11, [r2]
 8004698:	ee07 3a10 	vmov	s14, r3
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 800469c:	f240 0364 	movw	r3, #100	; 0x64
 80046a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046a4:	ee06 0a90 	vmov	s13, r0
 80046a8:	ed93 5a02 	vldr	s10, [r3, #8]
		Z2_audio = Z1_audio;
 80046ac:	edc1 5a00 	vstr	s11, [r1]
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80046b0:	ee27 7a87 	vmul.f32	s14, s15, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80046b4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80046b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80046bc:	f240 0062 	movw	r0, #98	; 0x62
 80046c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80046c4:	ed93 5a01 	vldr	s10, [r3, #4]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80046c8:	edd3 6a00 	vldr	s13, [r3]
 80046cc:	eee5 7a85 	vfma.f32	s15, s11, s10
 80046d0:	2300      	movs	r3, #0
 80046d2:	f2c4 33fa 	movt	r3, #17402	; 0x43fa
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80046d6:	ee36 7a47 	vsub.f32	s14, s12, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80046da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80046de:	ee06 3a90 	vmov	s13, r3
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80046e2:	8803      	ldrh	r3, [r0, #0]
		Z1_audio = tmp;
 80046e4:	ed82 7a00 	vstr	s14, [r2]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80046e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80046ec:	ee06 3a90 	vmov	s13, r3
 80046f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80046f4:	f640 2371 	movw	r3, #2673	; 0xa71
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80046f8:	f640 20fc 	movw	r0, #2812	; 0xafc
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80046fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004700:	f2c2 0300 	movt	r3, #8192	; 0x2000
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8004704:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	781a      	ldrb	r2, [r3, #0]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 800470e:	edc0 7a00 	vstr	s15, [r0]
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004712:	f340 80e3 	ble.w	80048dc <HAL_ADC_ConvCpltCallback+0x6c8>
 8004716:	b932      	cbnz	r2, 8004726 <HAL_ADC_ConvCpltCallback+0x512>
			DAC->DHR12R1 = 0;
 8004718:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 800471c:	f2c4 0100 	movt	r1, #16384	; 0x4000
			CW_triggered = true;
 8004720:	2001      	movs	r0, #1
 8004722:	7018      	strb	r0, [r3, #0]
			DAC->DHR12R1 = 0;
 8004724:	608a      	str	r2, [r1, #8]
			CW_decim_cnt++;
 8004726:	f640 2170 	movw	r1, #2672	; 0xa70
 800472a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800472e:	780a      	ldrb	r2, [r1, #0]
 8004730:	3201      	adds	r2, #1
 8004732:	b2d2      	uxtb	r2, r2
			if (CW_decim_cnt == 107)
 8004734:	2a6b      	cmp	r2, #107	; 0x6b
			CW_decim_cnt++;
 8004736:	700a      	strb	r2, [r1, #0]
			if (CW_decim_cnt == 107)
 8004738:	d10b      	bne.n	8004752 <HAL_ADC_ConvCpltCallback+0x53e>
				DAC->DHR12R1 ^= 0xFFF;
 800473a:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 800473e:	f2c4 0000 	movt	r0, #16384	; 0x4000
				CW_decim_cnt = 0;
 8004742:	2400      	movs	r4, #0
				DAC->DHR12R1 ^= 0xFFF;
 8004744:	6882      	ldr	r2, [r0, #8]
 8004746:	f482 627f 	eor.w	r2, r2, #4080	; 0xff0
 800474a:	f082 020f 	eor.w	r2, r2, #15
 800474e:	6082      	str	r2, [r0, #8]
				CW_decim_cnt = 0;
 8004750:	700c      	strb	r4, [r1, #0]
			if (module < CW_trig_lower_level) CW_triggered = false;
 8004752:	f240 0260 	movw	r2, #96	; 0x60
 8004756:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	ee07 2a10 	vmov	s14, r2
 8004760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	bf44      	itt	mi
 800476e:	2200      	movmi	r2, #0
 8004770:	701a      	strbmi	r2, [r3, #0]
 8004772:	e76c      	b.n	800464e <HAL_ADC_ConvCpltCallback+0x43a>
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 8004774:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8004778:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800477c:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
 8004780:	f2c4 5255 	movt	r2, #17749	; 0x4555
 8004784:	ee05 2a90 	vmov	s11, r2
 8004788:	ee06 3a10 	vmov	s12, r3
 800478c:	ee07 3a10 	vmov	s14, r3
 8004790:	eea7 6aa5 	vfma.f32	s12, s15, s11
			DAC->DHR12R1 = DAC_value;
 8004794:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004798:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 800479c:	eea6 7aa5 	vfma.f32	s14, s13, s11
			DAC->DHR12R1 = DAC_value;
 80047a0:	f2c4 0100 	movt	r1, #16384	; 0x4000
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 80047a4:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80047a8:	ee17 2a90 	vmov	r2, s15
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 80047ac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80047b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80047b4:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 80047b8:	4282      	cmp	r2, r0
 80047ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80047be:	bfa8      	it	ge
 80047c0:	4602      	movge	r2, r0
			DAC->DHR12R2 = DAC_value;
 80047c2:	4283      	cmp	r3, r0
 80047c4:	bfa8      	it	ge
 80047c6:	4603      	movge	r3, r0
			DAC->DHR12R1 = DAC_value;
 80047c8:	608a      	str	r2, [r1, #8]
			DAC->DHR12R2 = DAC_value;
 80047ca:	614b      	str	r3, [r1, #20]
		break;
 80047cc:	e73f      	b.n	800464e <HAL_ADC_ConvCpltCallback+0x43a>
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80047ce:	ee71 7ae7 	vsub.f32	s15, s3, s15
 80047d2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80047d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047da:	ee26 6a06 	vmul.f32	s12, s12, s12
 80047de:	eee6 7a81 	vfma.f32	s15, s13, s2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 80047e2:	2300      	movs	r3, #0
 80047e4:	f2c4 2395 	movt	r3, #17045	; 0x4295
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80047e8:	eea1 6a01 	vfma.f32	s12, s2, s2
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80047ec:	f640 2090 	movw	r0, #2704	; 0xa90
 80047f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80047f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8004800:	ee87 7a86 	vdiv.f32	s14, s15, s12
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004804:	f640 218c 	movw	r1, #2700	; 0xa8c
 8004808:	f24a 322f 	movw	r2, #41775	; 0xa32f
 800480c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004810:	f6cb 72d2 	movt	r2, #49106	; 0xbfd2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004814:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
 8004818:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004820:	bf8c      	ite	hi
 8004822:	eef0 7a64 	vmovhi.f32	s15, s9
 8004826:	eef0 7a47 	vmovls.f32	s15, s14
 800482a:	eef4 7ac5 	vcmpe.f32	s15, s10
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	bfb8      	it	lt
 8004834:	eef0 7a45 	vmovlt.f32	s15, s10
 8004838:	ee05 3a90 	vmov	s11, r3
 800483c:	ee77 7aa4 	vadd.f32	s15, s15, s9
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004840:	f240 738c 	movw	r3, #1932	; 0x78c
 8004844:	f6c3 733a 	movt	r3, #16186	; 0x3f3a
 8004848:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 800484c:	ee67 7aa5 	vmul.f32	s15, s15, s11
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004850:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8004854:	f6c3 4393 	movt	r3, #15507	; 0x3c93
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004858:	edd0 6a00 	vldr	s13, [r0]
 800485c:	edd1 4a00 	vldr	s9, [r1]
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004860:	ee05 3a90 	vmov	s11, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004868:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 800486c:	f6c3 5313 	movt	r3, #15635	; 0x3d13
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004870:	ee26 7a86 	vmul.f32	s14, s13, s12
 8004874:	ee05 2a10 	vmov	s10, r2
 8004878:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 800487c:	ee17 3a90 	vmov	r3, s15
 8004880:	f240 3218 	movw	r2, #792	; 0x318
 8004884:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004888:	eea4 7a85 	vfma.f32	s14, s9, s10
 800488c:	b29b      	uxth	r3, r3
 800488e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004892:	ee66 6aa5 	vmul.f32	s13, s13, s11
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004896:	edd3 7a00 	vldr	s15, [r3]
			Z2_audio = Z1_audio;
 800489a:	edc0 4a00 	vstr	s9, [r0]
 800489e:	eee4 6a86 	vfma.f32	s13, s9, s12
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80048a2:	f64e 7254 	movw	r2, #61268	; 0xef54
 80048a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80048aa:	ee37 7ac7 	vsub.f32	s14, s15, s14
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80048ae:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 80048b2:	eee7 6a25 	vfma.f32	s13, s14, s11
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80048b6:	f2c4 42a2 	movt	r2, #17570	; 0x44a2
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	ee06 2a10 	vmov	s12, r2
 80048c2:	eee6 7a86 	vfma.f32	s15, s13, s12
 80048c6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80048ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
			Z1_audio = tmp;
 80048ce:	ed81 7a00 	vstr	s14, [r1]
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80048d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d6:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 80048da:	e6b8      	b.n	800464e <HAL_ADC_ConvCpltCallback+0x43a>
		if (CW_triggered)
 80048dc:	2a00      	cmp	r2, #0
 80048de:	f43f aeb6 	beq.w	800464e <HAL_ADC_ConvCpltCallback+0x43a>
 80048e2:	e720      	b.n	8004726 <HAL_ADC_ConvCpltCallback+0x512>
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 80048e4:	f243 3233 	movw	r2, #13107	; 0x3333
 80048e8:	f6c3 7233 	movt	r2, #16179	; 0x3f33
 80048ec:	ee07 2a10 	vmov	s14, r2
 80048f0:	eec7 3a27 	vdiv.f32	s7, s14, s15
 80048f4:	f640 2268 	movw	r2, #2664	; 0xa68
				AM_mod_max_cnt = 0;
 80048f8:	2400      	movs	r4, #0
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 80048fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
				AM_mod_max_cnt = 0;
 80048fe:	601c      	str	r4, [r3, #0]
				module_max_tmp = -1.0;
 8004900:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004904:	edc1 7a00 	vstr	s15, [r1]
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8004908:	edc2 3a00 	vstr	s7, [r2]
				module_max_tmp = -1.0;
 800490c:	e63c      	b.n	8004588 <HAL_ADC_ConvCpltCallback+0x374>
 800490e:	bf00      	nop

08004910 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004910:	b510      	push	{r4, lr}
	uint8_t rxchar_tmp = rxchar;
 8004912:	f640 3104 	movw	r1, #2820	; 0xb04
 8004916:	f2c2 0100 	movt	r1, #8192	; 0x2000
	HAL_UART_Receive_IT(huart, &rxchar, 1);
 800491a:	2201      	movs	r2, #1
	uint8_t rxchar_tmp = rxchar;
 800491c:	780c      	ldrb	r4, [r1, #0]
	HAL_UART_Receive_IT(huart, &rxchar, 1);
 800491e:	f003 fb91 	bl	8008044 <HAL_UART_Receive_IT>

	/* check if there's room in the buffer */
	if((RX_wptr != RX_rptr-1) &&
 8004922:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004926:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800492a:	f640 4310 	movw	r3, #3088	; 0xc10
 800492e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	1e50      	subs	r0, r2, #1
 8004938:	4281      	cmp	r1, r0
 800493a:	d00e      	beq.n	800495a <HAL_UART_RxCpltCallback+0x4a>
	   (RX_wptr - RX_rptr != (RX_BUFLEN-1)))
 800493c:	1a8a      	subs	r2, r1, r2
	if((RX_wptr != RX_rptr-1) &&
 800493e:	2aff      	cmp	r2, #255	; 0xff
 8004940:	d00b      	beq.n	800495a <HAL_UART_RxCpltCallback+0x4a>
	{
		/* Yes - Queue the new char */
		*RX_wptr++ = rxchar_tmp;
 8004942:	1c4a      	adds	r2, r1, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	700c      	strb	r4, [r1, #0]

		/* Wrap pointer */
		if((RX_wptr - &RX_buffer[0])>=RX_BUFLEN)
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	f640 320c 	movw	r2, #2828	; 0xb0c
 800494e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004952:	1a89      	subs	r1, r1, r2
 8004954:	29ff      	cmp	r1, #255	; 0xff
			RX_wptr = &RX_buffer[0];
 8004956:	bfc8      	it	gt
 8004958:	601a      	strgt	r2, [r3, #0]
	}
}
 800495a:	bd10      	pop	{r4, pc}

0800495c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* check if there's data in the buffer */
	if(TX_rptr != TX_wptr)
 800495c:	f640 63a0 	movw	r3, #3744	; 0xea0
 8004960:	f640 62a4 	movw	r2, #3748	; 0xea4
 8004964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004968:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	4291      	cmp	r1, r2
 8004972:	d01b      	beq.n	80049ac <HAL_UART_TxCpltCallback+0x50>
{
 8004974:	b510      	push	{r4, lr}
	{
		/* get data out of the buffer */
		txchar = *TX_rptr++;
 8004976:	1c4a      	adds	r2, r1, #1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f891 c000 	ldrb.w	ip, [r1]
 800497e:	f640 3105 	movw	r1, #2821	; 0xb05
		//HAL_UART_Transmit_IT(huart, TX_rptr++, 1);

		/* wrap the pointer */
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 8004982:	f640 4414 	movw	r4, #3092	; 0xc14
		txchar = *TX_rptr++;
 8004986:	f2c2 0100 	movt	r1, #8192	; 0x2000
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 800498a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800498e:	eba2 0e04 	sub.w	lr, r2, r4
		txchar = *TX_rptr++;
 8004992:	f881 c000 	strb.w	ip, [r1]
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 8004996:	f240 2c89 	movw	ip, #649	; 0x289
			TX_rptr = &TX_buffer[0];
 800499a:	45e6      	cmp	lr, ip
 800499c:	bfd8      	it	le
 800499e:	4614      	movle	r4, r2
 80049a0:	601c      	str	r4, [r3, #0]

		/* send the data */
		HAL_UART_Transmit_IT(huart, &txchar, 1);
 80049a2:	2201      	movs	r2, #1
	}
}
 80049a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit_IT(huart, &txchar, 1);
 80049a8:	f003 bb2a 	b.w	8008000 <HAL_UART_Transmit_IT>
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop

080049b0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80049b0:	2001      	movs	r0, #1
 80049b2:	4770      	bx	lr

080049b4 <_kill>:

int _kill(int pid, int sig)
{
 80049b4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049b6:	f003 fd79 	bl	80084ac <__errno>
 80049ba:	2316      	movs	r3, #22
 80049bc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80049be:	f04f 30ff 	mov.w	r0, #4294967295
 80049c2:	bd08      	pop	{r3, pc}

080049c4 <_exit>:

void _exit (int status)
{
 80049c4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80049c6:	f003 fd71 	bl	80084ac <__errno>
 80049ca:	2316      	movs	r3, #22
 80049cc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80049ce:	e7fe      	b.n	80049ce <_exit+0xa>

080049d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049d0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d2:	1e16      	subs	r6, r2, #0
 80049d4:	dd07      	ble.n	80049e6 <_read+0x16>
 80049d6:	460c      	mov	r4, r1
 80049d8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80049da:	f3af 8000 	nop.w
 80049de:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e2:	42a5      	cmp	r5, r4
 80049e4:	d1f9      	bne.n	80049da <_read+0xa>
  }

  return len;
}
 80049e6:	4630      	mov	r0, r6
 80049e8:	bd70      	pop	{r4, r5, r6, pc}
 80049ea:	bf00      	nop

080049ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ec:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ee:	1e16      	subs	r6, r2, #0
 80049f0:	dd07      	ble.n	8004a02 <_write+0x16>
 80049f2:	460c      	mov	r4, r1
 80049f4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80049f6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80049fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fe:	42ac      	cmp	r4, r5
 8004a00:	d1f9      	bne.n	80049f6 <_write+0xa>
  }
  return len;
}
 8004a02:	4630      	mov	r0, r6
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	bf00      	nop

08004a08 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a14:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004a16:	2000      	movs	r0, #0
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop

08004a1c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	4770      	bx	lr

08004a20 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004a20:	2000      	movs	r0, #0
 8004a22:	4770      	bx	lr

08004a24 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a24:	f640 3c08 	movw	ip, #2824	; 0xb08
 8004a28:	f2c2 0c00 	movt	ip, #8192	; 0x2000
{
 8004a2c:	b508      	push	{r3, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a2e:	f240 4100 	movw	r1, #1024	; 0x400
 8004a32:	f240 0300 	movw	r3, #0
  if (NULL == __sbrk_heap_end)
 8004a36:	f8dc 2000 	ldr.w	r2, [ip]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a3a:	f2c2 0302 	movt	r3, #8194	; 0x2002
 8004a3e:	f2c0 0100 	movt	r1, #0
 8004a42:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8004a44:	b132      	cbz	r2, 8004a54 <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a46:	4410      	add	r0, r2
 8004a48:	4288      	cmp	r0, r1
 8004a4a:	d80c      	bhi.n	8004a66 <_sbrk+0x42>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004a4c:	f8cc 0000 	str.w	r0, [ip]

  return (void *)prev_heap_end;
}
 8004a50:	4610      	mov	r0, r2
 8004a52:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8004a54:	f640 62c0 	movw	r2, #3776	; 0xec0
 8004a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
  if (__sbrk_heap_end + incr > max_heap)
 8004a5c:	4410      	add	r0, r2
 8004a5e:	4288      	cmp	r0, r1
    __sbrk_heap_end = &_end;
 8004a60:	f8cc 2000 	str.w	r2, [ip]
  if (__sbrk_heap_end + incr > max_heap)
 8004a64:	d9f2      	bls.n	8004a4c <_sbrk+0x28>
    errno = ENOMEM;
 8004a66:	f003 fd21 	bl	80084ac <__errno>
 8004a6a:	230c      	movs	r3, #12
    return (void *)-1;
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8004a70:	6003      	str	r3, [r0, #0]
}
 8004a72:	4610      	mov	r0, r2
 8004a74:	bd08      	pop	{r3, pc}
 8004a76:	bf00      	nop

08004a78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a78:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004a7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004a80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a84:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <usart_init>:
void usart_init(UART_HandleTypeDef *huartx_pointer)
{
	huartx = huartx_pointer;

	/* init RX buffer write/read pointers*/
	RX_wptr = &RX_buffer[0];
 8004a90:	f640 4110 	movw	r1, #3088	; 0xc10
{
 8004a94:	b500      	push	{lr}
	RX_wptr = &RX_buffer[0];
 8004a96:	f2c2 0100 	movt	r1, #8192	; 0x2000
	huartx = huartx_pointer;
 8004a9a:	f640 63a8 	movw	r3, #3752	; 0xea8
	RX_wptr = &RX_buffer[0];
 8004a9e:	f640 320c 	movw	r2, #2828	; 0xb0c
	huartx = huartx_pointer;
 8004aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
	RX_wptr = &RX_buffer[0];
 8004aa6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004aaa:	600a      	str	r2, [r1, #0]
	RX_rptr = &RX_buffer[0];
 8004aac:	f640 4e0c 	movw	lr, #3084	; 0xc0c

	/* init TX buffer */
	TX_wptr = &TX_buffer[0];
 8004ab0:	f640 6ca4 	movw	ip, #3748	; 0xea4
	TX_rptr = &TX_buffer[0];
 8004ab4:	f640 61a0 	movw	r1, #3744	; 0xea0
	RX_rptr = &RX_buffer[0];
 8004ab8:	f2c2 0e00 	movt	lr, #8192	; 0x2000
	TX_wptr = &TX_buffer[0];
 8004abc:	f2c2 0c00 	movt	ip, #8192	; 0x2000
	huartx = huartx_pointer;
 8004ac0:	6018      	str	r0, [r3, #0]
	TX_rptr = &TX_buffer[0];
 8004ac2:	f2c2 0100 	movt	r1, #8192	; 0x2000
	TX_wptr = &TX_buffer[0];
 8004ac6:	f640 4314 	movw	r3, #3092	; 0xc14
 8004aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
	RX_rptr = &RX_buffer[0];
 8004ace:	f8ce 2000 	str.w	r2, [lr]
	TX_wptr = &TX_buffer[0];
 8004ad2:	f8cc 3000 	str.w	r3, [ip]
	TX_rptr = &TX_buffer[0];
 8004ad6:	600b      	str	r3, [r1, #0]
}
 8004ad8:	f85d fb04 	ldr.w	pc, [sp], #4

08004adc <usart_flush_RX_buffer>:

//USART flush RX buffer
void usart_flush_RX_buffer()
{
	/* reinit RX buffer write/read pointers*/
	RX_wptr = &RX_buffer[0];
 8004adc:	f640 4110 	movw	r1, #3088	; 0xc10
	RX_rptr = &RX_buffer[0];
 8004ae0:	f640 420c 	movw	r2, #3084	; 0xc0c
	RX_wptr = &RX_buffer[0];
 8004ae4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004ae8:	f640 330c 	movw	r3, #2828	; 0xb0c
	RX_rptr = &RX_buffer[0];
 8004aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
	RX_wptr = &RX_buffer[0];
 8004af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af4:	600b      	str	r3, [r1, #0]
	RX_rptr = &RX_buffer[0];
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <usart_getc>:
{
	/* interrupt version */
	int retval;
	
	/* check if there's data in the buffer */
	if(RX_rptr != RX_wptr)
 8004afc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8004b00:	f640 4210 	movw	r2, #3088	; 0xc10
 8004b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b08:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4290      	cmp	r0, r2
 8004b12:	d00e      	beq.n	8004b32 <usart_getc+0x36>
	{
		/* get the data */
		retval = *RX_rptr++;
		
		/* wrap the pointer */
		if((RX_rptr - &RX_buffer[0])>=RX_BUFLEN)
 8004b14:	f640 310c 	movw	r1, #2828	; 0xb0c
		retval = *RX_rptr++;
 8004b18:	1c42      	adds	r2, r0, #1
		if((RX_rptr - &RX_buffer[0])>=RX_BUFLEN)
 8004b1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004b1e:	eba2 0c01 	sub.w	ip, r2, r1
		retval = *RX_rptr++;
 8004b22:	601a      	str	r2, [r3, #0]
			RX_rptr = &RX_buffer[0];
 8004b24:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8004b28:	bfc8      	it	gt
 8004b2a:	460a      	movgt	r2, r1
		retval = *RX_rptr++;
 8004b2c:	7800      	ldrb	r0, [r0, #0]
			RX_rptr = &RX_buffer[0];
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	4770      	bx	lr
	}
	else
		retval = EOF;
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295

	return retval;
}
 8004b36:	4770      	bx	lr

08004b38 <usart_putc>:
 */
void usart_putc(void* p, char c)
{
	/* interrupt version */
	/* check if there's room in the buffer */
	if((TX_wptr != TX_rptr-1) &&
 8004b38:	f640 63a0 	movw	r3, #3744	; 0xea0
 8004b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 8004b40:	b570      	push	{r4, r5, r6, lr}
	if((TX_wptr != TX_rptr-1) &&
 8004b42:	f640 64a4 	movw	r4, #3748	; 0xea4
 8004b46:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	1e50      	subs	r0, r2, #1
 8004b50:	4283      	cmp	r3, r0
 8004b52:	d004      	beq.n	8004b5e <usart_putc+0x26>
 8004b54:	f46f 7022 	mvn.w	r0, #648	; 0x288
 8004b58:	4403      	add	r3, r0
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d100      	bne.n	8004b60 <usart_putc+0x28>

		/* Wrap pointer */
		if((TX_wptr - &TX_buffer[0])>=TX_BUFLEN)
			TX_wptr = &TX_buffer[0];
	}
}
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_UART_GetState(huartx) == HAL_UART_STATE_BUSY_TX_RX)
 8004b60:	f640 66a8 	movw	r6, #3752	; 0xea8
 8004b64:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8004b68:	460d      	mov	r5, r1
 8004b6a:	6830      	ldr	r0, [r6, #0]
 8004b6c:	f003 fc94 	bl	8008498 <HAL_UART_GetState>
 8004b70:	2823      	cmp	r0, #35	; 0x23
 8004b72:	d10f      	bne.n	8004b94 <usart_putc+0x5c>
			*TX_wptr++ = c; //Queue the new char if there's transmission in progress
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	701d      	strb	r5, [r3, #0]
		if((TX_wptr - &TX_buffer[0])>=TX_BUFLEN)
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	f640 4314 	movw	r3, #3092	; 0xc14
 8004b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	f240 2189 	movw	r1, #649	; 0x289
 8004b8c:	428a      	cmp	r2, r1
			TX_wptr = &TX_buffer[0];
 8004b8e:	bfc8      	it	gt
 8004b90:	6023      	strgt	r3, [r4, #0]
}
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
			txchar = c;
 8004b94:	f640 3105 	movw	r1, #2821	; 0xb05
 8004b98:	f2c2 0100 	movt	r1, #8192	; 0x2000
			HAL_UART_Transmit_IT(huartx, &txchar, 1); //if not just send it
 8004b9c:	6830      	ldr	r0, [r6, #0]
			txchar = c;
 8004b9e:	700d      	strb	r5, [r1, #0]
			HAL_UART_Transmit_IT(huartx, &txchar, 1); //if not just send it
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f003 fa2d 	bl	8008000 <HAL_UART_Transmit_IT>
 8004ba6:	e7e9      	b.n	8004b7c <usart_putc+0x44>

08004ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bac:	480d      	ldr	r0, [pc, #52]	; (8004be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bae:	490e      	ldr	r1, [pc, #56]	; (8004be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bb0:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bb4:	e002      	b.n	8004bbc <LoopCopyDataInit>

08004bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bba:	3304      	adds	r3, #4

08004bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc0:	d3f9      	bcc.n	8004bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bc2:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bc4:	4c0b      	ldr	r4, [pc, #44]	; (8004bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bc8:	e001      	b.n	8004bce <LoopFillZerobss>

08004bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bcc:	3204      	adds	r2, #4

08004bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd0:	d3fb      	bcc.n	8004bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bd2:	f7ff ff51 	bl	8004a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bd6:	f003 fc6f 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bda:	f7fd fcc1 	bl	8002560 <main>
  bx  lr    
 8004bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004be8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004bec:	0800f810 	.word	0x0800f810
  ldr r2, =_sbss
 8004bf0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004bf4:	20000ec0 	.word	0x20000ec0

08004bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bf8:	e7fe      	b.n	8004bf8 <ADC_IRQHandler>
	...

08004bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bfe:	f240 0270 	movw	r2, #112	; 0x70
 8004c02:	f240 0374 	movw	r3, #116	; 0x74
 8004c06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
{
 8004c12:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c18:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c1c:	fbb2 f0f0 	udiv	r0, r2, r0
 8004c20:	f000 fb22 	bl	8005268 <HAL_SYSTICK_Config>
 8004c24:	b908      	cbnz	r0, 8004c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c26:	2d0f      	cmp	r5, #15
 8004c28:	d901      	bls.n	8004c2e <HAL_InitTick+0x32>
    return HAL_ERROR;
 8004c2a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c30:	4602      	mov	r2, r0
 8004c32:	4629      	mov	r1, r5
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	f000 fac6 	bl	80051c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c3c:	f240 0378 	movw	r3, #120	; 0x78
 8004c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c44:	4620      	mov	r0, r4
 8004c46:	601d      	str	r5, [r3, #0]
}
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
 8004c4a:	bf00      	nop

08004c4c <HAL_Init>:
{
 8004c4c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c52:	f2c4 0302 	movt	r3, #16386	; 0x4002
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c56:	2003      	movs	r0, #3
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c70:	f000 fa98 	bl	80051a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c74:	200f      	movs	r0, #15
 8004c76:	f7ff ffc1 	bl	8004bfc <HAL_InitTick>
  HAL_MspInit();
 8004c7a:	f7fe fc87 	bl	800358c <HAL_MspInit>
}
 8004c7e:	2000      	movs	r0, #0
 8004c80:	bd08      	pop	{r3, pc}
 8004c82:	bf00      	nop

08004c84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004c84:	f640 63ac 	movw	r3, #3756	; 0xeac
 8004c88:	f240 0174 	movw	r1, #116	; 0x74
 8004c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c90:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	780a      	ldrb	r2, [r1, #0]
 8004c98:	4402      	add	r2, r0
 8004c9a:	601a      	str	r2, [r3, #0]
}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ca0:	f640 63ac 	movw	r3, #3756	; 0xeac
 8004ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ca8:	6818      	ldr	r0, [r3, #0]
}
 8004caa:	4770      	bx	lr

08004cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004cb0:	f7ff fff6 	bl	8004ca0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004cb8:	d005      	beq.n	8004cc6 <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cba:	f240 0374 	movw	r3, #116	; 0x74
 8004cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cc6:	f7ff ffeb 	bl	8004ca0 <HAL_GetTick>
 8004cca:	1b43      	subs	r3, r0, r5
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d3fa      	bcc.n	8004cc6 <HAL_Delay+0x1a>
  {
  }
}
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
 8004cd2:	bf00      	nop

08004cd4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f000 80a4 	beq.w	8004e22 <HAL_ADC_Init+0x14e>
{
 8004cda:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cdc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004cde:	4604      	mov	r4, r0
 8004ce0:	b13d      	cbz	r5, 8004cf2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce4:	06db      	lsls	r3, r3, #27
 8004ce6:	d50c      	bpl.n	8004d02 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8004cee:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004cf2:	f7fe fc67 	bl	80035c4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004cf6:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004cfa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cfe:	06db      	lsls	r3, r3, #27
 8004d00:	d4f2      	bmi.n	8004ce8 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d08:	f44f 520c 	mov.w	r2, #8960	; 0x2300
    ADC_STATE_CLR_SET(hadc->State,
 8004d0c:	f023 0302 	bic.w	r3, r3, #2
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d10:	f2c4 0201 	movt	r2, #16385	; 0x4001
    ADC_STATE_CLR_SET(hadc->State,
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d1a:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d1c:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d1e:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004d22:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d24:	6851      	ldr	r1, [r2, #4]
 8004d26:	6860      	ldr	r0, [r4, #4]
 8004d28:	4301      	orrs	r1, r0
 8004d2a:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d2c:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d2e:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d30:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d36:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004d3e:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d40:	6859      	ldr	r1, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d42:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d44:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8004d48:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	4302      	orrs	r2, r0
 8004d4e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004d56:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d58:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f6c0 7000 	movt	r0, #3840	; 0xf00
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d62:	432a      	orrs	r2, r5
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d64:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d66:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d68:	d052      	beq.n	8004e10 <HAL_ADC_Init+0x13c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d6a:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d6e:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8004d72:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	4311      	orrs	r1, r2
 8004d78:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d7a:	6899      	ldr	r1, [r3, #8]
 8004d7c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004d80:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	432a      	orrs	r2, r5
 8004d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	f022 0202 	bic.w	r2, r2, #2
 8004d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	7e21      	ldrb	r1, [r4, #24]
 8004d94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004d98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d9a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	d041      	beq.n	8004e26 <HAL_ADC_Init+0x152>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004da2:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004da4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004da6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004daa:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dac:	6858      	ldr	r0, [r3, #4]
 8004dae:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004db2:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004db4:	1e51      	subs	r1, r2, #1
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004dbc:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dc0:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dc2:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004dc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	3901      	subs	r1, #1
 8004dce:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004dd4:	6899      	ldr	r1, [r3, #8]
 8004dd6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004dda:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004de2:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004de6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004de8:	6899      	ldr	r1, [r3, #8]
 8004dea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004dee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004df0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004df2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004df4:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004df8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004dfa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e7b2      	b.n	8004d88 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8004e22:	2001      	movs	r0, #1
}
 8004e24:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	e7c6      	b.n	8004dbe <HAL_ADC_Init+0xea>

08004e30 <HAL_ADC_Start_DMA>:
{
 8004e30:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004e32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004e36:	b082      	sub	sp, #8
 8004e38:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8004e3a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004e3c:	f04f 0000 	mov.w	r0, #0
 8004e40:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004e42:	f000 80aa 	beq.w	8004f9a <HAL_ADC_Start_DMA+0x16a>
 8004e46:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e48:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8004e4a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e4e:	68b3      	ldr	r3, [r6, #8]
 8004e50:	07db      	lsls	r3, r3, #31
 8004e52:	d41a      	bmi.n	8004e8a <HAL_ADC_Start_DMA+0x5a>
    __HAL_ADC_ENABLE(hadc);
 8004e54:	68b3      	ldr	r3, [r6, #8]
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e5c:	f240 0370 	movw	r3, #112	; 0x70
 8004e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f64d 6383 	movw	r3, #56963	; 0xde83
 8004e6a:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8004e6e:	fba3 3000 	umull	r3, r0, r3, r0
 8004e72:	0c80      	lsrs	r0, r0, #18
 8004e74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004e78:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	b12b      	cbz	r3, 8004e8a <HAL_ADC_Start_DMA+0x5a>
      counter--;
 8004e7e:	9c01      	ldr	r4, [sp, #4]
 8004e80:	3c01      	subs	r4, #1
 8004e82:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8004e84:	9801      	ldr	r0, [sp, #4]
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d1f9      	bne.n	8004e7e <HAL_ADC_Start_DMA+0x4e>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004e8a:	68b3      	ldr	r3, [r6, #8]
 8004e8c:	05dc      	lsls	r4, r3, #23
 8004e8e:	d503      	bpl.n	8004e98 <HAL_ADC_Start_DMA+0x68>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004e90:	68b3      	ldr	r3, [r6, #8]
 8004e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e96:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e98:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004e9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e9c:	f010 0001 	ands.w	r0, r0, #1
 8004ea0:	d062      	beq.n	8004f68 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8004ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004eb0:	6873      	ldr	r3, [r6, #4]
 8004eb2:	0558      	lsls	r0, r3, #21
 8004eb4:	d505      	bpl.n	8004ec2 <HAL_ADC_Start_DMA+0x92>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004eb6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ec0:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ec2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ec4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ec6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004eca:	bf1c      	itt	ne
 8004ecc:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8004ece:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004ed2:	646b      	str	r3, [r5, #68]	; 0x44
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ed8:	f644 71d1 	movw	r1, #20433	; 0x4fd1
 8004edc:	f6c0 0100 	movt	r1, #2048	; 0x800
    __HAL_UNLOCK(hadc);   
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ee6:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ee8:	f644 71a9 	movw	r1, #20393	; 0x4fa9
 8004eec:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004ef0:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ef2:	f644 71b9 	movw	r1, #20409	; 0x4fb9
 8004ef6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004efa:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004efc:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8004f00:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f02:	6871      	ldr	r1, [r6, #4]
 8004f04:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004f08:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004f0a:	68b1      	ldr	r1, [r6, #8]
 8004f0c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004f10:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f12:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8004f16:	f000 fac7 	bl	80054a8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f1a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8004f1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f22:	6858      	ldr	r0, [r3, #4]
 8004f24:	f010 001f 	ands.w	r0, r0, #31
 8004f28:	d127      	bne.n	8004f7a <HAL_ADC_Start_DMA+0x14a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f2a:	682a      	ldr	r2, [r5, #0]
 8004f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f30:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f34:	428a      	cmp	r2, r1
 8004f36:	d00e      	beq.n	8004f56 <HAL_ADC_Start_DMA+0x126>
 8004f38:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8004f3c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d02d      	beq.n	8004fa0 <HAL_ADC_Start_DMA+0x170>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f44:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8004f48:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f4c:	428a      	cmp	r2, r1
 8004f4e:	d112      	bne.n	8004f76 <HAL_ADC_Start_DMA+0x146>
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	06db      	lsls	r3, r3, #27
 8004f54:	d40f      	bmi.n	8004f76 <HAL_ADC_Start_DMA+0x146>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f56:	6890      	ldr	r0, [r2, #8]
 8004f58:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004f5c:	d114      	bne.n	8004f88 <HAL_ADC_Start_DMA+0x158>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f5e:	6893      	ldr	r3, [r2, #8]
 8004f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f64:	6093      	str	r3, [r2, #8]
 8004f66:	e006      	b.n	8004f76 <HAL_ADC_Start_DMA+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	646b      	str	r3, [r5, #68]	; 0x44
}
 8004f76:	b002      	add	sp, #8
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f7a:	682a      	ldr	r2, [r5, #0]
 8004f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d002      	beq.n	8004f8e <HAL_ADC_Start_DMA+0x15e>
  return HAL_OK;
 8004f88:	2000      	movs	r0, #0
}
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f8e:	6890      	ldr	r0, [r2, #8]
 8004f90:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004f94:	d0e3      	beq.n	8004f5e <HAL_ADC_Start_DMA+0x12e>
  return HAL_OK;
 8004f96:	4620      	mov	r0, r4
 8004f98:	e7ed      	b.n	8004f76 <HAL_ADC_Start_DMA+0x146>
  __HAL_LOCK(hadc);
 8004f9a:	2002      	movs	r0, #2
}
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	06d9      	lsls	r1, r3, #27
 8004fa4:	d0d7      	beq.n	8004f56 <HAL_ADC_Start_DMA+0x126>
 8004fa6:	e7e6      	b.n	8004f76 <HAL_ADC_Start_DMA+0x146>

08004fa8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004fa8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004faa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004fac:	f7fe fdb4 	bl	8003b18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb0:	bd08      	pop	{r3, pc}
 8004fb2:	bf00      	nop

08004fb4 <HAL_ADC_ErrorCallback>:
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fb8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004fba:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fc8:	f7ff fff4 	bl	8004fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fcc:	bd08      	pop	{r3, pc}
 8004fce:	bf00      	nop

08004fd0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8004fd8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fdc:	d123      	bne.n	8005026 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fe2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fe6:	688a      	ldr	r2, [r1, #8]
 8004fe8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004fec:	d117      	bne.n	800501e <ADC_DMAConvCplt+0x4e>
 8004fee:	7e1a      	ldrb	r2, [r3, #24]
 8004ff0:	b9aa      	cbnz	r2, 800501e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ff2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ff4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004ff8:	d002      	beq.n	8005000 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ffa:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ffc:	0550      	lsls	r0, r2, #21
 8004ffe:	d40e      	bmi.n	800501e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005000:	684a      	ldr	r2, [r1, #4]
 8005002:	f022 0220 	bic.w	r2, r2, #32
 8005006:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005012:	04d1      	lsls	r1, r2, #19
 8005014:	d403      	bmi.n	800501e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f8f8 	bl	8004214 <HAL_ADC_ConvCpltCallback>
}
 8005024:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005026:	06d2      	lsls	r2, r2, #27
 8005028:	d404      	bmi.n	8005034 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ffbd 	bl	8004fb4 <HAL_ADC_ErrorCallback>
}
 800503a:	bd10      	pop	{r4, pc}

0800503c <HAL_ADC_ConfigChannel>:
{
 800503c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800503e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005042:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8005044:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005046:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005048:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800504a:	f000 80a8 	beq.w	800519e <HAL_ADC_ConfigChannel+0x162>
 800504e:	2301      	movs	r3, #1
 8005050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005054:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005056:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005058:	2c09      	cmp	r4, #9
 800505a:	d830      	bhi.n	80050be <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800505c:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800505e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005060:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8005064:	f04f 0c07 	mov.w	ip, #7
 8005068:	fa0c fc0e 	lsl.w	ip, ip, lr
 800506c:	ea25 050c 	bic.w	r5, r5, ip
 8005070:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005072:	691d      	ldr	r5, [r3, #16]
 8005074:	fa02 f20e 	lsl.w	r2, r2, lr
 8005078:	432a      	orrs	r2, r5
 800507a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800507c:	684a      	ldr	r2, [r1, #4]
 800507e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005080:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8005082:	d832      	bhi.n	80050ea <HAL_ADC_ConfigChannel+0xae>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005084:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800508a:	3a05      	subs	r2, #5
 800508c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005090:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005094:	fa0e f202 	lsl.w	r2, lr, r2
 8005098:	ea21 0202 	bic.w	r2, r1, r2
 800509c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	ea4c 0202 	orr.w	r2, ip, r2
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050aa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d033      	beq.n	800511a <HAL_ADC_ConfigChannel+0xde>
  __HAL_UNLOCK(hadc);
 80050b2:	2300      	movs	r3, #0
 80050b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80050b8:	4618      	mov	r0, r3
}
 80050ba:	b003      	add	sp, #12
 80050bc:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050be:	fa1f fc84 	uxth.w	ip, r4
 80050c2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80050c6:	68dd      	ldr	r5, [r3, #12]
 80050c8:	f1a2 0e1e 	sub.w	lr, r2, #30
 80050cc:	2207      	movs	r2, #7
 80050ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80050d2:	ea25 0202 	bic.w	r2, r5, r2
 80050d6:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050d8:	688a      	ldr	r2, [r1, #8]
 80050da:	68dd      	ldr	r5, [r3, #12]
 80050dc:	fa02 f20e 	lsl.w	r2, r2, lr
 80050e0:	432a      	orrs	r2, r5
 80050e2:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80050e4:	684a      	ldr	r2, [r1, #4]
 80050e6:	2a06      	cmp	r2, #6
 80050e8:	d9cc      	bls.n	8005084 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 80050ea:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 80050f0:	d83d      	bhi.n	800516e <HAL_ADC_ConfigChannel+0x132>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050f4:	3a23      	subs	r2, #35	; 0x23
 80050f6:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050f8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050fc:	fa05 f202 	lsl.w	r2, r5, r2
 8005100:	ea21 0202 	bic.w	r2, r1, r2
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005108:	ea4c 0202 	orr.w	r2, ip, r2
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800510e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005112:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005116:	4293      	cmp	r3, r2
 8005118:	d1cb      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
 800511a:	2c12      	cmp	r4, #18
 800511c:	d036      	beq.n	800518c <HAL_ADC_ConfigChannel+0x150>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800511e:	f1a4 0310 	sub.w	r3, r4, #16
 8005122:	2b01      	cmp	r3, #1
 8005124:	d8c5      	bhi.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005126:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800512a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800512e:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005136:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005138:	d1bb      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800513a:	f240 0270 	movw	r2, #112	; 0x70
 800513e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005142:	f64d 6183 	movw	r1, #56963	; 0xde83
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	f2c4 311b 	movt	r1, #17179	; 0x431b
 800514c:	fba1 2303 	umull	r2, r3, r1, r3
 8005150:	0c9b      	lsrs	r3, r3, #18
 8005152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0a8      	beq.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
        counter--;
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	3b01      	subs	r3, #1
 8005164:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f9      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x124>
 800516c:	e7a1      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800516e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005170:	3a41      	subs	r2, #65	; 0x41
 8005172:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005174:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005178:	fa05 f202 	lsl.w	r2, r5, r2
 800517c:	ea21 0202 	bic.w	r2, r1, r2
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	ea4c 0202 	orr.w	r2, ip, r2
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
 800518a:	e78c      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800518c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8005190:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800519a:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800519c:	e789      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x76>
  __HAL_LOCK(hadc);
 800519e:	2002      	movs	r0, #2
}
 80051a0:	b003      	add	sp, #12
 80051a2:	bd30      	pop	{r4, r5, pc}

080051a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80051a8:	f2ce 0200 	movt	r2, #57344	; 0xe000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051ac:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051ae:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051b0:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051b8:	4001      	ands	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051ba:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 80051bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80051c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80051c6:	4770      	bx	lr

080051c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80051cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051d0:	b500      	push	{lr}
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d8:	f1c3 0e07 	rsb	lr, r3, #7
 80051dc:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e0:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e4:	bf28      	it	cs
 80051e6:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ea:	f1bc 0f06 	cmp.w	ip, #6
 80051ee:	d91b      	bls.n	8005228 <HAL_NVIC_SetPriority+0x60>
 80051f0:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f2:	f04f 3cff 	mov.w	ip, #4294967295
 80051f6:	fa0c fc03 	lsl.w	ip, ip, r3
 80051fa:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fe:	f04f 3cff 	mov.w	ip, #4294967295
 8005202:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005206:	ea21 010c 	bic.w	r1, r1, ip
 800520a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800520c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800520e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005212:	db0c      	blt.n	800522e <HAL_NVIC_SetPriority+0x66>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005214:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005218:	0109      	lsls	r1, r1, #4
 800521a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800521e:	b2c9      	uxtb	r1, r1
 8005220:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005224:	f85d fb04 	ldr.w	pc, [sp], #4
 8005228:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522a:	4613      	mov	r3, r2
 800522c:	e7e7      	b.n	80051fe <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522e:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8005232:	f000 000f 	and.w	r0, r0, #15
 8005236:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800523a:	0109      	lsls	r1, r1, #4
 800523c:	4403      	add	r3, r0
 800523e:	b2c9      	uxtb	r1, r1
 8005240:	7619      	strb	r1, [r3, #24]
 8005242:	f85d fb04 	ldr.w	pc, [sp], #4
 8005246:	bf00      	nop

08005248 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005248:	2800      	cmp	r0, #0
 800524a:	db0b      	blt.n	8005264 <HAL_NVIC_EnableIRQ+0x1c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005250:	0941      	lsrs	r1, r0, #5
 8005252:	2301      	movs	r3, #1
 8005254:	f000 001f 	and.w	r0, r0, #31
 8005258:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800525c:	fa03 f000 	lsl.w	r0, r3, r0
 8005260:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005268:	3801      	subs	r0, #1
 800526a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800526e:	d213      	bcs.n	8005298 <HAL_SYSTICK_Config+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005270:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005274:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005278:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800527c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005280:	b410      	push	{r4}
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005282:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005284:	6158      	str	r0, [r3, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005286:	2407      	movs	r4, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005288:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800528c:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800528e:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005290:	611c      	str	r4, [r3, #16]
   return SysTick_Config(TicksNumb);
}
 8005292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005296:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005298:	2001      	movs	r0, #1
 800529a:	4770      	bx	lr

0800529c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800529c:	b188      	cbz	r0, 80052c2 <HAL_DAC_Init+0x26>
{
 800529e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052a0:	7903      	ldrb	r3, [r0, #4]
 80052a2:	4604      	mov	r4, r0
 80052a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052a8:	b13b      	cbz	r3, 80052ba <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052aa:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80052ac:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052ae:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80052b0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052b2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80052b4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80052b6:	4618      	mov	r0, r3
}
 80052b8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80052ba:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80052bc:	f7fe f9e0 	bl	8003680 <HAL_DAC_MspInit>
 80052c0:	e7f3      	b.n	80052aa <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80052c2:	2001      	movs	r0, #1
}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052c8:	7943      	ldrb	r3, [r0, #5]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d02a      	beq.n	8005324 <HAL_DAC_Start+0x5c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80052ce:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80052d0:	2302      	movs	r3, #2
{
 80052d2:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 80052d4:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80052d6:	6814      	ldr	r4, [r2, #0]
 80052d8:	f001 0c10 	and.w	ip, r1, #16
 80052dc:	2301      	movs	r3, #1
 80052de:	fa03 f30c 	lsl.w	r3, r3, ip
 80052e2:	4323      	orrs	r3, r4
 80052e4:	6013      	str	r3, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 80052e6:	b981      	cbnz	r1, 800530a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80052ee:	2b3c      	cmp	r3, #60	; 0x3c
 80052f0:	d103      	bne.n	80052fa <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80052f2:	6853      	ldr	r3, [r2, #4]
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052fa:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 80052fc:	2201      	movs	r2, #1
 80052fe:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8005300:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 8005302:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005306:	4618      	mov	r0, r3
}
 8005308:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800530a:	6811      	ldr	r1, [r2, #0]
 800530c:	233c      	movs	r3, #60	; 0x3c
 800530e:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8005312:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005316:	4561      	cmp	r1, ip
 8005318:	d1ef      	bne.n	80052fa <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800531a:	6853      	ldr	r3, [r2, #4]
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	6053      	str	r3, [r2, #4]
 8005322:	e7ea      	b.n	80052fa <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8005324:	2002      	movs	r0, #2
}
 8005326:	4770      	bx	lr

08005328 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005328:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800532a:	7940      	ldrb	r0, [r0, #5]
 800532c:	2801      	cmp	r0, #1
 800532e:	d01f      	beq.n	8005370 <HAL_DAC_ConfigChannel+0x48>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005330:	2002      	movs	r0, #2
{
 8005332:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8005334:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005336:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 800533a:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800533c:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 8005340:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005342:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005344:	f640 70fe 	movw	r0, #4094	; 0xffe
 8005348:	4090      	lsls	r0, r2
 800534a:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800534e:	4091      	lsls	r1, r2
 8005350:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005352:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	20c0      	movs	r0, #192	; 0xc0
 8005358:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800535c:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800535e:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005362:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005364:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005366:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005368:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800536a:	4628      	mov	r0, r5
}
 800536c:	bc30      	pop	{r4, r5}
 800536e:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8005370:	2002      	movs	r0, #2
}
 8005372:	4770      	bx	lr

08005374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005378:	f7ff fc92 	bl	8004ca0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800537c:	2c00      	cmp	r4, #0
 800537e:	d05b      	beq.n	8005438 <HAL_DMA_Init+0xc4>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005380:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8005382:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8005384:	2102      	movs	r1, #2
 8005386:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800538a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	4605      	mov	r5, r0
 8005396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005398:	e005      	b.n	80053a6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800539a:	f7ff fc81 	bl	8004ca0 <HAL_GetTick>
 800539e:	1b43      	subs	r3, r0, r5
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d842      	bhi.n	800542a <HAL_DMA_Init+0xb6>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	07d1      	lsls	r1, r2, #31
 80053aa:	d4f6      	bmi.n	800539a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ac:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80053b0:	68e1      	ldr	r1, [r4, #12]
 80053b2:	4302      	orrs	r2, r0
 80053b4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053bc:	432a      	orrs	r2, r5
 80053be:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c0:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80053c2:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c4:	4302      	orrs	r2, r0
 80053c6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c8:	6a21      	ldr	r1, [r4, #32]
 80053ca:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053cc:	f248 013f 	movw	r1, #32831	; 0x803f
 80053d0:	f2cf 0110 	movt	r1, #61456	; 0xf010
 80053d4:	4029      	ands	r1, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d6:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053da:	2904      	cmp	r1, #4
 80053dc:	d02e      	beq.n	800543c <HAL_DMA_Init+0xc8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053e0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053e2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053e6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053e8:	b2d8      	uxtb	r0, r3
 80053ea:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80053ee:	3810      	subs	r0, #16
 80053f0:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  hdma->Instance->FCR = tmp;
 80053f4:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053f6:	f64e 7524 	movw	r5, #61220	; 0xef24
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053fa:	fba2 1200 	umull	r1, r2, r2, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053fe:	f6c0 0500 	movt	r5, #2048	; 0x800
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005402:	0912      	lsrs	r2, r2, #4
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005404:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005408:	5ca9      	ldrb	r1, [r5, r2]
 800540a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800540c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8005410:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005412:	bf88      	it	hi
 8005414:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005416:	223f      	movs	r2, #63	; 0x3f
 8005418:	408a      	lsls	r2, r1
 800541a:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800541c:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800541e:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8005420:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005422:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005424:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005428:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800542a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800542c:	2220      	movs	r2, #32
 800542e:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8005434:	4618      	mov	r0, r3
}
 8005436:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005438:	2001      	movs	r0, #1
}
 800543a:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800543c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8005440:	4329      	orrs	r1, r5
 8005442:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8005444:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005446:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8005448:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800544a:	f021 0107 	bic.w	r1, r1, #7
 800544e:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8005450:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005454:	2d00      	cmp	r5, #0
 8005456:	d0c7      	beq.n	80053e8 <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005458:	b178      	cbz	r0, 800547a <HAL_DMA_Init+0x106>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800545a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800545e:	d016      	beq.n	800548e <HAL_DMA_Init+0x11a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005460:	2a02      	cmp	r2, #2
 8005462:	d903      	bls.n	800546c <HAL_DMA_Init+0xf8>
 8005464:	2a03      	cmp	r2, #3
 8005466:	d1bf      	bne.n	80053e8 <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005468:	01ea      	lsls	r2, r5, #7
 800546a:	d5bd      	bpl.n	80053e8 <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 800546c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800546e:	2240      	movs	r2, #64	; 0x40
 8005470:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005472:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005476:	4618      	mov	r0, r3
}
 8005478:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800547a:	2a01      	cmp	r2, #1
 800547c:	d003      	beq.n	8005486 <HAL_DMA_Init+0x112>
 800547e:	f032 0202 	bics.w	r2, r2, #2
 8005482:	d1b1      	bne.n	80053e8 <HAL_DMA_Init+0x74>
 8005484:	e7f0      	b.n	8005468 <HAL_DMA_Init+0xf4>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005486:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800548a:	d1ad      	bne.n	80053e8 <HAL_DMA_Init+0x74>
 800548c:	e7ee      	b.n	800546c <HAL_DMA_Init+0xf8>
    switch (tmp)
 800548e:	2a03      	cmp	r2, #3
 8005490:	d8aa      	bhi.n	80053e8 <HAL_DMA_Init+0x74>
 8005492:	a001      	add	r0, pc, #4	; (adr r0, 8005498 <HAL_DMA_Init+0x124>)
 8005494:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005498:	0800546d 	.word	0x0800546d
 800549c:	08005469 	.word	0x08005469
 80054a0:	0800546d 	.word	0x0800546d
 80054a4:	08005487 	.word	0x08005487

080054a8 <HAL_DMA_Start_IT>:
{
 80054a8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80054aa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ae:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80054b0:	2c01      	cmp	r4, #1
 80054b2:	d035      	beq.n	8005520 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80054b8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80054bc:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80054be:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80054c2:	d005      	beq.n	80054d0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80054c4:	2300      	movs	r3, #0
 80054c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80054ca:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80054cc:	2002      	movs	r0, #2
}
 80054ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80054d0:	2602      	movs	r6, #2
 80054d2:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054d6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d8:	2600      	movs	r6, #0
 80054da:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054dc:	6826      	ldr	r6, [r4, #0]
 80054de:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80054e2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80054e4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e6:	6883      	ldr	r3, [r0, #8]
 80054e8:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80054ea:	bf0e      	itee	eq
 80054ec:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80054ee:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80054f0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80054f4:	bf08      	it	eq
 80054f6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f8:	233f      	movs	r3, #63	; 0x3f
 80054fa:	4093      	lsls	r3, r2
 80054fc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054fe:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005500:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005502:	f043 0316 	orr.w	r3, r3, #22
 8005506:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005508:	b11a      	cbz	r2, 8005512 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f043 0308 	orr.w	r3, r3, #8
 8005510:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800551a:	6023      	str	r3, [r4, #0]
}
 800551c:	bc70      	pop	{r4, r5, r6}
 800551e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005520:	2002      	movs	r0, #2
}
 8005522:	bc70      	pop	{r4, r5, r6}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <HAL_DMA_Abort>:
{
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800552c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800552e:	f7ff fbb7 	bl	8004ca0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005532:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005536:	2b02      	cmp	r3, #2
 8005538:	d006      	beq.n	8005548 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 800553a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800553e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005542:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8005544:	2001      	movs	r0, #1
}
 8005546:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f022 0216 	bic.w	r2, r2, #22
 8005550:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005558:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800555a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800555c:	4605      	mov	r5, r0
 800555e:	b332      	cbz	r2, 80055ae <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f022 0208 	bic.w	r2, r2, #8
 8005566:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005570:	e005      	b.n	800557e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005572:	f7ff fb95 	bl	8004ca0 <HAL_GetTick>
 8005576:	1b43      	subs	r3, r0, r5
 8005578:	2b05      	cmp	r3, #5
 800557a:	d80f      	bhi.n	800559c <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f013 0301 	ands.w	r3, r3, #1
 8005584:	d1f5      	bne.n	8005572 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005586:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005588:	223f      	movs	r2, #63	; 0x3f
 800558a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800558c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800558e:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005590:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005594:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005598:	4618      	mov	r0, r3
}
 800559a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800559c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800559e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 80055a0:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055a2:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80055a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055a8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d1d5      	bne.n	8005560 <HAL_DMA_Abort+0x38>
 80055b4:	e7d8      	b.n	8005568 <HAL_DMA_Abort+0x40>
 80055b6:	bf00      	nop

080055b8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055b8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d003      	beq.n	80055c8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80055c4:	2001      	movs	r0, #1
 80055c6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80055c8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80055ca:	2305      	movs	r3, #5
 80055cc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 80055d6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80055d8:	6013      	str	r3, [r2, #0]
}
 80055da:	4770      	bx	lr

080055dc <HAL_DMA_IRQHandler>:
{
 80055dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e0:	f240 0270 	movw	r2, #112	; 0x70
{
 80055e4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80055e6:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ec:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80055ee:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80055f2:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055f4:	6815      	ldr	r5, [r2, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055f6:	2208      	movs	r2, #8
 80055f8:	409a      	lsls	r2, r3
 80055fa:	4222      	tst	r2, r4
{
 80055fc:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055fe:	d004      	beq.n	800560a <HAL_DMA_IRQHandler+0x2e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005600:	6801      	ldr	r1, [r0, #0]
 8005602:	680f      	ldr	r7, [r1, #0]
 8005604:	0778      	lsls	r0, r7, #29
 8005606:	f100 808d 	bmi.w	8005724 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	4222      	tst	r2, r4
 8005610:	d004      	beq.n	800561c <HAL_DMA_IRQHandler+0x40>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005612:	f8d8 1000 	ldr.w	r1, [r8]
 8005616:	6949      	ldr	r1, [r1, #20]
 8005618:	0609      	lsls	r1, r1, #24
 800561a:	d47b      	bmi.n	8005714 <HAL_DMA_IRQHandler+0x138>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800561c:	2204      	movs	r2, #4
 800561e:	409a      	lsls	r2, r3
 8005620:	4222      	tst	r2, r4
 8005622:	d004      	beq.n	800562e <HAL_DMA_IRQHandler+0x52>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005624:	f8d8 1000 	ldr.w	r1, [r8]
 8005628:	6809      	ldr	r1, [r1, #0]
 800562a:	078f      	lsls	r7, r1, #30
 800562c:	d46a      	bmi.n	8005704 <HAL_DMA_IRQHandler+0x128>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800562e:	2210      	movs	r2, #16
 8005630:	409a      	lsls	r2, r3
 8005632:	4222      	tst	r2, r4
 8005634:	d004      	beq.n	8005640 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005636:	f8d8 1000 	ldr.w	r1, [r8]
 800563a:	680f      	ldr	r7, [r1, #0]
 800563c:	0738      	lsls	r0, r7, #28
 800563e:	d44c      	bmi.n	80056da <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005640:	2220      	movs	r2, #32
 8005642:	409a      	lsls	r2, r3
 8005644:	4222      	tst	r2, r4
 8005646:	d017      	beq.n	8005678 <HAL_DMA_IRQHandler+0x9c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005648:	f8d8 1000 	ldr.w	r1, [r8]
 800564c:	680c      	ldr	r4, [r1, #0]
 800564e:	06e0      	lsls	r0, r4, #27
 8005650:	d512      	bpl.n	8005678 <HAL_DMA_IRQHandler+0x9c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005652:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005654:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8005658:	2a05      	cmp	r2, #5
 800565a:	d076      	beq.n	800574a <HAL_DMA_IRQHandler+0x16e>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800565c:	680b      	ldr	r3, [r1, #0]
 800565e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005662:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005664:	f000 8093 	beq.w	800578e <HAL_DMA_IRQHandler+0x1b2>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005668:	0319      	lsls	r1, r3, #12
 800566a:	f140 809e 	bpl.w	80057aa <HAL_DMA_IRQHandler+0x1ce>
        if(hdma->XferCpltCallback != NULL)
 800566e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8005672:	b10b      	cbz	r3, 8005678 <HAL_DMA_IRQHandler+0x9c>
          hdma->XferCpltCallback(hdma);
 8005674:	4640      	mov	r0, r8
 8005676:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005678:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800567c:	b353      	cbz	r3, 80056d4 <HAL_DMA_IRQHandler+0xf8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800567e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8005682:	07da      	lsls	r2, r3, #31
 8005684:	d51e      	bpl.n	80056c4 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_DISABLE(hdma);
 8005686:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800568a:	2305      	movs	r3, #5
 800568c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005690:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005692:	f248 11b5 	movw	r1, #33205	; 0x81b5
 8005696:	f6c1 314e 	movt	r1, #6990	; 0x1b4e
 800569a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800569e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a2:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e002      	b.n	80056ae <HAL_DMA_IRQHandler+0xd2>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056a8:	6813      	ldr	r3, [r2, #0]
 80056aa:	07db      	lsls	r3, r3, #31
 80056ac:	d504      	bpl.n	80056b8 <HAL_DMA_IRQHandler+0xdc>
        if (++count > timeout)
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	3301      	adds	r3, #1
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	d9f7      	bls.n	80056a8 <HAL_DMA_IRQHandler+0xcc>
      hdma->State = HAL_DMA_STATE_READY;
 80056b8:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80056ba:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80056bc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80056c0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80056c4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80056c8:	b123      	cbz	r3, 80056d4 <HAL_DMA_IRQHandler+0xf8>
      hdma->XferErrorCallback(hdma);
 80056ca:	4640      	mov	r0, r8
}
 80056cc:	b002      	add	sp, #8
 80056ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80056d2:	4718      	bx	r3
}
 80056d4:	b002      	add	sp, #8
 80056d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056da:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056dc:	680a      	ldr	r2, [r1, #0]
 80056de:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056e2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056e4:	d12a      	bne.n	800573c <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056e6:	05d7      	lsls	r7, r2, #23
 80056e8:	d403      	bmi.n	80056f2 <HAL_DMA_IRQHandler+0x116>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ea:	680a      	ldr	r2, [r1, #0]
 80056ec:	f022 0208 	bic.w	r2, r2, #8
 80056f0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80056f2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	d0a2      	beq.n	8005640 <HAL_DMA_IRQHandler+0x64>
          hdma->XferHalfCpltCallback(hdma);
 80056fa:	4640      	mov	r0, r8
 80056fc:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056fe:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8005702:	e79d      	b.n	8005640 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005704:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005706:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800570a:	f042 0204 	orr.w	r2, r2, #4
 800570e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005712:	e78c      	b.n	800562e <HAL_DMA_IRQHandler+0x52>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005714:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005716:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800571a:	f042 0202 	orr.w	r2, r2, #2
 800571e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005722:	e77b      	b.n	800561c <HAL_DMA_IRQHandler+0x40>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005724:	680f      	ldr	r7, [r1, #0]
 8005726:	f027 0704 	bic.w	r7, r7, #4
 800572a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800572c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800572e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800573a:	e766      	b.n	800560a <HAL_DMA_IRQHandler+0x2e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800573c:	0312      	lsls	r2, r2, #12
 800573e:	d5d8      	bpl.n	80056f2 <HAL_DMA_IRQHandler+0x116>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005740:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8005744:	2a00      	cmp	r2, #0
 8005746:	d1d8      	bne.n	80056fa <HAL_DMA_IRQHandler+0x11e>
 8005748:	e77a      	b.n	8005640 <HAL_DMA_IRQHandler+0x64>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800574a:	680a      	ldr	r2, [r1, #0]
 800574c:	f022 0216 	bic.w	r2, r2, #22
 8005750:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005752:	694a      	ldr	r2, [r1, #20]
 8005754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005758:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800575a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800575e:	b352      	cbz	r2, 80057b6 <HAL_DMA_IRQHandler+0x1da>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005760:	680a      	ldr	r2, [r1, #0]
 8005762:	f022 0208 	bic.w	r2, r2, #8
 8005766:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005768:	223f      	movs	r2, #63	; 0x3f
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800576e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005772:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8005774:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8005776:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005778:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800577c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8005780:	2900      	cmp	r1, #0
 8005782:	d0a7      	beq.n	80056d4 <HAL_DMA_IRQHandler+0xf8>
          hdma->XferAbortCallback(hdma);
 8005784:	4640      	mov	r0, r8
}
 8005786:	b002      	add	sp, #8
 8005788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800578c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800578e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005792:	f47f af6c 	bne.w	800566e <HAL_DMA_IRQHandler+0x92>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005796:	680a      	ldr	r2, [r1, #0]
 8005798:	f022 0210 	bic.w	r2, r2, #16
 800579c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800579e:	2201      	movs	r2, #1
 80057a0:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80057a4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 80057a8:	e761      	b.n	800566e <HAL_DMA_IRQHandler+0x92>
          if(hdma->XferM1CpltCallback != NULL)
 80057aa:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f47f af60 	bne.w	8005674 <HAL_DMA_IRQHandler+0x98>
 80057b4:	e760      	b.n	8005678 <HAL_DMA_IRQHandler+0x9c>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057b6:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d1d0      	bne.n	8005760 <HAL_DMA_IRQHandler+0x184>
 80057be:	e7d3      	b.n	8005768 <HAL_DMA_IRQHandler+0x18c>

080057c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057c4:	2200      	movs	r2, #0
{
 80057c6:	b08d      	sub	sp, #52	; 0x34
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057c8:	4613      	mov	r3, r2
 80057ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057ce:	9302      	str	r3, [sp, #8]
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057ec:	9306      	str	r3, [sp, #24]
 80057ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80057fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005800:	f44f 5670 	mov.w	r6, #15360	; 0x3c00
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005804:	9308      	str	r3, [sp, #32]
 8005806:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800580a:	f2c4 0302 	movt	r3, #16386	; 0x4002
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800580e:	f44f 5b60 	mov.w	fp, #14336	; 0x3800
        temp = EXTI->RTSR;
 8005812:	f2c4 0601 	movt	r6, #16385	; 0x4001
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005816:	9309      	str	r3, [sp, #36]	; 0x24
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005818:	680c      	ldr	r4, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800581a:	9601      	str	r6, [sp, #4]
{
 800581c:	468a      	mov	sl, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800581e:	f2c4 0b02 	movt	fp, #16386	; 0x4002
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005822:	4613      	mov	r3, r2
 8005824:	e005      	b.n	8005832 <HAL_GPIO_Init+0x72>
 8005826:	3301      	adds	r3, #1
 8005828:	2b10      	cmp	r3, #16
 800582a:	f102 0202 	add.w	r2, r2, #2
 800582e:	f000 808e 	beq.w	800594e <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8005832:	2101      	movs	r1, #1
 8005834:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005836:	ea01 0c04 	and.w	ip, r1, r4
    if(iocurrent == ioposition)
 800583a:	43a1      	bics	r1, r4
 800583c:	d1f3      	bne.n	8005826 <HAL_GPIO_Init+0x66>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800583e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005842:	f007 0103 	and.w	r1, r7, #3
 8005846:	1e4d      	subs	r5, r1, #1
 8005848:	2d01      	cmp	r5, #1
 800584a:	f240 8083 	bls.w	8005954 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800584e:	2903      	cmp	r1, #3
 8005850:	f040 80c7 	bne.w	80059e2 <HAL_GPIO_Init+0x222>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005854:	4091      	lsls	r1, r2
 8005856:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8005858:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800585c:	ea0e 0505 	and.w	r5, lr, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005860:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005862:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005866:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005868:	d0dd      	beq.n	8005826 <HAL_GPIO_Init+0x66>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586a:	2100      	movs	r1, #0
 800586c:	910b      	str	r1, [sp, #44]	; 0x2c
 800586e:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005872:	9e02      	ldr	r6, [sp, #8]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005874:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005878:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 800587c:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8005880:	f023 0503 	bic.w	r5, r3, #3
 8005884:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8005888:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800588c:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 8005890:	910b      	str	r1, [sp, #44]	; 0x2c
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005892:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005896:	990b      	ldr	r1, [sp, #44]	; 0x2c
        temp = SYSCFG->EXTICR[position >> 2U];
 8005898:	f8d5 8008 	ldr.w	r8, [r5, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800589c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80058a0:	210f      	movs	r1, #15
 80058a2:	fa01 f10e 	lsl.w	r1, r1, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058a6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058a8:	ea28 0101 	bic.w	r1, r8, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ac:	d025      	beq.n	80058fa <HAL_GPIO_Init+0x13a>
 80058ae:	9e04      	ldr	r6, [sp, #16]
 80058b0:	42b0      	cmp	r0, r6
 80058b2:	f000 809a 	beq.w	80059ea <HAL_GPIO_Init+0x22a>
 80058b6:	9e05      	ldr	r6, [sp, #20]
 80058b8:	42b0      	cmp	r0, r6
 80058ba:	f000 809d 	beq.w	80059f8 <HAL_GPIO_Init+0x238>
 80058be:	9e06      	ldr	r6, [sp, #24]
 80058c0:	42b0      	cmp	r0, r6
 80058c2:	f000 80a0 	beq.w	8005a06 <HAL_GPIO_Init+0x246>
 80058c6:	9e07      	ldr	r6, [sp, #28]
 80058c8:	42b0      	cmp	r0, r6
 80058ca:	f000 80a3 	beq.w	8005a14 <HAL_GPIO_Init+0x254>
 80058ce:	9e08      	ldr	r6, [sp, #32]
 80058d0:	42b0      	cmp	r0, r6
 80058d2:	f000 80a6 	beq.w	8005a22 <HAL_GPIO_Init+0x262>
 80058d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058d8:	42b0      	cmp	r0, r6
 80058da:	f000 80a9 	beq.w	8005a30 <HAL_GPIO_Init+0x270>
 80058de:	f44f 58e0 	mov.w	r8, #7168	; 0x1c00
 80058e2:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80058e6:	4540      	cmp	r0, r8
 80058e8:	bf0c      	ite	eq
 80058ea:	f04f 0807 	moveq.w	r8, #7
 80058ee:	f04f 0808 	movne.w	r8, #8
 80058f2:	fa08 fe0e 	lsl.w	lr, r8, lr
 80058f6:	ea41 010e 	orr.w	r1, r1, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058fa:	60a9      	str	r1, [r5, #8]
        temp = EXTI->RTSR;
 80058fc:	9901      	ldr	r1, [sp, #4]
 80058fe:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005900:	02fe      	lsls	r6, r7, #11
        temp &= ~((uint32_t)iocurrent);
 8005902:	ea6f 050c 	mvn.w	r5, ip
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8005906:	9e01      	ldr	r6, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8005908:	bf54      	ite	pl
 800590a:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800590c:	ea4c 0101 	orrmi.w	r1, ip, r1
        EXTI->RTSR = temp;
 8005910:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8005912:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005914:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005918:	bf0c      	ite	eq
 800591a:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800591c:	ea4c 0101 	orrne.w	r1, ip, r1
        }
        EXTI->FTSR = temp;
 8005920:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8005922:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005924:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005928:	bf0c      	ite	eq
 800592a:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800592c:	ea4c 0101 	orrne.w	r1, ip, r1
        }
        EXTI->EMR = temp;
 8005930:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005932:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005934:	03ff      	lsls	r7, r7, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005936:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800593a:	bf54      	ite	pl
 800593c:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 800593e:	ea4c 0101 	orrmi.w	r1, ip, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005942:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8005944:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005946:	f102 0202 	add.w	r2, r2, #2
 800594a:	f47f af72 	bne.w	8005832 <HAL_GPIO_Init+0x72>
      }
    }
  }
}
 800594e:	b00d      	add	sp, #52	; 0x34
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005954:	f8da 500c 	ldr.w	r5, [sl, #12]
        temp = GPIOx->OSPEEDR; 
 8005958:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800595c:	fa05 f902 	lsl.w	r9, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005960:	2503      	movs	r5, #3
 8005962:	fa05 fe02 	lsl.w	lr, r5, r2
 8005966:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800596a:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->OSPEEDR = temp;
 800596e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8005970:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005974:	ea6f 050e 	mvn.w	r5, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005978:	f3c7 1e00 	ubfx	lr, r7, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800597c:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005980:	fa0e fe03 	lsl.w	lr, lr, r3
 8005984:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005988:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800598c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005990:	f8da 6008 	ldr.w	r6, [sl, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005994:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005998:	fa06 f802 	lsl.w	r8, r6, r2
 800599c:	ea48 0e0e 	orr.w	lr, r8, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a0:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80059a2:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a6:	fa01 f102 	lsl.w	r1, r1, r2
 80059aa:	f47f af55 	bne.w	8005858 <HAL_GPIO_Init+0x98>
        temp = GPIOx->AFR[position >> 3U];
 80059ae:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80059b2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059b6:	f003 0907 	and.w	r9, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80059ba:	f8d8 6020 	ldr.w	r6, [r8, #32]
 80059be:	9603      	str	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c0:	f8da 6010 	ldr.w	r6, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c8:	fa06 fe09 	lsl.w	lr, r6, r9
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059cc:	260f      	movs	r6, #15
 80059ce:	fa06 f909 	lsl.w	r9, r6, r9
 80059d2:	9e03      	ldr	r6, [sp, #12]
 80059d4:	ea26 0909 	bic.w	r9, r6, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059d8:	ea4e 0909 	orr.w	r9, lr, r9
        GPIOx->AFR[position >> 3U] = temp;
 80059dc:	f8c8 9020 	str.w	r9, [r8, #32]
 80059e0:	e73a      	b.n	8005858 <HAL_GPIO_Init+0x98>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059e2:	2503      	movs	r5, #3
 80059e4:	4095      	lsls	r5, r2
 80059e6:	43ed      	mvns	r5, r5
 80059e8:	e7d0      	b.n	800598c <HAL_GPIO_Init+0x1cc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ea:	f04f 0801 	mov.w	r8, #1
 80059ee:	fa08 fe0e 	lsl.w	lr, r8, lr
 80059f2:	ea41 010e 	orr.w	r1, r1, lr
 80059f6:	e780      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 80059f8:	f04f 0802 	mov.w	r8, #2
 80059fc:	fa08 fe0e 	lsl.w	lr, r8, lr
 8005a00:	ea41 010e 	orr.w	r1, r1, lr
 8005a04:	e779      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 8005a06:	f04f 0803 	mov.w	r8, #3
 8005a0a:	fa08 fe0e 	lsl.w	lr, r8, lr
 8005a0e:	ea41 010e 	orr.w	r1, r1, lr
 8005a12:	e772      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 8005a14:	f04f 0804 	mov.w	r8, #4
 8005a18:	fa08 fe0e 	lsl.w	lr, r8, lr
 8005a1c:	ea41 010e 	orr.w	r1, r1, lr
 8005a20:	e76b      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 8005a22:	f04f 0805 	mov.w	r8, #5
 8005a26:	fa08 fe0e 	lsl.w	lr, r8, lr
 8005a2a:	ea41 010e 	orr.w	r1, r1, lr
 8005a2e:	e764      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 8005a30:	f04f 0806 	mov.w	r8, #6
 8005a34:	fa08 fe0e 	lsl.w	lr, r8, lr
 8005a38:	ea41 010e 	orr.w	r1, r1, lr
 8005a3c:	e75d      	b.n	80058fa <HAL_GPIO_Init+0x13a>
 8005a3e:	bf00      	nop

08005a40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a40:	b902      	cbnz	r2, 8005a44 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a42:	0409      	lsls	r1, r1, #16
 8005a44:	6181      	str	r1, [r0, #24]
  }
}
 8005a46:	4770      	bx	lr

08005a48 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a48:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a4a:	ea01 0203 	and.w	r2, r1, r3
 8005a4e:	ea21 0103 	bic.w	r1, r1, r3
 8005a52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a56:	6181      	str	r1, [r0, #24]
}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a60:	6804      	ldr	r4, [r0, #0]
{
 8005a62:	b083      	sub	sp, #12
 8005a64:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a66:	6823      	ldr	r3, [r4, #0]
{
 8005a68:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8005a6c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8005a74:	4606      	mov	r6, r0
 8005a76:	468a      	mov	sl, r1
 8005a78:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7a:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005a7c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005a80:	d135      	bne.n	8005aee <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a82:	6965      	ldr	r5, [r4, #20]
 8005a84:	07e8      	lsls	r0, r5, #31
 8005a86:	d5fc      	bpl.n	8005a82 <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a88:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8005a8c:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005a8e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005a92:	d003      	beq.n	8005a9c <I2C_RequestMemoryWrite+0x40>
 8005a94:	e04e      	b.n	8005b34 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a96:	6961      	ldr	r1, [r4, #20]
 8005a98:	054d      	lsls	r5, r1, #21
 8005a9a:	d45c      	bmi.n	8005b56 <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9c:	6961      	ldr	r1, [r4, #20]
 8005a9e:	078b      	lsls	r3, r1, #30
 8005aa0:	d5f9      	bpl.n	8005a96 <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6963      	ldr	r3, [r4, #20]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	69a3      	ldr	r3, [r4, #24]
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005ab4:	f040 8087 	bne.w	8005bc6 <I2C_RequestMemoryWrite+0x16a>
 8005ab8:	6963      	ldr	r3, [r4, #20]
 8005aba:	061a      	lsls	r2, r3, #24
 8005abc:	d463      	bmi.n	8005b86 <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005abe:	6963      	ldr	r3, [r4, #20]
 8005ac0:	055b      	lsls	r3, r3, #21
 8005ac2:	d5f9      	bpl.n	8005ab8 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ac6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005acc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ad0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad8:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ada:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ade:	f043 0304 	orr.w	r3, r3, #4
 8005ae2:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d066      	beq.n	8005bb8 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 8005aea:	2001      	movs	r0, #1
 8005aec:	e01f      	b.n	8005b2e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	07d9      	lsls	r1, r3, #31
 8005af2:	d4c9      	bmi.n	8005a88 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af4:	f7ff f8d4 	bl	8004ca0 <HAL_GetTick>
 8005af8:	eba0 000b 	sub.w	r0, r0, fp
 8005afc:	4581      	cmp	r9, r0
 8005afe:	d304      	bcc.n	8005b0a <I2C_RequestMemoryWrite+0xae>
 8005b00:	f1b9 0f00 	cmp.w	r9, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b06:	6834      	ldr	r4, [r6, #0]
 8005b08:	e7b8      	b.n	8005a7c <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b0a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b0c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b0e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b10:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b14:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b18:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b1a:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8005b1c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	f042 0220 	orr.w	r2, r2, #32
 8005b24:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b26:	680b      	ldr	r3, [r1, #0]
 8005b28:	05dc      	lsls	r4, r3, #23
 8005b2a:	d435      	bmi.n	8005b98 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8005b2c:	2003      	movs	r0, #3
}
 8005b2e:	b003      	add	sp, #12
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b34:	6963      	ldr	r3, [r4, #20]
 8005b36:	0798      	lsls	r0, r3, #30
 8005b38:	d4b3      	bmi.n	8005aa2 <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b3a:	6963      	ldr	r3, [r4, #20]
 8005b3c:	055a      	lsls	r2, r3, #21
 8005b3e:	d40a      	bmi.n	8005b56 <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b40:	f7ff f8ae 	bl	8004ca0 <HAL_GetTick>
 8005b44:	eba0 000b 	sub.w	r0, r0, fp
 8005b48:	4581      	cmp	r9, r0
 8005b4a:	d34e      	bcc.n	8005bea <I2C_RequestMemoryWrite+0x18e>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	d04b      	beq.n	8005bea <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b52:	6834      	ldr	r4, [r6, #0]
 8005b54:	e79b      	b.n	8005a8e <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b5c:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b60:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b66:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b68:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b72:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005b74:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b78:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8005b7c:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b7e:	6433      	str	r3, [r6, #64]	; 0x40
}
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b86:	f1b8 0f01 	cmp.w	r8, #1
 8005b8a:	d109      	bne.n	8005ba0 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8c:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 8005b8e:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	6127      	str	r7, [r4, #16]
}
 8005b92:	b003      	add	sp, #12
 8005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b9c:	6433      	str	r3, [r6, #64]	; 0x40
 8005b9e:	e7c5      	b.n	8005b2c <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ba0:	0a3b      	lsrs	r3, r7, #8
 8005ba2:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005ba8:	d12e      	bne.n	8005c08 <I2C_RequestMemoryWrite+0x1ac>
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	0619      	lsls	r1, r3, #24
 8005bae:	d4ed      	bmi.n	8005b8c <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb0:	6963      	ldr	r3, [r4, #20]
 8005bb2:	055a      	lsls	r2, r3, #21
 8005bb4:	d5f9      	bpl.n	8005baa <I2C_RequestMemoryWrite+0x14e>
 8005bb6:	e785      	b.n	8005ac4 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb8:	6832      	ldr	r2, [r6, #0]
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8005bc0:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e7b3      	b.n	8005b2e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc6:	6963      	ldr	r3, [r4, #20]
 8005bc8:	061d      	lsls	r5, r3, #24
 8005bca:	d4dc      	bmi.n	8005b86 <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bcc:	6963      	ldr	r3, [r4, #20]
 8005bce:	0559      	lsls	r1, r3, #21
 8005bd0:	f53f af78 	bmi.w	8005ac4 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7ff f864 	bl	8004ca0 <HAL_GetTick>
 8005bd8:	eba0 000b 	sub.w	r0, r0, fp
 8005bdc:	4581      	cmp	r9, r0
 8005bde:	d325      	bcc.n	8005c2c <I2C_RequestMemoryWrite+0x1d0>
 8005be0:	f1b9 0f00 	cmp.w	r9, #0
 8005be4:	d022      	beq.n	8005c2c <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be6:	6834      	ldr	r4, [r6, #0]
 8005be8:	e762      	b.n	8005ab0 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bea:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bec:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005bfa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bfe:	f043 0320 	orr.w	r3, r3, #32
 8005c02:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8005c04:	2001      	movs	r0, #1
 8005c06:	e792      	b.n	8005b2e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c08:	6963      	ldr	r3, [r4, #20]
 8005c0a:	061b      	lsls	r3, r3, #24
 8005c0c:	d4be      	bmi.n	8005b8c <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c0e:	6963      	ldr	r3, [r4, #20]
 8005c10:	0558      	lsls	r0, r3, #21
 8005c12:	f53f af57 	bmi.w	8005ac4 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7ff f843 	bl	8004ca0 <HAL_GetTick>
 8005c1a:	eba0 000b 	sub.w	r0, r0, fp
 8005c1e:	4581      	cmp	r9, r0
 8005c20:	d304      	bcc.n	8005c2c <I2C_RequestMemoryWrite+0x1d0>
 8005c22:	f1b9 0f00 	cmp.w	r9, #0
 8005c26:	d001      	beq.n	8005c2c <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c28:	6834      	ldr	r4, [r6, #0]
 8005c2a:	e7bb      	b.n	8005ba4 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c2e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c30:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c32:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c36:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005c3c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	f043 0320 	orr.w	r3, r3, #32
 8005c44:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005c46:	e74d      	b.n	8005ae4 <I2C_RequestMemoryWrite+0x88>

08005c48 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f000 80cc 	beq.w	8005de6 <HAL_I2C_Init+0x19e>
{
 8005c4e:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c54:	4604      	mov	r4, r0
 8005c56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 80ab 	beq.w	8005db6 <HAL_I2C_Init+0x16e>
  __HAL_I2C_DISABLE(hi2c);
 8005c60:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c62:	2224      	movs	r2, #36	; 0x24
 8005c64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c7e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c80:	f001 fbe2 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c84:	6865      	ldr	r5, [r4, #4]
 8005c86:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8005c8a:	f2c0 0301 	movt	r3, #1
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	d856      	bhi.n	8005d40 <HAL_I2C_Init+0xf8>
 8005c92:	f248 437f 	movw	r3, #33919	; 0x847f
 8005c96:	f2c0 031e 	movt	r3, #30
 8005c9a:	4298      	cmp	r0, r3
 8005c9c:	f240 8089 	bls.w	8005db2 <HAL_I2C_Init+0x16a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ca0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005ca2:	f64d 6e83 	movw	lr, #56963	; 0xde83
 8005ca6:	f2c4 3e1b 	movt	lr, #17179	; 0x431b
 8005caa:	fbae 3e00 	umull	r3, lr, lr, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cae:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cb0:	6850      	ldr	r0, [r2, #4]
 8005cb2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8005cb6:	ea40 409e 	orr.w	r0, r0, lr, lsr #18
 8005cba:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005cbc:	ea4f 419e 	mov.w	r1, lr, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cc0:	f101 0c01 	add.w	ip, r1, #1
 8005cc4:	6a11      	ldr	r1, [r2, #32]
 8005cc6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005cca:	ea41 010c 	orr.w	r1, r1, ip
 8005cce:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cd0:	69d1      	ldr	r1, [r2, #28]
 8005cd2:	006d      	lsls	r5, r5, #1
 8005cd4:	fbb3 f3f5 	udiv	r3, r3, r5
 8005cd8:	f640 75fc 	movw	r5, #4092	; 0xffc
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005ce2:	422b      	tst	r3, r5
 8005ce4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005ce8:	d16a      	bne.n	8005dc0 <HAL_I2C_Init+0x178>
 8005cea:	2304      	movs	r3, #4
 8005cec:	430b      	orrs	r3, r1
 8005cee:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cf0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	4303      	orrs	r3, r0
 8005cf8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d00:	6891      	ldr	r1, [r2, #8]
 8005d02:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005d06:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005d0a:	4303      	orrs	r3, r0
 8005d0c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d14:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005d18:	68d1      	ldr	r1, [r2, #12]
 8005d1a:	4303      	orrs	r3, r0
 8005d1c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005d20:	430b      	orrs	r3, r1
 8005d22:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005d24:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d26:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8005d28:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8005d2e:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d30:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d36:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8005d3c:	4618      	mov	r0, r3
}
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d40:	f640 03ff 	movw	r3, #2303	; 0x8ff
 8005d44:	f2c0 033d 	movt	r3, #61	; 0x3d
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	d932      	bls.n	8005db2 <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8005d4c:	f64d 6183 	movw	r1, #56963	; 0xde83
 8005d50:	f2c4 311b 	movt	r1, #17179	; 0x431b
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d54:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005d56:	fba1 3c00 	umull	r3, ip, r1, r0
 8005d5a:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d66:	6851      	ldr	r1, [r2, #4]
 8005d68:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005d6c:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8005d70:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d72:	f644 51d3 	movw	r1, #19923	; 0x4dd3
 8005d76:	f2c1 0162 	movt	r1, #4194	; 0x1062
 8005d7a:	fba1 1303 	umull	r1, r3, r1, r3
 8005d7e:	6a11      	ldr	r1, [r2, #32]
 8005d80:	099b      	lsrs	r3, r3, #6
 8005d82:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005d86:	3301      	adds	r3, #1
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d8c:	69d1      	ldr	r1, [r2, #28]
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005d94:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005d98:	b9ab      	cbnz	r3, 8005dc6 <HAL_I2C_Init+0x17e>
 8005d9a:	3801      	subs	r0, #1
 8005d9c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da4:	3301      	adds	r3, #1
 8005da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005daa:	b1d3      	cbz	r3, 8005de2 <HAL_I2C_Init+0x19a>
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db0:	e79c      	b.n	8005cec <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8005db2:	2001      	movs	r0, #1
}
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005db6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005dba:	f7fd fc97 	bl	80036ec <HAL_I2C_MspInit>
 8005dbe:	e74f      	b.n	8005c60 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	e792      	b.n	8005cec <HAL_I2C_Init+0xa4>
 8005dc6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005dca:	3801      	subs	r0, #1
 8005dcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dda:	b113      	cbz	r3, 8005de2 <HAL_I2C_Init+0x19a>
 8005ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de0:	e784      	b.n	8005cec <HAL_I2C_Init+0xa4>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e782      	b.n	8005cec <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8005de6:	2001      	movs	r0, #1
}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop

08005dec <HAL_I2C_Master_Transmit>:
{
 8005dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	4605      	mov	r5, r0
 8005df2:	b083      	sub	sp, #12
 8005df4:	4699      	mov	r9, r3
 8005df6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005df8:	4688      	mov	r8, r1
 8005dfa:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8005dfc:	f7fe ff50 	bl	8004ca0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e00:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d003      	beq.n	8005e10 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 8005e08:	2002      	movs	r0, #2
}
 8005e0a:	b003      	add	sp, #12
 8005e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e10:	4606      	mov	r6, r0
 8005e12:	e005      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e14:	f7fe ff44 	bl	8004ca0 <HAL_GetTick>
 8005e18:	1b80      	subs	r0, r0, r6
 8005e1a:	2819      	cmp	r0, #25
 8005e1c:	f200 80f7 	bhi.w	800600e <HAL_I2C_Master_Transmit+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e20:	682c      	ldr	r4, [r5, #0]
 8005e22:	69a3      	ldr	r3, [r4, #24]
 8005e24:	ea6f 0c03 	mvn.w	ip, r3
 8005e28:	f01c 0b02 	ands.w	fp, ip, #2
 8005e2c:	d0f2      	beq.n	8005e14 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8005e2e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d0e8      	beq.n	8005e08 <HAL_I2C_Master_Transmit+0x1c>
 8005e36:	2301      	movs	r3, #1
 8005e38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	07d9      	lsls	r1, r3, #31
 8005e40:	d571      	bpl.n	8005f26 <HAL_I2C_Master_Transmit+0x13a>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e48:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e4a:	2321      	movs	r3, #33	; 0x21
 8005e4c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e50:	2310      	movs	r3, #16
 8005e52:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005e5a:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e5e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    hi2c->XferSize    = hi2c->XferCount;
 8005e62:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e64:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005e68:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e6c:	2b08      	cmp	r3, #8
    hi2c->XferSize    = hi2c->XferCount;
 8005e6e:	852a      	strh	r2, [r5, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e70:	d007      	beq.n	8005e82 <HAL_I2C_Master_Transmit+0x96>
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d005      	beq.n	8005e82 <HAL_I2C_Master_Transmit+0x96>
 8005e76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e7a:	d002      	beq.n	8005e82 <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005e7e:	2b12      	cmp	r3, #18
 8005e80:	d103      	bne.n	8005e8a <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	1c7b      	adds	r3, r7, #1
 8005e8c:	d13d      	bne.n	8005f0a <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e8e:	6963      	ldr	r3, [r4, #20]
 8005e90:	07d8      	lsls	r0, r3, #31
 8005e92:	d5fc      	bpl.n	8005e8e <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e94:	692b      	ldr	r3, [r5, #16]
 8005e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e9a:	d149      	bne.n	8005f30 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e9c:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8005ea0:	6121      	str	r1, [r4, #16]
 8005ea2:	1c78      	adds	r0, r7, #1
 8005ea4:	d004      	beq.n	8005eb0 <HAL_I2C_Master_Transmit+0xc4>
 8005ea6:	e0d8      	b.n	800605a <HAL_I2C_Master_Transmit+0x26e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ea8:	6963      	ldr	r3, [r4, #20]
 8005eaa:	055a      	lsls	r2, r3, #21
 8005eac:	f100 80bd 	bmi.w	800602a <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eb0:	6963      	ldr	r3, [r4, #20]
 8005eb2:	0799      	lsls	r1, r3, #30
 8005eb4:	d5f8      	bpl.n	8005ea8 <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	69a3      	ldr	r3, [r4, #24]
 8005ec0:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8005ec2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec4:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d074      	beq.n	8005fb4 <HAL_I2C_Master_Transmit+0x1c8>
 8005eca:	1c79      	adds	r1, r7, #1
 8005ecc:	d17f      	bne.n	8005fce <HAL_I2C_Master_Transmit+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	061a      	lsls	r2, r3, #24
 8005ed2:	d441      	bmi.n	8005f58 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ed4:	6963      	ldr	r3, [r4, #20]
 8005ed6:	055b      	lsls	r3, r3, #21
 8005ed8:	d5f9      	bpl.n	8005ece <HAL_I2C_Master_Transmit+0xe2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005eda:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005edc:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ede:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005ee2:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee4:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ee6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eea:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005ef0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	f000 80e1 	beq.w	80060c4 <HAL_I2C_Master_Transmit+0x2d8>
      return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
}
 8005f04:	b003      	add	sp, #12
 8005f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f0a:	6963      	ldr	r3, [r4, #20]
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	d4c1      	bmi.n	8005e94 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7fe fec6 	bl	8004ca0 <HAL_GetTick>
 8005f14:	1b80      	subs	r0, r0, r6
 8005f16:	4287      	cmp	r7, r0
 8005f18:	f0c0 80af 	bcc.w	800607a <HAL_I2C_Master_Transmit+0x28e>
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f000 80ac 	beq.w	800607a <HAL_I2C_Master_Transmit+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f22:	682c      	ldr	r4, [r5, #0]
 8005f24:	e7b1      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	e788      	b.n	8005e42 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f30:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8005f34:	f003 0306 	and.w	r3, r3, #6
 8005f38:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005f3c:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005f3e:	1c7b      	adds	r3, r7, #1
 8005f40:	d003      	beq.n	8005f4a <HAL_I2C_Master_Transmit+0x15e>
 8005f42:	e0b0      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x2ba>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f44:	6963      	ldr	r3, [r4, #20]
 8005f46:	0559      	lsls	r1, r3, #21
 8005f48:	d46f      	bmi.n	800602a <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4a:	6963      	ldr	r3, [r4, #20]
 8005f4c:	0718      	lsls	r0, r3, #28
 8005f4e:	d5f9      	bpl.n	8005f44 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f50:	fa5f f388 	uxtb.w	r3, r8
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	e7a4      	b.n	8005ea2 <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f58:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8005f5a:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f5e:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8005f60:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f68:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8005f6a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005f6c:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f74:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 8005f76:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f78:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8005f7a:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f7c:	d50c      	bpl.n	8005f98 <HAL_I2C_Master_Transmit+0x1ac>
 8005f7e:	b15a      	cbz	r2, 8005f98 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f80:	7843      	ldrb	r3, [r0, #1]
 8005f82:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8005f84:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005f86:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005f88:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8005f8c:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8005f8e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005f90:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005f94:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8005f96:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8005f98:	1c78      	adds	r0, r7, #1
 8005f9a:	d128      	bne.n	8005fee <HAL_I2C_Master_Transmit+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f9c:	6963      	ldr	r3, [r4, #20]
 8005f9e:	0759      	lsls	r1, r3, #29
 8005fa0:	d405      	bmi.n	8005fae <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fa2:	6963      	ldr	r3, [r4, #20]
 8005fa4:	055a      	lsls	r2, r3, #21
 8005fa6:	d498      	bmi.n	8005eda <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fa8:	6963      	ldr	r3, [r4, #20]
 8005faa:	0759      	lsls	r1, r3, #29
 8005fac:	d5f9      	bpl.n	8005fa2 <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8005fae:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d18a      	bne.n	8005eca <HAL_I2C_Master_Transmit+0xde>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb4:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8005fbc:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005fc4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8005fcc:	e71d      	b.n	8005e0a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fce:	6963      	ldr	r3, [r4, #20]
 8005fd0:	0618      	lsls	r0, r3, #24
 8005fd2:	d4c1      	bmi.n	8005f58 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd4:	6963      	ldr	r3, [r4, #20]
 8005fd6:	0558      	lsls	r0, r3, #21
 8005fd8:	f53f af7f 	bmi.w	8005eda <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fdc:	f7fe fe60 	bl	8004ca0 <HAL_GetTick>
 8005fe0:	1b80      	subs	r0, r0, r6
 8005fe2:	4287      	cmp	r7, r0
 8005fe4:	d375      	bcc.n	80060d2 <HAL_I2C_Master_Transmit+0x2e6>
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	d073      	beq.n	80060d2 <HAL_I2C_Master_Transmit+0x2e6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fea:	682c      	ldr	r4, [r5, #0]
 8005fec:	e76d      	b.n	8005eca <HAL_I2C_Master_Transmit+0xde>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	075b      	lsls	r3, r3, #29
 8005ff2:	d4dc      	bmi.n	8005fae <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ff4:	6963      	ldr	r3, [r4, #20]
 8005ff6:	055b      	lsls	r3, r3, #21
 8005ff8:	f53f af6f 	bmi.w	8005eda <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7fe fe50 	bl	8004ca0 <HAL_GetTick>
 8006000:	1b80      	subs	r0, r0, r6
 8006002:	4287      	cmp	r7, r0
 8006004:	d365      	bcc.n	80060d2 <HAL_I2C_Master_Transmit+0x2e6>
 8006006:	2f00      	cmp	r7, #0
 8006008:	d063      	beq.n	80060d2 <HAL_I2C_Master_Transmit+0x2e6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800600a:	682c      	ldr	r4, [r5, #0]
 800600c:	e7c4      	b.n	8005f98 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 800600e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006010:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006014:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006018:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800601c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800601e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	f043 0320 	orr.w	r3, r3, #32
 8006026:	642b      	str	r3, [r5, #64]	; 0x40
 8006028:	e6ee      	b.n	8005e08 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006030:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006032:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006034:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8006038:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800603c:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800603e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006042:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006046:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006048:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800604c:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8006050:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006052:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006054:	b003      	add	sp, #12
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800605a:	6963      	ldr	r3, [r4, #20]
 800605c:	079b      	lsls	r3, r3, #30
 800605e:	f53f af2a 	bmi.w	8005eb6 <HAL_I2C_Master_Transmit+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006062:	6963      	ldr	r3, [r4, #20]
 8006064:	055b      	lsls	r3, r3, #21
 8006066:	d4e0      	bmi.n	800602a <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006068:	f7fe fe1a 	bl	8004ca0 <HAL_GetTick>
 800606c:	1b80      	subs	r0, r0, r6
 800606e:	4287      	cmp	r7, r0
 8006070:	d33d      	bcc.n	80060ee <HAL_I2C_Master_Transmit+0x302>
 8006072:	2f00      	cmp	r7, #0
 8006074:	d03b      	beq.n	80060ee <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006076:	682c      	ldr	r4, [r5, #0]
 8006078:	e713      	b.n	8005ea2 <HAL_I2C_Master_Transmit+0xb6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800607a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800607c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800607e:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006080:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006084:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006088:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800608a:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 800608c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006090:	f042 0220 	orr.w	r2, r2, #32
 8006094:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	05da      	lsls	r2, r3, #23
 800609a:	f57f af32 	bpl.w	8005f02 <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800609e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a2:	642b      	str	r3, [r5, #64]	; 0x40
 80060a4:	e72d      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060a6:	6963      	ldr	r3, [r4, #20]
 80060a8:	071a      	lsls	r2, r3, #28
 80060aa:	f53f af51 	bmi.w	8005f50 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	055a      	lsls	r2, r3, #21
 80060b2:	d4ba      	bmi.n	800602a <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b4:	f7fe fdf4 	bl	8004ca0 <HAL_GetTick>
 80060b8:	1b80      	subs	r0, r0, r6
 80060ba:	4287      	cmp	r7, r0
 80060bc:	d317      	bcc.n	80060ee <HAL_I2C_Master_Transmit+0x302>
 80060be:	b1b7      	cbz	r7, 80060ee <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060c0:	682c      	ldr	r4, [r5, #0]
 80060c2:	e73c      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	682a      	ldr	r2, [r5, #0]
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	e69b      	b.n	8005e0a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80060d4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060d8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060dc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80060e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e6:	f043 0320 	orr.w	r3, r3, #32
 80060ea:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80060ec:	e705      	b.n	8005efa <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ee:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060f2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80060fe:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006102:	f043 0320 	orr.w	r3, r3, #32
 8006106:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006108:	2001      	movs	r0, #1
 800610a:	e67e      	b.n	8005e0a <HAL_I2C_Master_Transmit+0x1e>

0800610c <HAL_I2C_Master_Receive>:
{
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	4605      	mov	r5, r0
 8006112:	b087      	sub	sp, #28
 8006114:	4699      	mov	r9, r3
 8006116:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006118:	4688      	mov	r8, r1
 800611a:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800611c:	f7fe fdc0 	bl	8004ca0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006120:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8006124:	2b20      	cmp	r3, #32
 8006126:	d003      	beq.n	8006130 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8006128:	2002      	movs	r0, #2
}
 800612a:	b007      	add	sp, #28
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	4607      	mov	r7, r0
 8006132:	e005      	b.n	8006140 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006134:	f7fe fdb4 	bl	8004ca0 <HAL_GetTick>
 8006138:	1bc0      	subs	r0, r0, r7
 800613a:	2819      	cmp	r0, #25
 800613c:	f200 80a8 	bhi.w	8006290 <HAL_I2C_Master_Receive+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006140:	682c      	ldr	r4, [r5, #0]
 8006142:	69a0      	ldr	r0, [r4, #24]
 8006144:	43c0      	mvns	r0, r0
 8006146:	f010 0b02 	ands.w	fp, r0, #2
 800614a:	d0f3      	beq.n	8006134 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 800614c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d0e9      	beq.n	8006128 <HAL_I2C_Master_Receive+0x1c>
 8006154:	2301      	movs	r3, #1
 8006156:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	07db      	lsls	r3, r3, #31
 800615e:	d561      	bpl.n	8006224 <HAL_I2C_Master_Receive+0x118>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006166:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006168:	2322      	movs	r3, #34	; 0x22
 800616a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800616e:	2310      	movs	r3, #16
 8006170:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006174:	2300      	movs	r3, #0
 8006176:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006178:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800617c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    hi2c->XferSize    = hi2c->XferCount;
 8006180:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006182:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006184:	852a      	strh	r2, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006186:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006188:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 800618a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006192:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006194:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006196:	d007      	beq.n	80061a8 <HAL_I2C_Master_Receive+0x9c>
 8006198:	2a01      	cmp	r2, #1
 800619a:	d005      	beq.n	80061a8 <HAL_I2C_Master_Receive+0x9c>
 800619c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80061a0:	d002      	beq.n	80061a8 <HAL_I2C_Master_Receive+0x9c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80061a4:	2b11      	cmp	r3, #17
 80061a6:	d103      	bne.n	80061b0 <HAL_I2C_Master_Receive+0xa4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	1c70      	adds	r0, r6, #1
 80061b2:	d129      	bne.n	8006208 <HAL_I2C_Master_Receive+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b4:	6963      	ldr	r3, [r4, #20]
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	d5fc      	bpl.n	80061b4 <HAL_I2C_Master_Receive+0xa8>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ba:	692b      	ldr	r3, [r5, #16]
 80061bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c0:	d135      	bne.n	800622e <HAL_I2C_Master_Receive+0x122>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061c2:	f048 0301 	orr.w	r3, r8, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	1c72      	adds	r2, r6, #1
 80061cc:	d003      	beq.n	80061d6 <HAL_I2C_Master_Receive+0xca>
 80061ce:	e104      	b.n	80063da <HAL_I2C_Master_Receive+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d0:	6963      	ldr	r3, [r4, #20]
 80061d2:	0558      	lsls	r0, r3, #21
 80061d4:	d46a      	bmi.n	80062ac <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061d6:	6963      	ldr	r3, [r4, #20]
 80061d8:	079b      	lsls	r3, r3, #30
 80061da:	d5f9      	bpl.n	80061d0 <HAL_I2C_Master_Receive+0xc4>
    if (hi2c->XferSize == 0U)
 80061dc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d17c      	bne.n	80062dc <HAL_I2C_Master_Receive+0x1d0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6963      	ldr	r3, [r4, #20]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	69a3      	ldr	r3, [r4, #24]
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061f4:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80061f8:	2320      	movs	r3, #32
 80061fa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80061fe:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8006206:	e790      	b.n	800612a <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006208:	6963      	ldr	r3, [r4, #20]
 800620a:	07da      	lsls	r2, r3, #31
 800620c:	d4d5      	bmi.n	80061ba <HAL_I2C_Master_Receive+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7fe fd47 	bl	8004ca0 <HAL_GetTick>
 8006212:	1bc0      	subs	r0, r0, r7
 8006214:	4286      	cmp	r6, r0
 8006216:	f0c0 8109 	bcc.w	800642c <HAL_I2C_Master_Receive+0x320>
 800621a:	2e00      	cmp	r6, #0
 800621c:	f000 8106 	beq.w	800642c <HAL_I2C_Master_Receive+0x320>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006220:	682c      	ldr	r4, [r5, #0]
 8006222:	e7c5      	b.n	80061b0 <HAL_I2C_Master_Receive+0xa4>
      __HAL_I2C_ENABLE(hi2c);
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	e798      	b.n	8006160 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800622e:	ea4f 19e8 	mov.w	r9, r8, asr #7
 8006232:	f009 0906 	and.w	r9, r9, #6
 8006236:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 800623a:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800623c:	1c70      	adds	r0, r6, #1
 800623e:	d003      	beq.n	8006248 <HAL_I2C_Master_Receive+0x13c>
 8006240:	e11a      	b.n	8006478 <HAL_I2C_Master_Receive+0x36c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006242:	6963      	ldr	r3, [r4, #20]
 8006244:	055a      	lsls	r2, r3, #21
 8006246:	d431      	bmi.n	80062ac <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006248:	6963      	ldr	r3, [r4, #20]
 800624a:	0719      	lsls	r1, r3, #28
 800624c:	d5f9      	bpl.n	8006242 <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800624e:	fa5f f388 	uxtb.w	r3, r8
 8006252:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8006254:	1c71      	adds	r1, r6, #1
 8006256:	d003      	beq.n	8006260 <HAL_I2C_Master_Receive+0x154>
 8006258:	e1a3      	b.n	80065a2 <HAL_I2C_Master_Receive+0x496>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800625a:	6963      	ldr	r3, [r4, #20]
 800625c:	055b      	lsls	r3, r3, #21
 800625e:	d425      	bmi.n	80062ac <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006260:	6963      	ldr	r3, [r4, #20]
 8006262:	079a      	lsls	r2, r3, #30
 8006264:	d5f9      	bpl.n	800625a <HAL_I2C_Master_Receive+0x14e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006266:	2300      	movs	r3, #0
 8006268:	9305      	str	r3, [sp, #20]
 800626a:	6963      	ldr	r3, [r4, #20]
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	69a3      	ldr	r3, [r4, #24]
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800627c:	1c72      	adds	r2, r6, #1
 800627e:	f040 81a3 	bne.w	80065c8 <HAL_I2C_Master_Receive+0x4bc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006282:	6963      	ldr	r3, [r4, #20]
 8006284:	07db      	lsls	r3, r3, #31
 8006286:	d5fc      	bpl.n	8006282 <HAL_I2C_Master_Receive+0x176>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006288:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	e79c      	b.n	80061ca <HAL_I2C_Master_Receive+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006290:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006292:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006296:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800629a:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800629e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80062a0:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062a4:	f043 0320 	orr.w	r3, r3, #32
 80062a8:	642b      	str	r3, [r5, #64]	; 0x40
 80062aa:	e73d      	b.n	8006128 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062b2:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ba:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062bc:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062be:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062c0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80062ca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062ce:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 80062d2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062d4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80062d6:	b007      	add	sp, #28
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 80062dc:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062de:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 80062e0:	f000 8150 	beq.w	8006584 <HAL_I2C_Master_Receive+0x478>
    else if (hi2c->XferSize == 2U)
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	f000 8108 	beq.w	80064fa <HAL_I2C_Master_Receive+0x3ee>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ee:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f0:	2200      	movs	r2, #0
 80062f2:	9204      	str	r2, [sp, #16]
 80062f4:	6962      	ldr	r2, [r4, #20]
 80062f6:	9204      	str	r2, [sp, #16]
 80062f8:	69a2      	ldr	r2, [r4, #24]
 80062fa:	9204      	str	r2, [sp, #16]
 80062fc:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d848      	bhi.n	8006394 <HAL_I2C_Master_Receive+0x288>
        if (hi2c->XferSize == 1U)
 8006302:	2b01      	cmp	r3, #1
 8006304:	f000 8125 	beq.w	8006552 <HAL_I2C_Master_Receive+0x446>
        else if (hi2c->XferSize == 2U)
 8006308:	2b02      	cmp	r3, #2
 800630a:	f000 80d1 	beq.w	80064b0 <HAL_I2C_Master_Receive+0x3a4>
 800630e:	1c72      	adds	r2, r6, #1
 8006310:	f040 8102 	bne.w	8006518 <HAL_I2C_Master_Receive+0x40c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006314:	6963      	ldr	r3, [r4, #20]
 8006316:	075b      	lsls	r3, r3, #29
 8006318:	d5fc      	bpl.n	8006314 <HAL_I2C_Master_Receive+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006322:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8006328:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800632a:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800632c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006330:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006332:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006334:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006336:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006338:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800633a:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800633c:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633e:	682a      	ldr	r2, [r5, #0]
 8006340:	f040 80f9 	bne.w	8006536 <HAL_I2C_Master_Receive+0x42a>
 8006344:	6953      	ldr	r3, [r2, #20]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	d5fc      	bpl.n	8006344 <HAL_I2C_Master_Receive+0x238>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634a:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006352:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006354:	6913      	ldr	r3, [r2, #16]
 8006356:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006358:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800635a:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800635c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006366:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 8006368:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 800636a:	1c4c      	adds	r4, r1, #1
 800636c:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800636e:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006370:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 8006372:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006374:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006376:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006378:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800637a:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 800637c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800637e:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006380:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006382:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006384:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006386:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006388:	2b00      	cmp	r3, #0
 800638a:	f43f af34 	beq.w	80061f6 <HAL_I2C_Master_Receive+0xea>
      if (hi2c->XferSize <= 3U)
 800638e:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006390:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8006392:	d9b6      	bls.n	8006302 <HAL_I2C_Master_Receive+0x1f6>
 8006394:	b94e      	cbnz	r6, 80063aa <HAL_I2C_Master_Receive+0x29e>
 8006396:	e030      	b.n	80063fa <HAL_I2C_Master_Receive+0x2ee>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006398:	6963      	ldr	r3, [r4, #20]
 800639a:	06db      	lsls	r3, r3, #27
 800639c:	d45c      	bmi.n	8006458 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fe fc7f 	bl	8004ca0 <HAL_GetTick>
 80063a2:	1bc0      	subs	r0, r0, r7
 80063a4:	4286      	cmp	r6, r0
 80063a6:	d330      	bcc.n	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063a8:	682c      	ldr	r4, [r5, #0]
 80063aa:	6963      	ldr	r3, [r4, #20]
 80063ac:	065a      	lsls	r2, r3, #25
 80063ae:	d5f3      	bpl.n	8006398 <HAL_I2C_Master_Receive+0x28c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063b2:	6922      	ldr	r2, [r4, #16]
 80063b4:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80063b6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063b8:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 80063ba:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80063bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80063be:	3a01      	subs	r2, #1
 80063c0:	b292      	uxth	r2, r2
 80063c2:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063c4:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 80063c6:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80063c8:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 80063ca:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063cc:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 80063ce:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 80063d0:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063d2:	d5d9      	bpl.n	8006388 <HAL_I2C_Master_Receive+0x27c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d4:	6903      	ldr	r3, [r0, #16]
 80063d6:	704b      	strb	r3, [r1, #1]
 80063d8:	e083      	b.n	80064e2 <HAL_I2C_Master_Receive+0x3d6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063da:	6963      	ldr	r3, [r4, #20]
 80063dc:	0799      	lsls	r1, r3, #30
 80063de:	f53f aefd 	bmi.w	80061dc <HAL_I2C_Master_Receive+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e2:	6963      	ldr	r3, [r4, #20]
 80063e4:	0559      	lsls	r1, r3, #21
 80063e6:	f53f af61 	bmi.w	80062ac <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fe fc59 	bl	8004ca0 <HAL_GetTick>
 80063ee:	1bc0      	subs	r0, r0, r7
 80063f0:	4286      	cmp	r6, r0
 80063f2:	d30a      	bcc.n	800640a <HAL_I2C_Master_Receive+0x2fe>
 80063f4:	b14e      	cbz	r6, 800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063f6:	682c      	ldr	r4, [r5, #0]
 80063f8:	e6e7      	b.n	80061ca <HAL_I2C_Master_Receive+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063fa:	6963      	ldr	r3, [r4, #20]
 80063fc:	0659      	lsls	r1, r3, #25
 80063fe:	d4d7      	bmi.n	80063b0 <HAL_I2C_Master_Receive+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006400:	6963      	ldr	r3, [r4, #20]
 8006402:	06d8      	lsls	r0, r3, #27
 8006404:	d428      	bmi.n	8006458 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006406:	f7fe fc4b 	bl	8004ca0 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800640a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800640c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800640e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006410:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006414:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800641a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8006422:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006424:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006426:	b007      	add	sp, #28
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 800642c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800642e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006430:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006432:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006436:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643c:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 800643e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006442:	f042 0220 	orr.w	r2, r2, #32
 8006446:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006448:	680b      	ldr	r3, [r1, #0]
 800644a:	05d9      	lsls	r1, r3, #23
 800644c:	d512      	bpl.n	8006474 <HAL_I2C_Master_Receive+0x368>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006452:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006454:	2001      	movs	r0, #1
 8006456:	e668      	b.n	800612a <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006458:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800645a:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800645c:	f06f 0110 	mvn.w	r1, #16
 8006460:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006462:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006464:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006468:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800646c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800646e:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006470:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8006474:	2001      	movs	r0, #1
 8006476:	e658      	b.n	800612a <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	071b      	lsls	r3, r3, #28
 800647c:	f53f aee7 	bmi.w	800624e <HAL_I2C_Master_Receive+0x142>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006480:	6963      	ldr	r3, [r4, #20]
 8006482:	055b      	lsls	r3, r3, #21
 8006484:	f53f af12 	bmi.w	80062ac <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006488:	f7fe fc0a 	bl	8004ca0 <HAL_GetTick>
 800648c:	1bc0      	subs	r0, r0, r7
 800648e:	4286      	cmp	r6, r0
 8006490:	d3bb      	bcc.n	800640a <HAL_I2C_Master_Receive+0x2fe>
 8006492:	2e00      	cmp	r6, #0
 8006494:	d0b9      	beq.n	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006496:	682c      	ldr	r4, [r5, #0]
 8006498:	e6d0      	b.n	800623c <HAL_I2C_Master_Receive+0x130>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649a:	6963      	ldr	r3, [r4, #20]
 800649c:	0759      	lsls	r1, r3, #29
 800649e:	d40c      	bmi.n	80064ba <HAL_I2C_Master_Receive+0x3ae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a0:	f7fe fbfe 	bl	8004ca0 <HAL_GetTick>
 80064a4:	1bc0      	subs	r0, r0, r7
 80064a6:	4286      	cmp	r6, r0
 80064a8:	d3af      	bcc.n	800640a <HAL_I2C_Master_Receive+0x2fe>
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d0ad      	beq.n	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ae:	682c      	ldr	r4, [r5, #0]
 80064b0:	1c73      	adds	r3, r6, #1
 80064b2:	d1f2      	bne.n	800649a <HAL_I2C_Master_Receive+0x38e>
 80064b4:	6963      	ldr	r3, [r4, #20]
 80064b6:	0758      	lsls	r0, r3, #29
 80064b8:	d5fc      	bpl.n	80064b4 <HAL_I2C_Master_Receive+0x3a8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064c0:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80064c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80064ca:	1c53      	adds	r3, r2, #1
 80064cc:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80064ce:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80064d4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 80064e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80064e4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80064e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80064e8:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80064ea:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80064ec:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80064ee:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80064f0:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80064f2:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 80064f4:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 80064f6:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80064f8:	e746      	b.n	8006388 <HAL_I2C_Master_Receive+0x27c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fe:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006506:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006508:	2200      	movs	r2, #0
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	6962      	ldr	r2, [r4, #20]
 800650e:	9203      	str	r2, [sp, #12]
 8006510:	69a2      	ldr	r2, [r4, #24]
 8006512:	9203      	str	r2, [sp, #12]
 8006514:	9a03      	ldr	r2, [sp, #12]
 8006516:	e6f2      	b.n	80062fe <HAL_I2C_Master_Receive+0x1f2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006518:	6963      	ldr	r3, [r4, #20]
 800651a:	0758      	lsls	r0, r3, #29
 800651c:	f53f aefd 	bmi.w	800631a <HAL_I2C_Master_Receive+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006520:	f7fe fbbe 	bl	8004ca0 <HAL_GetTick>
 8006524:	1bc0      	subs	r0, r0, r7
 8006526:	4286      	cmp	r6, r0
 8006528:	f4ff af6f 	bcc.w	800640a <HAL_I2C_Master_Receive+0x2fe>
 800652c:	2e00      	cmp	r6, #0
 800652e:	f43f af6c 	beq.w	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006532:	682c      	ldr	r4, [r5, #0]
 8006534:	e6eb      	b.n	800630e <HAL_I2C_Master_Receive+0x202>
 8006536:	6953      	ldr	r3, [r2, #20]
 8006538:	075c      	lsls	r4, r3, #29
 800653a:	f53f af06 	bmi.w	800634a <HAL_I2C_Master_Receive+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fe fbaf 	bl	8004ca0 <HAL_GetTick>
 8006542:	1bc0      	subs	r0, r0, r7
 8006544:	4286      	cmp	r6, r0
 8006546:	f4ff af60 	bcc.w	800640a <HAL_I2C_Master_Receive+0x2fe>
 800654a:	2e00      	cmp	r6, #0
 800654c:	f47f aef6 	bne.w	800633c <HAL_I2C_Master_Receive+0x230>
 8006550:	e75b      	b.n	800640a <HAL_I2C_Master_Receive+0x2fe>
 8006552:	b95e      	cbnz	r6, 800656c <HAL_I2C_Master_Receive+0x460>
 8006554:	e011      	b.n	800657a <HAL_I2C_Master_Receive+0x46e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006556:	6963      	ldr	r3, [r4, #20]
 8006558:	06d9      	lsls	r1, r3, #27
 800655a:	f53f af7d 	bmi.w	8006458 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fe fb9f 	bl	8004ca0 <HAL_GetTick>
 8006562:	1bc0      	subs	r0, r0, r7
 8006564:	4286      	cmp	r6, r0
 8006566:	f4ff af50 	bcc.w	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800656a:	682c      	ldr	r4, [r5, #0]
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	0658      	lsls	r0, r3, #25
 8006570:	d5f1      	bpl.n	8006556 <HAL_I2C_Master_Receive+0x44a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006578:	e7b3      	b.n	80064e2 <HAL_I2C_Master_Receive+0x3d6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800657a:	6963      	ldr	r3, [r4, #20]
 800657c:	065a      	lsls	r2, r3, #25
 800657e:	f57f af3f 	bpl.w	8006400 <HAL_I2C_Master_Receive+0x2f4>
 8006582:	e7f6      	b.n	8006572 <HAL_I2C_Master_Receive+0x466>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006588:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658a:	2200      	movs	r2, #0
 800658c:	9202      	str	r2, [sp, #8]
 800658e:	6962      	ldr	r2, [r4, #20]
 8006590:	9202      	str	r2, [sp, #8]
 8006592:	69a2      	ldr	r2, [r4, #24]
 8006594:	9202      	str	r2, [sp, #8]
 8006596:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	e6ad      	b.n	80062fe <HAL_I2C_Master_Receive+0x1f2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	0798      	lsls	r0, r3, #30
 80065a6:	f53f ae5e 	bmi.w	8006266 <HAL_I2C_Master_Receive+0x15a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065aa:	6963      	ldr	r3, [r4, #20]
 80065ac:	0558      	lsls	r0, r3, #21
 80065ae:	f53f ae7d 	bmi.w	80062ac <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fe fb75 	bl	8004ca0 <HAL_GetTick>
 80065b6:	1bc0      	subs	r0, r0, r7
 80065b8:	4286      	cmp	r6, r0
 80065ba:	f4ff af26 	bcc.w	800640a <HAL_I2C_Master_Receive+0x2fe>
 80065be:	2e00      	cmp	r6, #0
 80065c0:	f43f af23 	beq.w	800640a <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065c4:	682c      	ldr	r4, [r5, #0]
 80065c6:	e645      	b.n	8006254 <HAL_I2C_Master_Receive+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c8:	6963      	ldr	r3, [r4, #20]
 80065ca:	07d8      	lsls	r0, r3, #31
 80065cc:	f53f ae5c 	bmi.w	8006288 <HAL_I2C_Master_Receive+0x17c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d0:	f7fe fb66 	bl	8004ca0 <HAL_GetTick>
 80065d4:	1bc0      	subs	r0, r0, r7
 80065d6:	4286      	cmp	r6, r0
 80065d8:	f4ff af28 	bcc.w	800642c <HAL_I2C_Master_Receive+0x320>
 80065dc:	2e00      	cmp	r6, #0
 80065de:	f43f af25 	beq.w	800642c <HAL_I2C_Master_Receive+0x320>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065e2:	682c      	ldr	r4, [r5, #0]
 80065e4:	e64a      	b.n	800627c <HAL_I2C_Master_Receive+0x170>
 80065e6:	bf00      	nop

080065e8 <HAL_I2C_Mem_Write>:
{
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	4604      	mov	r4, r0
 80065ee:	b083      	sub	sp, #12
 80065f0:	4699      	mov	r9, r3
 80065f2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80065f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80065f8:	460f      	mov	r7, r1
 80065fa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80065fc:	f7fe fb50 	bl	8004ca0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006604:	2b20      	cmp	r3, #32
 8006606:	d004      	beq.n	8006612 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8006608:	2702      	movs	r7, #2
}
 800660a:	4638      	mov	r0, r7
 800660c:	b003      	add	sp, #12
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	4605      	mov	r5, r0
 8006614:	e005      	b.n	8006622 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fe fb43 	bl	8004ca0 <HAL_GetTick>
 800661a:	1b40      	subs	r0, r0, r5
 800661c:	2819      	cmp	r0, #25
 800661e:	f200 80ab 	bhi.w	8006778 <HAL_I2C_Mem_Write+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	6983      	ldr	r3, [r0, #24]
 8006626:	ea6f 0c03 	mvn.w	ip, r3
 800662a:	f01c 0b02 	ands.w	fp, ip, #2
 800662e:	d0f2      	beq.n	8006616 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8006630:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d0e7      	beq.n	8006608 <HAL_I2C_Mem_Write+0x20>
 8006638:	2301      	movs	r3, #1
 800663a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	07db      	lsls	r3, r3, #31
 8006642:	d572      	bpl.n	800672a <HAL_I2C_Mem_Write+0x142>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006644:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006646:	6807      	ldr	r7, [r0, #0]
 8006648:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 800664c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800664e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006650:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006652:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006654:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006658:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800665c:	2040      	movs	r0, #64	; 0x40
 800665e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006662:	2000      	movs	r0, #0
 8006664:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006666:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800666a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 800666c:	8527      	strh	r7, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800666e:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8006672:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006674:	464b      	mov	r3, r9
 8006676:	4642      	mov	r2, r8
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff f9ef 	bl	8005a5c <I2C_RequestMemoryWrite>
 800667e:	4607      	mov	r7, r0
 8006680:	b9f8      	cbnz	r0, 80066c2 <HAL_I2C_Mem_Write+0xda>
    while (hi2c->XferSize > 0U)
 8006682:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80a0 	beq.w	80067ca <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	1c72      	adds	r2, r6, #1
 800668e:	d158      	bne.n	8006742 <HAL_I2C_Mem_Write+0x15a>
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	0610      	lsls	r0, r2, #24
 8006694:	d41a      	bmi.n	80066cc <HAL_I2C_Mem_Write+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	0551      	lsls	r1, r2, #21
 800669a:	d5f9      	bpl.n	8006690 <HAL_I2C_Mem_Write+0xa8>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800669c:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800669e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80066a2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80066a6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80066b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b6:	f043 0304 	orr.w	r3, r3, #4
 80066ba:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d038      	beq.n	8006734 <HAL_I2C_Mem_Write+0x14c>
      return HAL_ERROR;
 80066c2:	2701      	movs	r7, #1
}
 80066c4:	4638      	mov	r0, r7
 80066c6:	b003      	add	sp, #12
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066cc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80066d0:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d4:	4661      	mov	r1, ip
      hi2c->XferSize--;
 80066d6:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066de:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80066e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80066e2:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80066e4:	3a01      	subs	r2, #1
 80066e6:	b292      	uxth	r2, r2
 80066e8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066ea:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ec:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80066ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066f0:	0740      	lsls	r0, r0, #29
 80066f2:	d517      	bpl.n	8006724 <HAL_I2C_Mem_Write+0x13c>
 80066f4:	b942      	cbnz	r2, 8006708 <HAL_I2C_Mem_Write+0x120>
 80066f6:	1c72      	adds	r2, r6, #1
 80066f8:	d159      	bne.n	80067ae <HAL_I2C_Mem_Write+0x1c6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	0750      	lsls	r0, r2, #29
 80066fe:	d449      	bmi.n	8006794 <HAL_I2C_Mem_Write+0x1ac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	0551      	lsls	r1, r2, #21
 8006704:	d5f9      	bpl.n	80066fa <HAL_I2C_Mem_Write+0x112>
 8006706:	e7c9      	b.n	800669c <HAL_I2C_Mem_Write+0xb4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006708:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800670c:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 800670e:	f10c 0102 	add.w	r1, ip, #2
 8006712:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006714:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006716:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 800671a:	3901      	subs	r1, #1
        hi2c->XferSize--;
 800671c:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 800671e:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8006720:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006722:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006724:	2a00      	cmp	r2, #0
 8006726:	d1b1      	bne.n	800668c <HAL_I2C_Mem_Write+0xa4>
 8006728:	e7e5      	b.n	80066f6 <HAL_I2C_Mem_Write+0x10e>
      __HAL_I2C_ENABLE(hi2c);
 800672a:	6803      	ldr	r3, [r0, #0]
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	e787      	b.n	8006644 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800673c:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e763      	b.n	800660a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	0612      	lsls	r2, r2, #24
 8006746:	d4c1      	bmi.n	80066cc <HAL_I2C_Mem_Write+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	0551      	lsls	r1, r2, #21
 800674c:	d4a6      	bmi.n	800669c <HAL_I2C_Mem_Write+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fe faa7 	bl	8004ca0 <HAL_GetTick>
 8006752:	1b40      	subs	r0, r0, r5
 8006754:	4286      	cmp	r6, r0
 8006756:	d301      	bcc.n	800675c <HAL_I2C_Mem_Write+0x174>
 8006758:	2e00      	cmp	r6, #0
 800675a:	d196      	bne.n	800668a <HAL_I2C_Mem_Write+0xa2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800675c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800675e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006760:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006766:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800676a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800676c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006770:	f043 0320 	orr.w	r3, r3, #32
 8006774:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006776:	e7a1      	b.n	80066bc <HAL_I2C_Mem_Write+0xd4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006778:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800677a:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800677e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006782:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006786:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006788:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800678c:	f043 0320 	orr.w	r3, r3, #32
 8006790:	6423      	str	r3, [r4, #64]	; 0x40
 8006792:	e739      	b.n	8006608 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006796:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 800679c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80067a4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80067ac:	e72d      	b.n	800660a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	0752      	lsls	r2, r2, #29
 80067b2:	d4ef      	bmi.n	8006794 <HAL_I2C_Mem_Write+0x1ac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	0551      	lsls	r1, r2, #21
 80067b8:	f53f af70 	bmi.w	800669c <HAL_I2C_Mem_Write+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067bc:	f7fe fa70 	bl	8004ca0 <HAL_GetTick>
 80067c0:	1b40      	subs	r0, r0, r5
 80067c2:	4286      	cmp	r6, r0
 80067c4:	d3ca      	bcc.n	800675c <HAL_I2C_Mem_Write+0x174>
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	d0c8      	beq.n	800675c <HAL_I2C_Mem_Write+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	e793      	b.n	80066f6 <HAL_I2C_Mem_Write+0x10e>
 80067ce:	bf00      	nop

080067d0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f000 809b 	beq.w	800690c <HAL_I2S_Init+0x13c>
{
 80067d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067dc:	4604      	mov	r4, r0
 80067de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8084 	beq.w	80068f0 <HAL_I2S_Init+0x120>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067e8:	6821      	ldr	r1, [r4, #0]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80067ea:	6963      	ldr	r3, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80067ec:	2202      	movs	r2, #2
 80067ee:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067f2:	69c8      	ldr	r0, [r1, #28]
 80067f4:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 80067f8:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80067fc:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067fe:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8006800:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006802:	d073      	beq.n	80068ec <HAL_I2S_Init+0x11c>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006804:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0b      	itete	eq
 800680c:	2320      	moveq	r3, #32
 800680e:	2340      	movne	r3, #64	; 0x40
 8006810:	2510      	moveq	r5, #16
 8006812:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006814:	2001      	movs	r0, #1
      packetlength = packetlength * 2U;
 8006816:	2a20      	cmp	r2, #32
 8006818:	bf98      	it	ls
 800681a:	461d      	movls	r5, r3
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800681c:	f000 fef4 	bl	8007608 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006820:	6922      	ldr	r2, [r4, #16]
 8006822:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006826:	d06d      	beq.n	8006904 <HAL_I2S_Init+0x134>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006828:	fbb0 f0f5 	udiv	r0, r0, r5
 800682c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006830:	6961      	ldr	r1, [r4, #20]
 8006832:	0043      	lsls	r3, r0, #1
 8006834:	fbb3 f3f1 	udiv	r3, r3, r1
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006838:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 800683c:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006840:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8006842:	fba1 1303 	umull	r1, r3, r1, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006846:	0918      	lsrs	r0, r3, #4
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006848:	1e81      	subs	r1, r0, #2
 800684a:	29fd      	cmp	r1, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800684c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006850:	d905      	bls.n	800685e <HAL_I2S_Init+0x8e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006852:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006854:	f043 0310 	orr.w	r3, r3, #16
    return  HAL_ERROR;
 8006858:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800685a:	6463      	str	r3, [r4, #68]	; 0x44

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800685e:	6821      	ldr	r1, [r4, #0]
 8006860:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
 8006864:	4313      	orrs	r3, r2
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006866:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800686a:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800686c:	69cb      	ldr	r3, [r1, #28]
 800686e:	68e0      	ldr	r0, [r4, #12]
 8006870:	f24f 0240 	movw	r2, #61504	; 0xf040
 8006874:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8006878:	ea47 0605 	orr.w	r6, r7, r5
 800687c:	4013      	ands	r3, r2
 800687e:	4333      	orrs	r3, r6
 8006880:	69a6      	ldr	r6, [r4, #24]
 8006882:	4303      	orrs	r3, r0
 8006884:	4333      	orrs	r3, r6
 8006886:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800688a:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800688c:	6a23      	ldr	r3, [r4, #32]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d126      	bne.n	80068e0 <HAL_I2S_Init+0x110>
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006892:	4305      	orrs	r5, r0
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006894:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006898:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800689c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80068a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80068a4:	4299      	cmp	r1, r3
 80068a6:	bf18      	it	ne
 80068a8:	f04f 2040 	movne.w	r0, #1073758208	; 0x40004000
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068ac:	f437 7300 	bics.w	r3, r7, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068b0:	69c3      	ldr	r3, [r0, #28]
 80068b2:	ea02 0203 	and.w	r2, r2, r3
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80068b6:	f646 3359 	movw	r3, #27481	; 0x6b59
 80068ba:	f6c0 0300 	movt	r3, #2048	; 0x800
 80068be:	6363      	str	r3, [r4, #52]	; 0x34
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80068c0:	f04f 0302 	mov.w	r3, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068c4:	61c2      	str	r2, [r0, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80068c6:	6203      	str	r3, [r0, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068c8:	bf0c      	ite	eq
 80068ca:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80068ce:	2300      	movne	r3, #0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80068d0:	69c2      	ldr	r2, [r0, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80068d2:	432b      	orrs	r3, r5
 80068d4:	4333      	orrs	r3, r6
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80068da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068de:	61c3      	str	r3, [r0, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80068e0:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80068e2:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80068e4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80068e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80068ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	e7b9      	b.n	8006864 <HAL_I2S_Init+0x94>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80068f0:	f646 2321 	movw	r3, #27169	; 0x6a21
 80068f4:	f6c0 0300 	movt	r3, #2048	; 0x800
    hi2s->Lock = HAL_UNLOCKED;
 80068f8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80068fc:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80068fe:	f7fc ff7b 	bl	80037f8 <HAL_I2S_MspInit>
 8006902:	e771      	b.n	80067e8 <HAL_I2S_Init+0x18>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006904:	68e3      	ldr	r3, [r4, #12]
 8006906:	b11b      	cbz	r3, 8006910 <HAL_I2S_Init+0x140>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006908:	00ad      	lsls	r5, r5, #2
 800690a:	e78d      	b.n	8006828 <HAL_I2S_Init+0x58>
    return HAL_ERROR;
 800690c:	2001      	movs	r0, #1
}
 800690e:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006910:	00ed      	lsls	r5, r5, #3
 8006912:	e789      	b.n	8006828 <HAL_I2S_Init+0x58>

08006914 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006914:	2900      	cmp	r1, #0
 8006916:	d048      	beq.n	80069aa <HAL_I2S_Transmit_DMA+0x96>
 8006918:	2a00      	cmp	r2, #0
 800691a:	d046      	beq.n	80069aa <HAL_I2S_Transmit_DMA+0x96>
{
 800691c:	b538      	push	{r3, r4, r5, lr}
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800691e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006922:	2b01      	cmp	r3, #1
 8006924:	4604      	mov	r4, r0
 8006926:	d047      	beq.n	80069b8 <HAL_I2S_Transmit_DMA+0xa4>
 8006928:	2301      	movs	r3, #1
 800692a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800692e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006932:	2b01      	cmp	r3, #1
 8006934:	d142      	bne.n	80069bc <HAL_I2S_Transmit_DMA+0xa8>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006936:	2303      	movs	r3, #3
 8006938:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800693c:	6805      	ldr	r5, [r0, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800693e:	2300      	movs	r3, #0
 8006940:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006942:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8006944:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006946:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800694a:	2b03      	cmp	r3, #3
 800694c:	d02f      	beq.n	80069ae <HAL_I2S_Transmit_DMA+0x9a>
 800694e:	2b05      	cmp	r3, #5
 8006950:	d02d      	beq.n	80069ae <HAL_I2S_Transmit_DMA+0x9a>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006952:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006954:	8542      	strh	r2, [r0, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006956:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006958:	f646 13e5 	movw	r3, #27109	; 0x69e5
 800695c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006960:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006962:	f646 13f5 	movw	r3, #27125	; 0x69f5
 8006966:	f6c0 0300 	movt	r3, #2048	; 0x800
 800696a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800696c:	f646 3329 	movw	r3, #27433	; 0x6b29
 8006970:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006974:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8006976:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006978:	f105 020c 	add.w	r2, r5, #12
 800697c:	b29b      	uxth	r3, r3
 800697e:	f7fe fd93 	bl	80054a8 <HAL_DMA_Start_IT>
 8006982:	bb00      	cbnz	r0, 80069c6 <HAL_I2S_Transmit_DMA+0xb2>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	0551      	lsls	r1, r2, #21
 800698a:	d403      	bmi.n	8006994 <HAL_I2S_Transmit_DMA+0x80>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006992:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	0792      	lsls	r2, r2, #30
 8006998:	d403      	bmi.n	80069a2 <HAL_I2S_Transmit_DMA+0x8e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	f042 0202 	orr.w	r2, r2, #2
 80069a0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80069a2:	2300      	movs	r3, #0
 80069a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80069aa:	2001      	movs	r0, #1
}
 80069ac:	4770      	bx	lr
    hi2s->TxXferSize = (Size << 1U);
 80069ae:	0053      	lsls	r3, r2, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80069b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80069b6:	e7ce      	b.n	8006956 <HAL_I2S_Transmit_DMA+0x42>
  __HAL_LOCK(hi2s);
 80069b8:	2002      	movs	r0, #2
}
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hi2s);
 80069bc:	2300      	movs	r3, #0
 80069be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 80069c2:	2002      	movs	r0, #2
}
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80069c8:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069ca:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 80069ce:	2100      	movs	r1, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069d0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80069d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80069d6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
 80069da:	4610      	mov	r0, r2
}
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
 80069de:	bf00      	nop

080069e0 <HAL_I2S_TxHalfCpltCallback>:
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069e4:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80069e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069e8:	f7ff fffa 	bl	80069e0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069ec:	bd08      	pop	{r3, pc}
 80069ee:	bf00      	nop

080069f0 <HAL_I2S_TxCpltCallback>:
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop

080069f4 <I2S_DMATxCplt>:
{
 80069f4:	b508      	push	{r3, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 80069f6:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80069fa:	b94b      	cbnz	r3, 8006a10 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80069fc:	6801      	ldr	r1, [r0, #0]
 80069fe:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006a00:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a04:	f022 0202 	bic.w	r2, r2, #2
 8006a08:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8006a0a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006a0c:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8006a10:	f7ff ffee 	bl	80069f0 <HAL_I2S_TxCpltCallback>
}
 8006a14:	bd08      	pop	{r3, pc}
 8006a16:	bf00      	nop

08006a18 <HAL_I2S_RxCpltCallback>:
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop

08006a1c <HAL_I2S_ErrorCallback>:
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a20:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a22:	6803      	ldr	r3, [r0, #0]
{
 8006a24:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a2a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006a2e:	2a04      	cmp	r2, #4
{
 8006a30:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a32:	d005      	beq.n	8006a40 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a34:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d031      	beq.n	8006aa0 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a3c:	b004      	add	sp, #16
 8006a3e:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	07d1      	lsls	r1, r2, #31
 8006a44:	d50f      	bpl.n	8006a66 <I2S_IRQHandler+0x46>
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	0652      	lsls	r2, r2, #25
 8006a4a:	d50c      	bpl.n	8006a66 <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a4c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8006a54:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8006a56:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8006a5e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8006a60:	b292      	uxth	r2, r2
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	d04a      	beq.n	8006afc <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	0659      	lsls	r1, r3, #25
 8006a6a:	d5e3      	bpl.n	8006a34 <I2S_IRQHandler+0x14>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	0692      	lsls	r2, r2, #26
 8006a72:	d5df      	bpl.n	8006a34 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a74:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a76:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a7c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a7e:	9102      	str	r1, [sp, #8]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	9202      	str	r2, [sp, #8]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8006a88:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a8a:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8006a8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a92:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8006a96:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a98:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006a9a:	f7ff ffbf 	bl	8006a1c <HAL_I2S_ErrorCallback>
 8006a9e:	e7c9      	b.n	8006a34 <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	d50f      	bpl.n	8006ac6 <I2S_IRQHandler+0xa6>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	0610      	lsls	r0, r2, #24
 8006aac:	d50b      	bpl.n	8006ac6 <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006aae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ab0:	f831 2b02 	ldrh.w	r2, [r1], #2
 8006ab4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ab6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8006ab8:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8006aba:	3a01      	subs	r2, #1
 8006abc:	b292      	uxth	r2, r2
 8006abe:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8006ac0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006ac2:	b292      	uxth	r2, r2
 8006ac4:	b322      	cbz	r2, 8006b10 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	0719      	lsls	r1, r3, #28
 8006aca:	d5b7      	bpl.n	8006a3c <I2S_IRQHandler+0x1c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	0692      	lsls	r2, r2, #26
 8006ad2:	d5b3      	bpl.n	8006a3c <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ad4:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ad6:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006adc:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ade:	9103      	str	r1, [sp, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8006ae4:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ae6:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8006ae8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aee:	f043 0304 	orr.w	r3, r3, #4
      HAL_I2S_ErrorCallback(hi2s);
 8006af2:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006af4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006af6:	f7ff ff91 	bl	8006a1c <HAL_I2S_ErrorCallback>
}
 8006afa:	e79f      	b.n	8006a3c <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006afc:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006afe:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b04:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006b06:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8006b0a:	f7ff ff85 	bl	8006a18 <HAL_I2S_RxCpltCallback>
 8006b0e:	e7aa      	b.n	8006a66 <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b10:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8006b12:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b18:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8006b1a:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8006b1c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8006b20:	f7ff ff66 	bl	80069f0 <HAL_I2S_TxCpltCallback>
 8006b24:	e7cf      	b.n	8006ac6 <I2S_IRQHandler+0xa6>
 8006b26:	bf00      	nop

08006b28 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b28:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006b2a:	6801      	ldr	r1, [r0, #0]
{
 8006b2c:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006b2e:	684b      	ldr	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8006b30:	2200      	movs	r2, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8006b32:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8006b3c:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006b3e:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8006b40:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b44:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006b46:	f043 0308 	orr.w	r3, r3, #8
 8006b4a:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8006b4c:	f7ff ff66 	bl	8006a1c <HAL_I2S_ErrorCallback>
}
 8006b50:	bd08      	pop	{r3, pc}
 8006b52:	bf00      	nop

08006b54 <HAL_I2SEx_TxRxCpltCallback>:
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b58:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006b5a:	6802      	ldr	r2, [r0, #0]
{
 8006b5c:	b086      	sub	sp, #24
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006b5e:	6893      	ldr	r3, [r2, #8]
 8006b60:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006b62:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006b66:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8006b6a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006b6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006b72:	428a      	cmp	r2, r1
 8006b74:	bf18      	it	ne
 8006b76:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
{
 8006b7a:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006b7c:	6899      	ldr	r1, [r3, #8]
 8006b7e:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006b80:	6851      	ldr	r1, [r2, #4]
 8006b82:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b88:	6841      	ldr	r1, [r0, #4]
 8006b8a:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8006b8e:	f000 8087 	beq.w	8006ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x148>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006b92:	9a01      	ldr	r2, [sp, #4]
 8006b94:	0792      	lsls	r2, r2, #30
 8006b96:	d51a      	bpl.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
 8006b98:	9a03      	ldr	r2, [sp, #12]
 8006b9a:	0611      	lsls	r1, r2, #24
 8006b9c:	d517      	bpl.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006ba0:	1c91      	adds	r1, r2, #2
 8006ba2:	8812      	ldrh	r2, [r2, #0]
 8006ba4:	6241      	str	r1, [r0, #36]	; 0x24
 8006ba6:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ba8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006baa:	3a01      	subs	r2, #1
 8006bac:	b292      	uxth	r2, r2
 8006bae:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bb0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	b95a      	cbnz	r2, 8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bbe:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	b923      	cbnz	r3, 8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bca:	f7ff ffc3 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	07da      	lsls	r2, r3, #31
 8006bd2:	d51c      	bpl.n	8006c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	065b      	lsls	r3, r3, #25
 8006bd8:	d519      	bpl.n	8006c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	1c98      	adds	r0, r3, #2
 8006be0:	68d1      	ldr	r1, [r2, #12]
 8006be2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006be4:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8006be6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	b963      	cbnz	r3, 8006c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bf4:	6853      	ldr	r3, [r2, #4]
 8006bf6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006bfa:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8006bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	b92b      	cbnz	r3, 8006c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff ffa3 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	0658      	lsls	r0, r3, #25
 8006c12:	d521      	bpl.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
 8006c14:	9b02      	ldr	r3, [sp, #8]
 8006c16:	0699      	lsls	r1, r3, #26
 8006c18:	d51e      	bpl.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c1a:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c1c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c20:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c22:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8006c26:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006c2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c2e:	4282      	cmp	r2, r0
 8006c30:	bf18      	it	ne
 8006c32:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c36:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006c3a:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c3c:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006c3e:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c44:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006c46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8006c50:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c52:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006c54:	f7ff fee2 	bl	8006a1c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	071a      	lsls	r2, r3, #28
 8006c5c:	f140 8085 	bpl.w	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	069b      	lsls	r3, r3, #26
 8006c64:	f140 8081 	bpl.w	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006c6e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8006c72:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006c76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c7a:	428a      	cmp	r2, r1
 8006c7c:	bf18      	it	ne
 8006c7e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8006c82:	f04f 0c01 	mov.w	ip, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8006c8c:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c8e:	6853      	ldr	r3, [r2, #4]
 8006c90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c94:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8006c96:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	e05c      	b.n	8006d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	0799      	lsls	r1, r3, #30
 8006ca4:	d502      	bpl.n	8006cac <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8006ca6:	9b02      	ldr	r3, [sp, #8]
 8006ca8:	061b      	lsls	r3, r3, #24
 8006caa:	d460      	bmi.n	8006d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x216>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006cac:	9b01      	ldr	r3, [sp, #4]
 8006cae:	07d8      	lsls	r0, r3, #31
 8006cb0:	d502      	bpl.n	8006cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	0659      	lsls	r1, r3, #25
 8006cb6:	d475      	bmi.n	8006da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	065a      	lsls	r2, r3, #25
 8006cbc:	d528      	bpl.n	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b8>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	069b      	lsls	r3, r3, #26
 8006cc2:	d525      	bpl.n	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006cca:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8006cce:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006cd2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006cd6:	428b      	cmp	r3, r1
 8006cd8:	bf18      	it	ne
 8006cda:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cde:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce0:	6851      	ldr	r1, [r2, #4]
 8006ce2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006ce6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cee:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cf0:	9004      	str	r0, [sp, #16]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	9204      	str	r2, [sp, #16]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8006cfa:	2101      	movs	r1, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cfc:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8006cfe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d04:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8006d08:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d0a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006d0c:	f7ff fe86 	bl	8006a1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	0718      	lsls	r0, r3, #28
 8006d14:	d529      	bpl.n	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	0699      	lsls	r1, r3, #26
 8006d1a:	d526      	bpl.n	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d1c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d1e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d22:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d24:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8006d28:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006d2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006d30:	4282      	cmp	r2, r0
 8006d32:	bf18      	it	ne
 8006d34:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d38:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8006d3c:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d3e:	6859      	ldr	r1, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d40:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d42:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006d46:	6059      	str	r1, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d48:	9005      	str	r0, [sp, #20]
 8006d4a:	6893      	ldr	r3, [r2, #8]
 8006d4c:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8006d4e:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d50:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8006d52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8006d58:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d5a:	f043 0304 	orr.w	r3, r3, #4
 8006d5e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006d60:	b006      	add	sp, #24
 8006d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8006d66:	f7ff be59 	b.w	8006a1c <HAL_I2S_ErrorCallback>
}
 8006d6a:	b006      	add	sp, #24
 8006d6c:	bd10      	pop	{r4, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006d6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d70:	1c99      	adds	r1, r3, #2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	6241      	str	r1, [r0, #36]	; 0x24
 8006d76:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8006d78:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8006d80:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d191      	bne.n	8006cac <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d88:	6853      	ldr	r3, [r2, #4]
 8006d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d8e:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8006d90:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d189      	bne.n	8006cac <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
      hi2s->State = HAL_I2S_STATE_READY;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d9e:	f7ff fed9 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
 8006da2:	e783      	b.n	8006cac <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006da8:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006dac:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8006db0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006db4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006db8:	4288      	cmp	r0, r1
 8006dba:	bf18      	it	ne
 8006dbc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8006dc0:	1c90      	adds	r0, r2, #2
 8006dc2:	68d9      	ldr	r1, [r3, #12]
 8006dc4:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006dc6:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8006dc8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006dd0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	f47f af6f 	bne.w	8006cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006de0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f47f af66 	bne.w	8006cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff feae 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
 8006df8:	e75e      	b.n	8006cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
 8006dfa:	bf00      	nop

08006dfc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f000 81e3 	beq.w	80071c8 <HAL_RCC_OscConfig+0x3cc>
{
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e06:	6803      	ldr	r3, [r0, #0]
 8006e08:	07dd      	lsls	r5, r3, #31
{
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e0e:	d535      	bpl.n	8006e7c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e10:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8006e14:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8006e18:	688a      	ldr	r2, [r1, #8]
 8006e1a:	f002 020c 	and.w	r2, r2, #12
 8006e1e:	2a04      	cmp	r2, #4
 8006e20:	f000 8115 	beq.w	800704e <HAL_RCC_OscConfig+0x252>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e24:	688a      	ldr	r2, [r1, #8]
 8006e26:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e2a:	2a08      	cmp	r2, #8
 8006e2c:	f000 810b 	beq.w	8007046 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	f000 8117 	beq.w	8007068 <HAL_RCC_OscConfig+0x26c>
 8006e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3e:	f000 81ad 	beq.w	800719c <HAL_RCC_OscConfig+0x3a0>
 8006e42:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8006e46:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8006e4a:	682a      	ldr	r2, [r5, #0]
 8006e4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	682a      	ldr	r2, [r5, #0]
 8006e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e58:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 810c 	bne.w	8007078 <HAL_RCC_OscConfig+0x27c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fd ff1e 	bl	8004ca0 <HAL_GetTick>
 8006e64:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e66:	e005      	b.n	8006e74 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e68:	f7fd ff1a 	bl	8004ca0 <HAL_GetTick>
 8006e6c:	1b80      	subs	r0, r0, r6
 8006e6e:	2864      	cmp	r0, #100	; 0x64
 8006e70:	f200 8132 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	039b      	lsls	r3, r3, #14
 8006e78:	d4f6      	bmi.n	8006e68 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	079f      	lsls	r7, r3, #30
 8006e7e:	d530      	bpl.n	8006ee2 <HAL_RCC_OscConfig+0xe6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006e84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006e88:	6891      	ldr	r1, [r2, #8]
 8006e8a:	f011 0f0c 	tst.w	r1, #12
 8006e8e:	f000 80aa 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x1ea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e92:	6891      	ldr	r1, [r2, #8]
 8006e94:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e98:	2908      	cmp	r1, #8
 8006e9a:	f000 80a0 	beq.w	8006fde <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 813b 	beq.w	800711c <HAL_RCC_OscConfig+0x320>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fd fef6 	bl	8004ca0 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb4:	f44f 5560 	mov.w	r5, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8006eb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8006ebe:	e005      	b.n	8006ecc <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec0:	f7fd feee 	bl	8004ca0 <HAL_GetTick>
 8006ec4:	1b80      	subs	r0, r0, r6
 8006ec6:	2802      	cmp	r0, #2
 8006ec8:	f200 8106 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	0798      	lsls	r0, r3, #30
 8006ed0:	d5f6      	bpl.n	8006ec0 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006eda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006ede:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	071a      	lsls	r2, r3, #28
 8006ee4:	d460      	bmi.n	8006fa8 <HAL_RCC_OscConfig+0x1ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ee6:	0758      	lsls	r0, r3, #29
 8006ee8:	d539      	bpl.n	8006f5e <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8006ef8:	f000 8099 	beq.w	800702e <HAL_RCC_OscConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8006efc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efe:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8006f02:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8006f06:	6833      	ldr	r3, [r6, #0]
 8006f08:	05d9      	lsls	r1, r3, #23
 8006f0a:	f140 80d5 	bpl.w	80070b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0e:	68a3      	ldr	r3, [r4, #8]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f000 80e5 	beq.w	80070e0 <HAL_RCC_OscConfig+0x2e4>
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	f000 8158 	beq.w	80071cc <HAL_RCC_OscConfig+0x3d0>
 8006f1c:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8006f20:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8006f24:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	6732      	str	r2, [r6, #112]	; 0x70
 8006f2c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006f2e:	f022 0204 	bic.w	r2, r2, #4
 8006f32:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 80db 	bne.w	80070f0 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3a:	f7fd feb1 	bl	8004ca0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006f42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f44:	e005      	b.n	8006f52 <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f46:	f7fd feab 	bl	8004ca0 <HAL_GetTick>
 8006f4a:	1bc0      	subs	r0, r0, r7
 8006f4c:	4540      	cmp	r0, r8
 8006f4e:	f200 80c3 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006f54:	0798      	lsls	r0, r3, #30
 8006f56:	d4f6      	bmi.n	8006f46 <HAL_RCC_OscConfig+0x14a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	f040 812c 	bne.w	80071b6 <HAL_RCC_OscConfig+0x3ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f5e:	69a0      	ldr	r0, [r4, #24]
 8006f60:	b1f0      	cbz	r0, 8006fa0 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f62:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8006f66:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8006f6a:	68ab      	ldr	r3, [r5, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	f000 80e9 	beq.w	8007148 <HAL_RCC_OscConfig+0x34c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f76:	2300      	movs	r3, #0
 8006f78:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8006f7c:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f80:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f82:	f000 8130 	beq.w	80071e6 <HAL_RCC_OscConfig+0x3ea>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f86:	f7fd fe8b 	bl	8004ca0 <HAL_GetTick>
 8006f8a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8c:	e005      	b.n	8006f9a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8e:	f7fd fe87 	bl	8004ca0 <HAL_GetTick>
 8006f92:	1b00      	subs	r0, r0, r4
 8006f94:	2802      	cmp	r0, #2
 8006f96:	f200 809f 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	019b      	lsls	r3, r3, #6
 8006f9e:	d4f6      	bmi.n	8006f8e <HAL_RCC_OscConfig+0x192>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2000      	movs	r0, #0
}
 8006fa2:	b002      	add	sp, #8
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fa8:	6963      	ldr	r3, [r4, #20]
 8006faa:	b353      	cbz	r3, 8007002 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_LSI_ENABLE();
 8006fac:	2300      	movs	r3, #0
 8006fae:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8006fb8:	f7fd fe72 	bl	8004ca0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fbc:	f44f 5660 	mov.w	r6, #14336	; 0x3800
      tickstart = HAL_GetTick();
 8006fc0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fc2:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fc8:	f7fd fe6a 	bl	8004ca0 <HAL_GetTick>
 8006fcc:	1b40      	subs	r0, r0, r5
 8006fce:	2802      	cmp	r0, #2
 8006fd0:	f200 8082 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006fd6:	079b      	lsls	r3, r3, #30
 8006fd8:	d5f6      	bpl.n	8006fc8 <HAL_RCC_OscConfig+0x1cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	e783      	b.n	8006ee6 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fde:	6852      	ldr	r2, [r2, #4]
 8006fe0:	0256      	lsls	r6, r2, #9
 8006fe2:	f53f af5c 	bmi.w	8006e9e <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fe6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006fea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	0795      	lsls	r5, r2, #30
 8006ff2:	d552      	bpl.n	800709a <HAL_RCC_OscConfig+0x29e>
 8006ff4:	68e2      	ldr	r2, [r4, #12]
 8006ff6:	2a01      	cmp	r2, #1
 8006ff8:	d04f      	beq.n	800709a <HAL_RCC_OscConfig+0x29e>
        return HAL_ERROR;
 8006ffa:	2001      	movs	r0, #1
}
 8006ffc:	b002      	add	sp, #8
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007002:	2200      	movs	r2, #0
 8007004:	f2c4 2247 	movt	r2, #16967	; 0x4247
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007008:	f44f 5660 	mov.w	r6, #14336	; 0x3800
      __HAL_RCC_LSI_DISABLE();
 800700c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8007010:	f7fd fe46 	bl	8004ca0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007014:	f2c4 0602 	movt	r6, #16386	; 0x4002
      tickstart = HAL_GetTick();
 8007018:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800701a:	e004      	b.n	8007026 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800701c:	f7fd fe40 	bl	8004ca0 <HAL_GetTick>
 8007020:	1b40      	subs	r0, r0, r5
 8007022:	2802      	cmp	r0, #2
 8007024:	d858      	bhi.n	80070d8 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007026:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007028:	079f      	lsls	r7, r3, #30
 800702a:	d4f7      	bmi.n	800701c <HAL_RCC_OscConfig+0x220>
 800702c:	e7d5      	b.n	8006fda <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_ENABLE();
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007032:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007036:	641a      	str	r2, [r3, #64]	; 0x40
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007042:	2501      	movs	r5, #1
 8007044:	e75b      	b.n	8006efe <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007046:	684a      	ldr	r2, [r1, #4]
 8007048:	0250      	lsls	r0, r2, #9
 800704a:	f57f aef1 	bpl.w	8006e30 <HAL_RCC_OscConfig+0x34>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007052:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	0391      	lsls	r1, r2, #14
 800705a:	f57f af0f 	bpl.w	8006e7c <HAL_RCC_OscConfig+0x80>
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	2a00      	cmp	r2, #0
 8007062:	f47f af0b 	bne.w	8006e7c <HAL_RCC_OscConfig+0x80>
 8007066:	e7c8      	b.n	8006ffa <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007068:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800706c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007076:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007078:	f7fd fe12 	bl	8004ca0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707c:	f44f 5660 	mov.w	r6, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8007080:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007082:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8007086:	e004      	b.n	8007092 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007088:	f7fd fe0a 	bl	8004ca0 <HAL_GetTick>
 800708c:	1b40      	subs	r0, r0, r5
 800708e:	2864      	cmp	r0, #100	; 0x64
 8007090:	d822      	bhi.n	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	6833      	ldr	r3, [r6, #0]
 8007094:	039a      	lsls	r2, r3, #14
 8007096:	d5f7      	bpl.n	8007088 <HAL_RCC_OscConfig+0x28c>
 8007098:	e6ef      	b.n	8006e7a <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800709e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80070a2:	6920      	ldr	r0, [r4, #16]
 80070a4:	680a      	ldr	r2, [r1, #0]
 80070a6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80070aa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80070ae:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070b0:	071a      	lsls	r2, r3, #28
 80070b2:	f57f af18 	bpl.w	8006ee6 <HAL_RCC_OscConfig+0xea>
 80070b6:	e777      	b.n	8006fa8 <HAL_RCC_OscConfig+0x1ac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070be:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80070c0:	f7fd fdee 	bl	8004ca0 <HAL_GetTick>
 80070c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c6:	6833      	ldr	r3, [r6, #0]
 80070c8:	05da      	lsls	r2, r3, #23
 80070ca:	f53f af20 	bmi.w	8006f0e <HAL_RCC_OscConfig+0x112>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ce:	f7fd fde7 	bl	8004ca0 <HAL_GetTick>
 80070d2:	1bc0      	subs	r0, r0, r7
 80070d4:	2802      	cmp	r0, #2
 80070d6:	d9f6      	bls.n	80070c6 <HAL_RCC_OscConfig+0x2ca>
            return HAL_TIMEOUT;
 80070d8:	2003      	movs	r0, #3
}
 80070da:	b002      	add	sp, #8
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80070e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80070e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80070f0:	f7fd fdd6 	bl	8004ca0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f4:	f44f 5760 	mov.w	r7, #14336	; 0x3800
      tickstart = HAL_GetTick();
 80070f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fa:	f2c4 0702 	movt	r7, #16386	; 0x4002
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070fe:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007102:	e004      	b.n	800710e <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fd fdcc 	bl	8004ca0 <HAL_GetTick>
 8007108:	1b80      	subs	r0, r0, r6
 800710a:	4540      	cmp	r0, r8
 800710c:	d8e4      	bhi.n	80070d8 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007110:	079b      	lsls	r3, r3, #30
 8007112:	d5f7      	bpl.n	8007104 <HAL_RCC_OscConfig+0x308>
    if(pwrclkchanged == SET)
 8007114:	2d00      	cmp	r5, #0
 8007116:	f43f af22 	beq.w	8006f5e <HAL_RCC_OscConfig+0x162>
 800711a:	e04c      	b.n	80071b6 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_DISABLE();
 800711c:	2200      	movs	r2, #0
 800711e:	f2c4 2247 	movt	r2, #16967	; 0x4247
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007122:	f44f 5660 	mov.w	r6, #14336	; 0x3800
        __HAL_RCC_HSI_DISABLE();
 8007126:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007128:	f7fd fdba 	bl	8004ca0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712c:	f2c4 0602 	movt	r6, #16386	; 0x4002
        tickstart = HAL_GetTick();
 8007130:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007132:	e004      	b.n	800713e <HAL_RCC_OscConfig+0x342>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007134:	f7fd fdb4 	bl	8004ca0 <HAL_GetTick>
 8007138:	1b40      	subs	r0, r0, r5
 800713a:	2802      	cmp	r0, #2
 800713c:	d8cc      	bhi.n	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713e:	6833      	ldr	r3, [r6, #0]
 8007140:	0799      	lsls	r1, r3, #30
 8007142:	d4f7      	bmi.n	8007134 <HAL_RCC_OscConfig+0x338>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	e6cc      	b.n	8006ee2 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007148:	2801      	cmp	r0, #1
 800714a:	f43f af2a 	beq.w	8006fa2 <HAL_RCC_OscConfig+0x1a6>
        pll_config = RCC->PLLCFGR;
 800714e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007150:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007156:	4291      	cmp	r1, r2
 8007158:	f47f af4f 	bne.w	8006ffa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800715c:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800715e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007162:	4291      	cmp	r1, r2
 8007164:	f47f af49 	bne.w	8006ffa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007168:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800716a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800716e:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007170:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007174:	f47f af41 	bne.w	8006ffa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007178:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800717a:	0852      	lsrs	r2, r2, #1
 800717c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8007180:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007182:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8007186:	f47f af38 	bne.w	8006ffa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800718a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800718c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007190:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8007194:	bf14      	ite	ne
 8007196:	2001      	movne	r0, #1
 8007198:	2000      	moveq	r0, #0
 800719a:	e702      	b.n	8006fa2 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800719c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071b2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071b4:	e760      	b.n	8007078 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
 80071c6:	e6ca      	b.n	8006f5e <HAL_RCC_OscConfig+0x162>
    return HAL_ERROR;
 80071c8:	2001      	movs	r0, #1
}
 80071ca:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071d6:	f042 0204 	orr.w	r2, r2, #4
 80071da:	671a      	str	r2, [r3, #112]	; 0x70
 80071dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e4:	e784      	b.n	80070f0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80071e6:	f7fd fd5b 	bl	8004ca0 <HAL_GetTick>
 80071ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ec:	e005      	b.n	80071fa <HAL_RCC_OscConfig+0x3fe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ee:	f7fd fd57 	bl	8004ca0 <HAL_GetTick>
 80071f2:	1b80      	subs	r0, r0, r6
 80071f4:	2802      	cmp	r0, #2
 80071f6:	f63f af6f 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	0199      	lsls	r1, r3, #6
 80071fe:	d4f6      	bmi.n	80071ee <HAL_RCC_OscConfig+0x3f2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007200:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8007204:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007206:	430b      	orrs	r3, r1
 8007208:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800720c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
        __HAL_RCC_PLL_ENABLE();
 8007210:	2100      	movs	r1, #0
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007212:	0852      	lsrs	r2, r2, #1
 8007214:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007218:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800721a:	f2c4 2147 	movt	r1, #16967	; 0x4247
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800721e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8007222:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007224:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007226:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007228:	f7fd fd3a 	bl	8004ca0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722c:	f44f 5560 	mov.w	r5, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8007230:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007232:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007236:	e005      	b.n	8007244 <HAL_RCC_OscConfig+0x448>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007238:	f7fd fd32 	bl	8004ca0 <HAL_GetTick>
 800723c:	1b00      	subs	r0, r0, r4
 800723e:	2802      	cmp	r0, #2
 8007240:	f63f af4a 	bhi.w	80070d8 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	019a      	lsls	r2, r3, #6
 8007248:	d5f6      	bpl.n	8007238 <HAL_RCC_OscConfig+0x43c>
 800724a:	e6a9      	b.n	8006fa0 <HAL_RCC_OscConfig+0x1a4>

0800724c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800724c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007250:	f2c4 0102 	movt	r1, #16386	; 0x4002
{
 8007254:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007256:	688b      	ldr	r3, [r1, #8]
 8007258:	f003 030c 	and.w	r3, r3, #12
 800725c:	2b04      	cmp	r3, #4
 800725e:	d024      	beq.n	80072aa <HAL_RCC_GetSysClockFreq+0x5e>
 8007260:	2b08      	cmp	r3, #8
 8007262:	d11d      	bne.n	80072a0 <HAL_RCC_GetSysClockFreq+0x54>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007266:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007268:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800726a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800726e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007272:	d11f      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x68>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007274:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8007278:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800727c:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8007280:	fba1 0100 	umull	r0, r1, r1, r0
 8007284:	f7f9 fd10 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007288:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800728c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007296:	3301      	adds	r3, #1
 8007298:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800729a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800729e:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80072a0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80072a4:	f2c0 00f4 	movt	r0, #244	; 0xf4
}
 80072a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072aa:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 80072ae:	f2c0 007a 	movt	r0, #122	; 0x7a
}
 80072b2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b4:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 80072b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80072bc:	f2c0 007a 	movt	r0, #122	; 0x7a
 80072c0:	2300      	movs	r3, #0
 80072c2:	fba1 0100 	umull	r0, r1, r1, r0
 80072c6:	f7f9 fcef 	bl	8000ca8 <__aeabi_uldivmod>
 80072ca:	e7dd      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x3c>

080072cc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f000 80ae 	beq.w	800742e <HAL_RCC_ClockConfig+0x162>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 80072da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	f002 0207 	and.w	r2, r2, #7
 80072e4:	428a      	cmp	r2, r1
 80072e6:	460d      	mov	r5, r1
 80072e8:	4604      	mov	r4, r0
 80072ea:	d209      	bcs.n	8007300 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ec:	b2ca      	uxtb	r2, r1
 80072ee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	428b      	cmp	r3, r1
 80072f8:	d002      	beq.n	8007300 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80072fa:	2001      	movs	r0, #1
}
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	0798      	lsls	r0, r3, #30
 8007304:	d51d      	bpl.n	8007342 <HAL_RCC_ClockConfig+0x76>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007306:	0759      	lsls	r1, r3, #29
 8007308:	d507      	bpl.n	800731a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800730a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800730e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007312:	6891      	ldr	r1, [r2, #8]
 8007314:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8007318:	6091      	str	r1, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731a:	071a      	lsls	r2, r3, #28
 800731c:	d507      	bpl.n	800732e <HAL_RCC_ClockConfig+0x62>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800731e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007322:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007326:	6891      	ldr	r1, [r2, #8]
 8007328:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800732c:	6091      	str	r1, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800732e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007332:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007336:	68a0      	ldr	r0, [r4, #8]
 8007338:	688a      	ldr	r2, [r1, #8]
 800733a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800733e:	4302      	orrs	r2, r0
 8007340:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007342:	07df      	lsls	r7, r3, #31
 8007344:	d527      	bpl.n	8007396 <HAL_RCC_ClockConfig+0xca>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007346:	6862      	ldr	r2, [r4, #4]
 8007348:	2a01      	cmp	r2, #1
 800734a:	d072      	beq.n	8007432 <HAL_RCC_ClockConfig+0x166>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800734c:	1e93      	subs	r3, r2, #2
 800734e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007350:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007354:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007358:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800735a:	d965      	bls.n	8007428 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735c:	0799      	lsls	r1, r3, #30
 800735e:	d5cc      	bpl.n	80072fa <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007360:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8007364:	f2c4 0602 	movt	r6, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007368:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800736c:	68b3      	ldr	r3, [r6, #8]
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	4313      	orrs	r3, r2
 8007374:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007376:	f7fd fc93 	bl	8004ca0 <HAL_GetTick>
 800737a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737c:	e004      	b.n	8007388 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800737e:	f7fd fc8f 	bl	8004ca0 <HAL_GetTick>
 8007382:	1bc0      	subs	r0, r0, r7
 8007384:	4540      	cmp	r0, r8
 8007386:	d85c      	bhi.n	8007442 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007388:	68b3      	ldr	r3, [r6, #8]
 800738a:	6862      	ldr	r2, [r4, #4]
 800738c:	f003 030c 	and.w	r3, r3, #12
 8007390:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007394:	d1f3      	bne.n	800737e <HAL_RCC_ClockConfig+0xb2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007396:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800739a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800739e:	6813      	ldr	r3, [r2, #0]
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	42ab      	cmp	r3, r5
 80073a6:	d906      	bls.n	80073b6 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a8:	b2eb      	uxtb	r3, r5
 80073aa:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ac:	6813      	ldr	r3, [r2, #0]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	42ab      	cmp	r3, r5
 80073b4:	d1a1      	bne.n	80072fa <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	075a      	lsls	r2, r3, #29
 80073ba:	d509      	bpl.n	80073d0 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073bc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80073c0:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	688a      	ldr	r2, [r1, #8]
 80073c8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80073cc:	4302      	orrs	r2, r0
 80073ce:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d0:	071b      	lsls	r3, r3, #28
 80073d2:	d50a      	bpl.n	80073ea <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80073d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80073dc:	6921      	ldr	r1, [r4, #16]
 80073de:	6893      	ldr	r3, [r2, #8]
 80073e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80073e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80073e8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ea:	f7ff ff2f 	bl	800724c <HAL_RCC_GetSysClockFreq>
 80073ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80073f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073f6:	f64e 720c 	movw	r2, #61196	; 0xef0c
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007400:	f3c3 1303 	ubfx	r3, r3, #4, #4
  HAL_InitTick (uwTickPrio);
 8007404:	f240 0178 	movw	r1, #120	; 0x78
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007408:	5cd2      	ldrb	r2, [r2, r3]
  HAL_InitTick (uwTickPrio);
 800740a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800740e:	f240 0370 	movw	r3, #112	; 0x70
 8007412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007416:	fa20 f202 	lsr.w	r2, r0, r2
  HAL_InitTick (uwTickPrio);
 800741a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800741c:	601a      	str	r2, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800741e:	f7fd fbed 	bl	8004bfc <HAL_InitTick>
  return HAL_OK;
 8007422:	2000      	movs	r0, #0
}
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007428:	0198      	lsls	r0, r3, #6
 800742a:	d499      	bmi.n	8007360 <HAL_RCC_ClockConfig+0x94>
 800742c:	e765      	b.n	80072fa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
}
 8007430:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007432:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007436:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	039e      	lsls	r6, r3, #14
 800743e:	d48f      	bmi.n	8007360 <HAL_RCC_ClockConfig+0x94>
 8007440:	e75b      	b.n	80072fa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007442:	2003      	movs	r0, #3
 8007444:	e75a      	b.n	80072fc <HAL_RCC_ClockConfig+0x30>
 8007446:	bf00      	nop

08007448 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007448:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800744c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  return SystemCoreClock;
 8007450:	f240 0170 	movw	r1, #112	; 0x70
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f64e 721c 	movw	r2, #61212	; 0xef1c
  return SystemCoreClock;
 800745a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800745e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007462:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007466:	6808      	ldr	r0, [r1, #0]
 8007468:	5cd3      	ldrb	r3, [r2, r3]
}
 800746a:	40d8      	lsrs	r0, r3
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007470:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007474:	f2c4 0302 	movt	r3, #16386	; 0x4002
  return SystemCoreClock;
 8007478:	f240 0170 	movw	r1, #112	; 0x70
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f64e 721c 	movw	r2, #61212	; 0xef1c
  return SystemCoreClock;
 8007482:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007486:	f6c0 0200 	movt	r2, #2048	; 0x800
 800748a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800748e:	6808      	ldr	r0, [r1, #0]
 8007490:	5cd3      	ldrb	r3, [r2, r3]
}
 8007492:	40d8      	lsrs	r0, r3
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop

08007498 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800749a:	6803      	ldr	r3, [r0, #0]
 800749c:	f013 0f05 	tst.w	r3, #5
{
 80074a0:	b083      	sub	sp, #12
 80074a2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074a4:	d105      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074a6:	f013 0302 	ands.w	r3, r3, #2
 80074aa:	d145      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074ac:	4618      	mov	r0, r3
}
 80074ae:	b003      	add	sp, #12
 80074b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80074b8:	2200      	movs	r2, #0
 80074ba:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80074bc:	f7fd fbf0 	bl	8004ca0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074c0:	f44f 5560 	mov.w	r5, #14336	; 0x3800
    tickstart = HAL_GetTick();
 80074c4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074c6:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074cc:	f7fd fbe8 	bl	8004ca0 <HAL_GetTick>
 80074d0:	1b83      	subs	r3, r0, r6
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d82d      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	011f      	lsls	r7, r3, #4
 80074da:	d4f7      	bmi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074dc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 80074e0:	2200      	movs	r2, #0
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074e2:	071b      	lsls	r3, r3, #28
 80074e4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 80074e8:	f2c4 2247 	movt	r2, #16967	; 0x4247
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074ec:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80074f0:	2301      	movs	r3, #1
 80074f2:	6693      	str	r3, [r2, #104]	; 0x68
    tickstart = HAL_GetTick();
 80074f4:	f7fd fbd4 	bl	8004ca0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f8:	f44f 5660 	mov.w	r6, #14336	; 0x3800
    tickstart = HAL_GetTick();
 80074fc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074fe:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8007502:	e004      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x76>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007504:	f7fd fbcc 	bl	8004ca0 <HAL_GetTick>
 8007508:	1b40      	subs	r0, r0, r5
 800750a:	2802      	cmp	r0, #2
 800750c:	d811      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800750e:	6833      	ldr	r3, [r6, #0]
 8007510:	0118      	lsls	r0, r3, #4
 8007512:	d5f7      	bpl.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	e7c6      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8007518:	f7fd fbc2 	bl	8004ca0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800751c:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007520:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007522:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007524:	079b      	lsls	r3, r3, #30
 8007526:	d447      	bmi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007528:	f7fd fbba 	bl	8004ca0 <HAL_GetTick>
 800752c:	1b80      	subs	r0, r0, r6
 800752e:	42b8      	cmp	r0, r7
 8007530:	d9f7      	bls.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        return HAL_TIMEOUT;
 8007532:	2003      	movs	r0, #3
}
 8007534:	b003      	add	sp, #12
 8007536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8007538:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800753c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007540:	2200      	movs	r2, #0
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_DBP;
 800754e:	f44f 45e0 	mov.w	r5, #28672	; 0x7000
 8007552:	f2c4 0500 	movt	r5, #16384	; 0x4000
    __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007564:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007566:	f7fd fb9b 	bl	8004ca0 <HAL_GetTick>
 800756a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800756c:	e004      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800756e:	f7fd fb97 	bl	8004ca0 <HAL_GetTick>
 8007572:	1b83      	subs	r3, r0, r6
 8007574:	2b02      	cmp	r3, #2
 8007576:	d8dc      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	05d9      	lsls	r1, r3, #23
 800757c:	d5f7      	bpl.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800757e:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8007582:	f2c4 0502 	movt	r5, #16386	; 0x4002
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007586:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007588:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800758a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800758e:	d014      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x122>
 8007590:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8007594:	4291      	cmp	r1, r2
 8007596:	d012      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007598:	2200      	movs	r2, #0
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800759a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800759c:	f2c4 2247 	movt	r2, #16967	; 0x4247
 80075a0:	2101      	movs	r1, #1
 80075a2:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075aa:	2100      	movs	r1, #0
 80075ac:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80075b0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80075b4:	07da      	lsls	r2, r3, #31
 80075b6:	d4af      	bmi.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x80>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b8:	68e3      	ldr	r3, [r4, #12]
 80075ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80075be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80075c2:	d013      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80075c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80075c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80075cc:	6891      	ldr	r1, [r2, #8]
 80075ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80075d2:	6091      	str	r1, [r2, #8]
 80075d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80075d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80075dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
  return HAL_OK;
 80075e2:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075e4:	430b      	orrs	r3, r1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80075e8:	b003      	add	sp, #12
 80075ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ec:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80075f0:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80075f4:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80075f8:	688a      	ldr	r2, [r1, #8]
 80075fa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80075fe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007602:	4302      	orrs	r2, r0
 8007604:	608a      	str	r2, [r1, #8]
 8007606:	e7e5      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>

08007608 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8007608:	2801      	cmp	r0, #1
 800760a:	d001      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 800760c:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800760e:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007610:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007618:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800761a:	0211      	lsls	r1, r2, #8
 800761c:	d4f6      	bmi.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x4>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800761e:	685a      	ldr	r2, [r3, #4]
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007620:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007622:	0252      	lsls	r2, r2, #9
 8007624:	d518      	bpl.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007626:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 800762a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762e:	f2c0 007a 	movt	r0, #122	; 0x7a
 8007632:	fbb0 f3f3 	udiv	r3, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007636:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800763a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800763e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007642:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007646:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800764a:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800764e:	f3c2 7302 	ubfx	r3, r2, #28, #3
 8007652:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8007656:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007658:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800765c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007660:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8007664:	fbb0 f3f3 	udiv	r3, r0, r3
 8007668:	e7e5      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 800766a:	bf00      	nop

0800766c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800766c:	2800      	cmp	r0, #0
 800766e:	f000 809e 	beq.w	80077ae <HAL_TIM_Base_Init+0x142>
{
 8007672:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007674:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007678:	4604      	mov	r4, r0
 800767a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8090 	beq.w	80077a4 <HAL_TIM_Base_Init+0x138>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007684:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007686:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800768a:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 800768e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007692:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007694:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007696:	d071      	beq.n	800777c <HAL_TIM_Base_Init+0x110>
 8007698:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800769c:	d045      	beq.n	800772a <HAL_TIM_Base_Init+0xbe>
 800769e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076a2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80076a6:	428a      	cmp	r2, r1
 80076a8:	d03f      	beq.n	800772a <HAL_TIM_Base_Init+0xbe>
 80076aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076ae:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80076b2:	428a      	cmp	r2, r1
 80076b4:	d039      	beq.n	800772a <HAL_TIM_Base_Init+0xbe>
 80076b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80076ba:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80076be:	428a      	cmp	r2, r1
 80076c0:	d033      	beq.n	800772a <HAL_TIM_Base_Init+0xbe>
 80076c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076c6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80076ca:	428a      	cmp	r2, r1
 80076cc:	d056      	beq.n	800777c <HAL_TIM_Base_Init+0x110>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076d2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80076d6:	428a      	cmp	r2, r1
 80076d8:	d02b      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
 80076da:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80076de:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80076e2:	428a      	cmp	r2, r1
 80076e4:	d025      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
 80076e6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80076ea:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80076ee:	428a      	cmp	r2, r1
 80076f0:	d01f      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
 80076f2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80076f6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80076fa:	428a      	cmp	r2, r1
 80076fc:	d019      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
 80076fe:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8007702:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007706:	428a      	cmp	r2, r1
 8007708:	d013      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
 800770a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800770e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007712:	428a      	cmp	r2, r1
 8007714:	d00d      	beq.n	8007732 <HAL_TIM_Base_Init+0xc6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007716:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007718:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800771a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800771e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007720:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007722:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007724:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007726:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007728:	e010      	b.n	800774c <HAL_TIM_Base_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 800772a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800772c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007730:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007732:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007734:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800773a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800773c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007740:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007742:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007744:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007746:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007748:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800774a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	2301      	movs	r3, #1
 800774e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007750:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007758:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800775c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007760:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800776c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007774:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007778:	2000      	movs	r0, #0
}
 800777a:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800777c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007784:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	69a1      	ldr	r1, [r4, #24]
 800778e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007792:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007794:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800779e:	6963      	ldr	r3, [r4, #20]
 80077a0:	6313      	str	r3, [r2, #48]	; 0x30
 80077a2:	e7d3      	b.n	800774c <HAL_TIM_Base_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 80077a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80077a8:	f7fc f8d4 	bl	8003954 <HAL_TIM_Base_MspInit>
 80077ac:	e76a      	b.n	8007684 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80077ae:	2001      	movs	r0, #1
}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop

080077b4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80077b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d13a      	bne.n	8007832 <HAL_TIM_Base_Start+0x7e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077bc:	6803      	ldr	r3, [r0, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c6:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	d026      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 80077ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d2:	d023      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 80077d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80077dc:	4293      	cmp	r3, r2
 80077de:	d01d      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 80077e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d017      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 80077ec:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80077f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d011      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 80077f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007800:	4293      	cmp	r3, r2
 8007802:	d00b      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 8007804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007808:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800780c:	4293      	cmp	r3, r2
 800780e:	d005      	beq.n	800781c <HAL_TIM_Base_Start+0x68>
 8007810:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007814:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007818:	4293      	cmp	r3, r2
 800781a:	d104      	bne.n	8007826 <HAL_TIM_Base_Start+0x72>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007822:	2a06      	cmp	r2, #6
 8007824:	d007      	beq.n	8007836 <HAL_TIM_Base_Start+0x82>
    __HAL_TIM_ENABLE(htim);
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800782c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	4770      	bx	lr
    return HAL_ERROR;
 8007832:	2001      	movs	r0, #1
 8007834:	4770      	bx	lr
  return HAL_OK;
 8007836:	2000      	movs	r0, #0
}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop

0800783c <HAL_TIM_PWM_MspInit>:
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop

08007840 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007840:	2800      	cmp	r0, #0
 8007842:	f000 809e 	beq.w	8007982 <HAL_TIM_PWM_Init+0x142>
{
 8007846:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007848:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800784c:	4604      	mov	r4, r0
 800784e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8090 	beq.w	8007978 <HAL_TIM_PWM_Init+0x138>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007858:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800785a:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800785e:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 8007862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007866:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007868:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800786a:	d071      	beq.n	8007950 <HAL_TIM_PWM_Init+0x110>
 800786c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007870:	d045      	beq.n	80078fe <HAL_TIM_PWM_Init+0xbe>
 8007872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007876:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800787a:	428a      	cmp	r2, r1
 800787c:	d03f      	beq.n	80078fe <HAL_TIM_PWM_Init+0xbe>
 800787e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007882:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007886:	428a      	cmp	r2, r1
 8007888:	d039      	beq.n	80078fe <HAL_TIM_PWM_Init+0xbe>
 800788a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800788e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007892:	428a      	cmp	r2, r1
 8007894:	d033      	beq.n	80078fe <HAL_TIM_PWM_Init+0xbe>
 8007896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800789a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800789e:	428a      	cmp	r2, r1
 80078a0:	d056      	beq.n	8007950 <HAL_TIM_PWM_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078a6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80078aa:	428a      	cmp	r2, r1
 80078ac:	d02b      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
 80078ae:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80078b2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80078b6:	428a      	cmp	r2, r1
 80078b8:	d025      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
 80078ba:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80078be:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80078c2:	428a      	cmp	r2, r1
 80078c4:	d01f      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
 80078c6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80078ca:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80078ce:	428a      	cmp	r2, r1
 80078d0:	d019      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
 80078d2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80078d6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80078da:	428a      	cmp	r2, r1
 80078dc:	d013      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
 80078de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078e2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80078e6:	428a      	cmp	r2, r1
 80078e8:	d00d      	beq.n	8007906 <HAL_TIM_PWM_Init+0xc6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ea:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ec:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80078f4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80078f6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078fa:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078fc:	e010      	b.n	8007920 <HAL_TIM_PWM_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 80078fe:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007904:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007906:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007908:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007914:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007916:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007918:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800791a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800791c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800791e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007920:	2301      	movs	r3, #1
 8007922:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007924:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007928:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800792c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007930:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007934:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007944:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007948:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800794c:	2000      	movs	r0, #0
}
 800794e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007950:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007952:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007958:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800795a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007960:	69a1      	ldr	r1, [r4, #24]
 8007962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007966:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007968:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007972:	6963      	ldr	r3, [r4, #20]
 8007974:	6313      	str	r3, [r2, #48]	; 0x30
 8007976:	e7d3      	b.n	8007920 <HAL_TIM_PWM_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 8007978:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800797c:	f7ff ff5e 	bl	800783c <HAL_TIM_PWM_MspInit>
 8007980:	e76a      	b.n	8007858 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8007982:	2001      	movs	r0, #1
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <HAL_TIM_PWM_Start>:
 8007988:	2900      	cmp	r1, #0
 800798a:	d14c      	bne.n	8007a26 <HAL_TIM_PWM_Start+0x9e>
 800798c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007990:	2b01      	cmp	r3, #1
 8007992:	d150      	bne.n	8007a36 <HAL_TIM_PWM_Start+0xae>
 8007994:	2302      	movs	r3, #2
 8007996:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800799a:	6803      	ldr	r3, [r0, #0]
 800799c:	2201      	movs	r2, #1
 800799e:	6a18      	ldr	r0, [r3, #32]
 80079a0:	f001 011f 	and.w	r1, r1, #31
 80079a4:	fa02 f101 	lsl.w	r1, r2, r1
 80079a8:	ea20 0001 	bic.w	r0, r0, r1
 80079ac:	6218      	str	r0, [r3, #32]
 80079ae:	6a18      	ldr	r0, [r3, #32]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80079b6:	4301      	orrs	r1, r0
 80079b8:	4293      	cmp	r3, r2
 80079ba:	6219      	str	r1, [r3, #32]
 80079bc:	d045      	beq.n	8007a4a <HAL_TIM_PWM_Start+0xc2>
 80079be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d03f      	beq.n	8007a4a <HAL_TIM_PWM_Start+0xc2>
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ce:	d01f      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 80079d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079d4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80079d8:	428b      	cmp	r3, r1
 80079da:	d019      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 80079dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079e0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80079e4:	428b      	cmp	r3, r1
 80079e6:	d013      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 80079e8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80079ec:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80079f0:	428b      	cmp	r3, r1
 80079f2:	d00d      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00b      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 80079f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d005      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x88>
 8007a04:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007a08:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_PWM_Start+0x92>
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	f002 0207 	and.w	r2, r2, #7
 8007a16:	2a06      	cmp	r2, #6
 8007a18:	d020      	beq.n	8007a5c <HAL_TIM_PWM_Start+0xd4>
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f042 0201 	orr.w	r2, r2, #1
 8007a20:	2000      	movs	r0, #0
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	4770      	bx	lr
 8007a26:	2904      	cmp	r1, #4
 8007a28:	d022      	beq.n	8007a70 <HAL_TIM_PWM_Start+0xe8>
 8007a2a:	2908      	cmp	r1, #8
 8007a2c:	d018      	beq.n	8007a60 <HAL_TIM_PWM_Start+0xd8>
 8007a2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d001      	beq.n	8007a3a <HAL_TIM_PWM_Start+0xb2>
 8007a36:	2001      	movs	r0, #1
 8007a38:	4770      	bx	lr
 8007a3a:	2904      	cmp	r1, #4
 8007a3c:	d01c      	beq.n	8007a78 <HAL_TIM_PWM_Start+0xf0>
 8007a3e:	2908      	cmp	r1, #8
 8007a40:	d012      	beq.n	8007a68 <HAL_TIM_PWM_Start+0xe0>
 8007a42:	2302      	movs	r3, #2
 8007a44:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007a48:	e7a7      	b.n	800799a <HAL_TIM_PWM_Start+0x12>
 8007a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	f002 0207 	and.w	r2, r2, #7
 8007a58:	2a06      	cmp	r2, #6
 8007a5a:	d1de      	bne.n	8007a1a <HAL_TIM_PWM_Start+0x92>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	4770      	bx	lr
 8007a60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d1e6      	bne.n	8007a36 <HAL_TIM_PWM_Start+0xae>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007a6e:	e794      	b.n	800799a <HAL_TIM_PWM_Start+0x12>
 8007a70:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d1de      	bne.n	8007a36 <HAL_TIM_PWM_Start+0xae>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007a7e:	e78c      	b.n	800799a <HAL_TIM_PWM_Start+0x12>

08007a80 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f000 80e8 	beq.w	8007c5a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8007a8a:	2301      	movs	r3, #1
{
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8007a90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007a94:	2a0c      	cmp	r2, #12
 8007a96:	d808      	bhi.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007a98:	e8df f002 	tbb	[pc, r2]
 8007a9c:	07070743 	.word	0x07070743
 8007aa0:	07070777 	.word	0x07070777
 8007aa4:	070707ac 	.word	0x070707ac
 8007aa8:	0c          	.byte	0x0c
 8007aa9:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 8007ab0:	2001      	movs	r0, #1
}
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab4:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab6:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007abe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007ac2:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8007ac4:	69d8      	ldr	r0, [r3, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac6:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007aca:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ace:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad2:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ade:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	f000 80db 	beq.w	8007c9c <HAL_TIM_PWM_ConfigChannel+0x21c>
 8007ae6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8007aea:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8007aee:	4573      	cmp	r3, lr
 8007af0:	f000 80d4 	beq.w	8007c9c <HAL_TIM_PWM_ConfigChannel+0x21c>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af4:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af6:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007af8:	6848      	ldr	r0, [r1, #4]
 8007afa:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007afe:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b00:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b02:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8007b06:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b08:	69d9      	ldr	r1, [r3, #28]
 8007b0a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007b0e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8007b16:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2000      	movs	r0, #0
}
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b22:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007b24:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b26:	6a1a      	ldr	r2, [r3, #32]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007b2e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007b30:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8007b32:	6998      	ldr	r0, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b34:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b38:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b3e:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= OC_Config->OCPolarity;
 8007b42:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007b44:	f022 0202 	bic.w	r2, r2, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b48:	4573      	cmp	r3, lr
  tmpccer |= OC_Config->OCPolarity;
 8007b4a:	ea42 0205 	orr.w	r2, r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b4e:	f000 8086 	beq.w	8007c5e <HAL_TIM_PWM_ConfigChannel+0x1de>
 8007b52:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8007b56:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8007b5a:	4573      	cmp	r3, lr
 8007b5c:	d07f      	beq.n	8007c5e <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 8007b5e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007b60:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007b62:	6848      	ldr	r0, [r1, #4]
 8007b64:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007b66:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b68:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b6a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b6c:	f040 0008 	orr.w	r0, r0, #8
 8007b70:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b72:	6999      	ldr	r1, [r3, #24]
 8007b74:	f021 0104 	bic.w	r1, r1, #4
 8007b78:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	4322      	orrs	r2, r4
 8007b7e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007b80:	2300      	movs	r3, #0
 8007b82:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007b86:	2000      	movs	r0, #0
}
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b8a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	f022 0210 	bic.w	r2, r2, #16
 8007b94:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007b96:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007b98:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8007b9a:	6998      	ldr	r0, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b9c:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ba0:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba8:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007bae:	f022 0220 	bic.w	r2, r2, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bb2:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bb4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bb8:	d060      	beq.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007bba:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8007bbe:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8007bc2:	4573      	cmp	r3, lr
 8007bc4:	d05a      	beq.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8007bc6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007bc8:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007bca:	6848      	ldr	r0, [r1, #4]
 8007bcc:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007bce:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bd0:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bd2:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bd4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8007bd8:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bda:	6999      	ldr	r1, [r3, #24]
 8007bdc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007be0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8007be8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007bea:	2300      	movs	r3, #0
 8007bec:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007bf0:	2000      	movs	r0, #0
}
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bf4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007bf6:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf8:	6a1a      	ldr	r2, [r3, #32]
 8007bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bfe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007c00:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007c02:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8007c04:	69d8      	ldr	r0, [r3, #28]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c06:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c0a:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007c0e:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c10:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007c16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c1a:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c1c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c20:	d042      	beq.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007c22:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8007c26:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8007c2a:	4573      	cmp	r3, lr
 8007c2c:	d03c      	beq.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x228>
  TIMx->CR2 = tmpcr2;
 8007c2e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007c30:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8007c32:	6848      	ldr	r0, [r1, #4]
 8007c34:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007c36:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c38:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c3a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c3c:	f040 0008 	orr.w	r0, r0, #8
 8007c40:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c42:	69d9      	ldr	r1, [r3, #28]
 8007c44:	f021 0104 	bic.w	r1, r1, #4
 8007c48:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	4322      	orrs	r2, r4
 8007c4e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007c50:	2300      	movs	r3, #0
 8007c52:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007c56:	2000      	movs	r0, #0
}
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8007c5a:	2002      	movs	r0, #2
}
 8007c5c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8007c5e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c60:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007c64:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c66:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c6a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c6e:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c72:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c76:	ea4e 0404 	orr.w	r4, lr, r4
 8007c7a:	e770      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0xde>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c7c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c82:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c86:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c8a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c8e:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c96:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8007c9a:	e794      	b.n	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x146>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c9c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c9e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ca2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007ca6:	e725      	b.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x74>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ca8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cb6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cba:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc2:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8007cc6:	e7b2      	b.n	8007c2e <HAL_TIM_PWM_ConfigChannel+0x1ae>

08007cc8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007cc8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d075      	beq.n	8007dbc <HAL_TIM_ConfigClockSource+0xf4>
 8007cd0:	4602      	mov	r2, r0
{
 8007cd2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd4:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8007cd6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007ce2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007cec:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	2b60      	cmp	r3, #96	; 0x60
 8007cf2:	d065      	beq.n	8007dc0 <HAL_TIM_ConfigClockSource+0xf8>
 8007cf4:	d824      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x78>
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d07c      	beq.n	8007df4 <HAL_TIM_ConfigClockSource+0x12c>
 8007cfa:	d94b      	bls.n	8007d94 <HAL_TIM_ConfigClockSource+0xcc>
 8007cfc:	2b50      	cmp	r3, #80	; 0x50
 8007cfe:	d117      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d00:	6848      	ldr	r0, [r1, #4]
 8007d02:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d04:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d06:	6a23      	ldr	r3, [r4, #32]
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d10:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007d18:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d1a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d1e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007d20:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d22:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d28:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8007d2c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d2e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007d32:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007d38:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8007d3c:	bc30      	pop	{r4, r5}
 8007d3e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d44:	d038      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0xf0>
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4a:	d110      	bne.n	8007d6e <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d4c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007d50:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d52:	432b      	orrs	r3, r5
 8007d54:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d56:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007d5e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d60:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8007d68:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d6a:	60a3      	str	r3, [r4, #8]
      break;
 8007d6c:	e7e0      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8007d6e:	2b70      	cmp	r3, #112	; 0x70
 8007d70:	d1de      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d72:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007d76:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d78:	432b      	orrs	r3, r5
 8007d7a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d80:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007d84:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007d86:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007d88:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8007d8e:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8007d90:	60a3      	str	r3, [r4, #8]
      break;
 8007d92:	e7cd      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d002      	beq.n	8007d9e <HAL_TIM_ConfigClockSource+0xd6>
 8007d98:	d90a      	bls.n	8007db0 <HAL_TIM_ConfigClockSource+0xe8>
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	d1c8      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8007d9e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007da0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007da4:	430b      	orrs	r3, r1
 8007da6:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8007daa:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007dac:	60a3      	str	r3, [r4, #8]
}
 8007dae:	e7bf      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8007db0:	f033 0110 	bics.w	r1, r3, #16
 8007db4:	d1bc      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
 8007db6:	e7f2      	b.n	8007d9e <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8007db8:	2000      	movs	r0, #0
 8007dba:	e7b9      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8007dbc:	2002      	movs	r0, #2
}
 8007dbe:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc0:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc2:	68cb      	ldr	r3, [r1, #12]
 8007dc4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc6:	f020 0010 	bic.w	r0, r0, #16
 8007dca:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dcc:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dce:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dd2:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8007dd6:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd8:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8007de2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007de4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dea:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007df0:	60a3      	str	r3, [r4, #8]
}
 8007df2:	e79d      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df4:	6848      	ldr	r0, [r1, #4]
 8007df6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007df8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfa:	6a23      	ldr	r3, [r4, #32]
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e02:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e04:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007e0c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e0e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007e12:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007e14:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007e16:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007e22:	60a3      	str	r3, [r4, #8]
}
 8007e24:	e784      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x68>
 8007e26:	bf00      	nop

08007e28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d045      	beq.n	8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e30:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007e32:	2202      	movs	r2, #2
{
 8007e34:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007e36:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007e3a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e3c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007e3e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e44:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d026      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e56:	d023      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e5c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d01d      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d017      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e70:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007e74:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d011      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e8c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d005      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e94:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007e98:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d104      	bne.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea0:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007eaa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	2201      	movs	r2, #1
 8007eae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007eb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007eb6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8007eb8:	4618      	mov	r0, r3
}
 8007eba:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007ebc:	2002      	movs	r0, #2
}
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f000 809b 	beq.w	8007ffc <HAL_UART_Init+0x13c>
{
 8007ec6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ecc:	4604      	mov	r4, r0
 8007ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 808d 	beq.w	8007ff2 <HAL_UART_Init+0x132>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed8:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eda:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8007edc:	2224      	movs	r2, #36	; 0x24
 8007ede:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eea:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8007ef2:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ef4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef6:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ef8:	4302      	orrs	r2, r0
 8007efa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007efc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efe:	4302      	orrs	r2, r0
 8007f00:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8007f02:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8007f06:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f0a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f1c:	f2c4 0101 	movt	r1, #16385	; 0x4001
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f20:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f22:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f24:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f26:	d03b      	beq.n	8007fa0 <HAL_UART_Init+0xe0>
 8007f28:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007f2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d035      	beq.n	8007fa0 <HAL_UART_Init+0xe0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f34:	f7ff fa88 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f38:	69e3      	ldr	r3, [r4, #28]
 8007f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f3e:	d035      	beq.n	8007fac <HAL_UART_Init+0xec>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	2119      	movs	r1, #25
 8007f44:	009a      	lsls	r2, r3, #2
 8007f46:	fba0 0101 	umull	r0, r1, r0, r1
 8007f4a:	0f9b      	lsrs	r3, r3, #30
 8007f4c:	f7f8 feac 	bl	8000ca8 <__aeabi_uldivmod>
 8007f50:	f248 511f 	movw	r1, #34079	; 0x851f
 8007f54:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 8007f58:	fba1 3200 	umull	r3, r2, r1, r0
 8007f5c:	0952      	lsrs	r2, r2, #5
 8007f5e:	2564      	movs	r5, #100	; 0x64
 8007f60:	fb05 0012 	mls	r0, r5, r2, r0
 8007f64:	0100      	lsls	r0, r0, #4
 8007f66:	3032      	adds	r0, #50	; 0x32
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	fba1 1000 	umull	r1, r0, r1, r0
 8007f6e:	0112      	lsls	r2, r2, #4
 8007f70:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8007f74:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f84:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007f86:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f88:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8007f8a:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8007f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f90:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f94:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f98:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8007f9c:	4628      	mov	r0, r5
}
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fa0:	f7ff fa66 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fa4:	69e3      	ldr	r3, [r4, #28]
 8007fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007faa:	d1c9      	bne.n	8007f40 <HAL_UART_Init+0x80>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fac:	6862      	ldr	r2, [r4, #4]
 8007fae:	2119      	movs	r1, #25
 8007fb0:	1892      	adds	r2, r2, r2
 8007fb2:	f04f 0300 	mov.w	r3, #0
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	fba0 0101 	umull	r0, r1, r0, r1
 8007fbc:	f7f8 fe74 	bl	8000ca8 <__aeabi_uldivmod>
 8007fc0:	f248 531f 	movw	r3, #34079	; 0x851f
 8007fc4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8007fc8:	fba3 2100 	umull	r2, r1, r3, r0
 8007fcc:	094d      	lsrs	r5, r1, #5
 8007fce:	2264      	movs	r2, #100	; 0x64
 8007fd0:	fb02 0215 	mls	r2, r2, r5, r0
 8007fd4:	00d2      	lsls	r2, r2, #3
 8007fd6:	3232      	adds	r2, #50	; 0x32
 8007fd8:	fba3 3202 	umull	r3, r2, r3, r2
 8007fdc:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8007fe0:	0912      	lsrs	r2, r2, #4
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8007fe8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007fec:	440a      	add	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	e7c1      	b.n	8007f76 <HAL_UART_Init+0xb6>
    huart->Lock = HAL_UNLOCKED;
 8007ff2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007ff6:	f7fb fd0d 	bl	8003a14 <HAL_UART_MspInit>
 8007ffa:	e76d      	b.n	8007ed8 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8007ffc:	2001      	movs	r0, #1
}
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8008000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008004:	2b20      	cmp	r3, #32
 8008006:	d11b      	bne.n	8008040 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8008008:	b1c1      	cbz	r1, 800803c <HAL_UART_Transmit_IT+0x3c>
 800800a:	b1ba      	cbz	r2, 800803c <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 800800c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d015      	beq.n	8008040 <HAL_UART_Transmit_IT+0x40>
{
 8008014:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008018:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 800801a:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800801e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008022:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8008024:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8008028:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800802a:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 800802c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800802e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8008032:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008034:	60e2      	str	r2, [r4, #12]
}
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803a:	4770      	bx	lr
      return HAL_ERROR;
 800803c:	2001      	movs	r0, #1
 800803e:	4770      	bx	lr
    return HAL_BUSY;
 8008040:	2002      	movs	r0, #2
}
 8008042:	4770      	bx	lr

08008044 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008044:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008048:	2b20      	cmp	r3, #32
 800804a:	d11f      	bne.n	800808c <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800804c:	b1e1      	cbz	r1, 8008088 <HAL_UART_Receive_IT+0x44>
 800804e:	b1da      	cbz	r2, 8008088 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8008050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d019      	beq.n	800808c <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008058:	2300      	movs	r3, #0
 800805a:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 800805c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8008060:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008062:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008064:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8008066:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008068:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 800806a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800806c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008070:	b973      	cbnz	r3, 8008090 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008072:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008082:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008084:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008086:	4770      	bx	lr
      return HAL_ERROR;
 8008088:	2001      	movs	r0, #1
 800808a:	4770      	bx	lr
    return HAL_BUSY;
 800808c:	2002      	movs	r0, #2
}
 800808e:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008090:	6803      	ldr	r3, [r0, #0]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	e7eb      	b.n	8008074 <HAL_UART_Receive_IT+0x30>

0800809c <HAL_UART_ErrorCallback>:
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <UART_DMAAbortOnError>:
{
 80080a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080a8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80080aa:	f7ff fff7 	bl	800809c <HAL_UART_ErrorCallback>
}
 80080ae:	bd08      	pop	{r3, pc}

080080b0 <HAL_UARTEx_RxEventCallback>:
}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b4:	6883      	ldr	r3, [r0, #8]
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d044      	beq.n	8008146 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d039      	beq.n	8008136 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80080cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080ce:	3301      	adds	r3, #1
 80080d0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80080d2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d132      	bne.n	8008144 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080de:	6802      	ldr	r2, [r0, #0]
 80080e0:	68d1      	ldr	r1, [r2, #12]
 80080e2:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80080e6:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080e8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080ea:	68d1      	ldr	r1, [r2, #12]
 80080ec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80080f0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080f2:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80080f4:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080f8:	f021 0101 	bic.w	r1, r1, #1
 80080fc:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80080fe:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008102:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008104:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008106:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008108:	d128      	bne.n	800815c <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	6303      	str	r3, [r0, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	f102 030c 	add.w	r3, r2, #12
 8008110:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	f102 0c0c 	add.w	ip, r2, #12
 800811c:	e84c 3100 	strex	r1, r3, [ip]
 8008120:	2900      	cmp	r1, #0
 8008122:	d1f3      	bne.n	800810c <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008124:	6813      	ldr	r3, [r2, #0]
 8008126:	06db      	lsls	r3, r3, #27
 8008128:	d422      	bmi.n	8008170 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800812a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800812c:	f7ff ffc0 	bl	80080b0 <HAL_UARTEx_RxEventCallback>
}
 8008130:	b003      	add	sp, #12
 8008132:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008136:	6903      	ldr	r3, [r0, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1c2      	bne.n	80080c2 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800813c:	6803      	ldr	r3, [r0, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	7013      	strb	r3, [r2, #0]
 8008142:	e7c3      	b.n	80080cc <UART_Receive_IT.part.0.isra.0+0x18>
 8008144:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008146:	6903      	ldr	r3, [r0, #16]
 8008148:	b96b      	cbnz	r3, 8008166 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800814a:	6802      	ldr	r2, [r0, #0]
 800814c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800814e:	6852      	ldr	r2, [r2, #4]
 8008150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008154:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8008158:	6283      	str	r3, [r0, #40]	; 0x28
 800815a:	e7ba      	b.n	80080d2 <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 800815c:	f7fc fbd8 	bl	8004910 <HAL_UART_RxCpltCallback>
}
 8008160:	b003      	add	sp, #12
 8008162:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008166:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008168:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	e7ad      	b.n	80080cc <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008170:	2300      	movs	r3, #0
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	6853      	ldr	r3, [r2, #4]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	e7d4      	b.n	800812a <UART_Receive_IT.part.0.isra.0+0x76>

08008180 <HAL_UART_IRQHandler>:
{
 8008180:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008182:	6803      	ldr	r3, [r0, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008186:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008188:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800818a:	f012 0f0f 	tst.w	r2, #15
{
 800818e:	b083      	sub	sp, #12
 8008190:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008192:	d16e      	bne.n	8008272 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008194:	0695      	lsls	r5, r2, #26
 8008196:	d502      	bpl.n	800819e <HAL_UART_IRQHandler+0x1e>
 8008198:	068d      	lsls	r5, r1, #26
 800819a:	f100 80b1 	bmi.w	8008300 <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80081a0:	2801      	cmp	r0, #1
 80081a2:	d00b      	beq.n	80081bc <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081a4:	0610      	lsls	r0, r2, #24
 80081a6:	d502      	bpl.n	80081ae <HAL_UART_IRQHandler+0x2e>
 80081a8:	060d      	lsls	r5, r1, #24
 80081aa:	f100 80b3 	bmi.w	8008314 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ae:	0650      	lsls	r0, r2, #25
 80081b0:	d502      	bpl.n	80081b8 <HAL_UART_IRQHandler+0x38>
 80081b2:	064a      	lsls	r2, r1, #25
 80081b4:	f100 80cd 	bmi.w	8008352 <HAL_UART_IRQHandler+0x1d2>
}
 80081b8:	b003      	add	sp, #12
 80081ba:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081bc:	06d5      	lsls	r5, r2, #27
 80081be:	d5f1      	bpl.n	80081a4 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081c0:	06c8      	lsls	r0, r1, #27
 80081c2:	d5ef      	bpl.n	80081a4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081c4:	2200      	movs	r2, #0
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	9201      	str	r2, [sp, #4]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	9201      	str	r2, [sp, #4]
 80081d0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	0655      	lsls	r5, r2, #25
 80081d6:	f140 8119 	bpl.w	800840c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80081dc:	6802      	ldr	r2, [r0, #0]
 80081de:	6852      	ldr	r2, [r2, #4]
 80081e0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d0e8      	beq.n	80081b8 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081e6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80081e8:	4291      	cmp	r1, r2
 80081ea:	d9e5      	bls.n	80081b8 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80081ec:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081ee:	69c2      	ldr	r2, [r0, #28]
 80081f0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80081f4:	d036      	beq.n	8008264 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	f103 020c 	add.w	r2, r3, #12
 80081fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	f103 050c 	add.w	r5, r3, #12
 8008206:	e845 2100 	strex	r1, r2, [r5]
 800820a:	2900      	cmp	r1, #0
 800820c:	d1f3      	bne.n	80081f6 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	f103 0214 	add.w	r2, r3, #20
 8008212:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008216:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	f103 0514 	add.w	r5, r3, #20
 800821e:	e845 2100 	strex	r1, r2, [r5]
 8008222:	2900      	cmp	r1, #0
 8008224:	d1f3      	bne.n	800820e <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	f103 0214 	add.w	r2, r3, #20
 800822a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	f103 0514 	add.w	r5, r3, #20
 8008236:	e845 2100 	strex	r1, r2, [r5]
 800823a:	2900      	cmp	r1, #0
 800823c:	d1f3      	bne.n	8008226 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800823e:	2220      	movs	r2, #32
 8008240:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	f103 020c 	add.w	r2, r3, #12
 800824a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	f103 050c 	add.w	r5, r3, #12
 8008256:	e845 2100 	strex	r1, r2, [r5]
 800825a:	2900      	cmp	r1, #0
 800825c:	d1f3      	bne.n	8008246 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800825e:	f7fd f963 	bl	8005528 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008262:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008264:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008266:	1ac9      	subs	r1, r1, r3
 8008268:	4620      	mov	r0, r4
 800826a:	b289      	uxth	r1, r1
 800826c:	f7ff ff20 	bl	80080b0 <HAL_UARTEx_RxEventCallback>
 8008270:	e7a2      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008272:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008276:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800827a:	4328      	orrs	r0, r5
 800827c:	d08f      	beq.n	800819e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800827e:	07d0      	lsls	r0, r2, #31
 8008280:	d505      	bpl.n	800828e <HAL_UART_IRQHandler+0x10e>
 8008282:	05c8      	lsls	r0, r1, #23
 8008284:	d503      	bpl.n	800828e <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008286:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008288:	f040 0001 	orr.w	r0, r0, #1
 800828c:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800828e:	0750      	lsls	r0, r2, #29
 8008290:	d531      	bpl.n	80082f6 <HAL_UART_IRQHandler+0x176>
 8008292:	b14d      	cbz	r5, 80082a8 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008294:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008296:	f040 0002 	orr.w	r0, r0, #2
 800829a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800829c:	0790      	lsls	r0, r2, #30
 800829e:	d503      	bpl.n	80082a8 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80082a2:	f040 0004 	orr.w	r0, r0, #4
 80082a6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082a8:	0710      	lsls	r0, r2, #28
 80082aa:	d507      	bpl.n	80082bc <HAL_UART_IRQHandler+0x13c>
 80082ac:	f001 0020 	and.w	r0, r1, #32
 80082b0:	4328      	orrs	r0, r5
 80082b2:	d003      	beq.n	80082bc <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80082b6:	f040 0008 	orr.w	r0, r0, #8
 80082ba:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80082be:	2800      	cmp	r0, #0
 80082c0:	f43f af7a 	beq.w	80081b8 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082c4:	0690      	lsls	r0, r2, #26
 80082c6:	d509      	bpl.n	80082dc <HAL_UART_IRQHandler+0x15c>
 80082c8:	0689      	lsls	r1, r1, #26
 80082ca:	d507      	bpl.n	80082dc <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082cc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80082d0:	2a22      	cmp	r2, #34	; 0x22
 80082d2:	d103      	bne.n	80082dc <HAL_UART_IRQHandler+0x15c>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f7ff feed 	bl	80080b4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082de:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082e4:	f005 0508 	and.w	r5, r5, #8
 80082e8:	4315      	orrs	r5, r2
 80082ea:	d13d      	bne.n	8008368 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7ff fed5 	bl	800809c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f2:	6425      	str	r5, [r4, #64]	; 0x40
 80082f4:	e760      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082f6:	0790      	lsls	r0, r2, #30
 80082f8:	d5d6      	bpl.n	80082a8 <HAL_UART_IRQHandler+0x128>
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	d1d0      	bne.n	80082a0 <HAL_UART_IRQHandler+0x120>
 80082fe:	e7d3      	b.n	80082a8 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008300:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008304:	2b22      	cmp	r3, #34	; 0x22
 8008306:	f47f af57 	bne.w	80081b8 <HAL_UART_IRQHandler+0x38>
}
 800830a:	b003      	add	sp, #12
 800830c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008310:	f7ff bed0 	b.w	80080b4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008314:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008318:	2a21      	cmp	r2, #33	; 0x21
 800831a:	f47f af4d 	bne.w	80081b8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831e:	68a2      	ldr	r2, [r4, #8]
 8008320:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008324:	f000 80ab 	beq.w	800847e <HAL_UART_IRQHandler+0x2fe>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008328:	6a22      	ldr	r2, [r4, #32]
 800832a:	1c51      	adds	r1, r2, #1
 800832c:	6221      	str	r1, [r4, #32]
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8008332:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008334:	3a01      	subs	r2, #1
 8008336:	b292      	uxth	r2, r2
 8008338:	84e2      	strh	r2, [r4, #38]	; 0x26
 800833a:	2a00      	cmp	r2, #0
 800833c:	f47f af3c 	bne.w	80081b8 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008346:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800834e:	60da      	str	r2, [r3, #12]
 8008350:	e732      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008352:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008354:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835a:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800835c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800835e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8008362:	f7fc fafb 	bl	800495c <HAL_UART_TxCpltCallback>
    return;
 8008366:	e727      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	f103 020c 	add.w	r2, r3, #12
 800836c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008370:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	f103 000c 	add.w	r0, r3, #12
 8008378:	e840 2100 	strex	r1, r2, [r0]
 800837c:	2900      	cmp	r1, #0
 800837e:	d1f3      	bne.n	8008368 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	f103 0214 	add.w	r2, r3, #20
 8008384:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008388:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	f103 0014 	add.w	r0, r3, #20
 8008390:	e840 2100 	strex	r1, r2, [r0]
 8008394:	2900      	cmp	r1, #0
 8008396:	d1f3      	bne.n	8008380 <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008398:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800839a:	2a01      	cmp	r2, #1
 800839c:	d025      	beq.n	80083ea <HAL_UART_IRQHandler+0x26a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80083a0:	2120      	movs	r1, #32
 80083a2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a6:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	0652      	lsls	r2, r2, #25
 80083ac:	d52a      	bpl.n	8008404 <HAL_UART_IRQHandler+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	f103 0214 	add.w	r2, r3, #20
 80083b2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	f103 0014 	add.w	r0, r3, #20
 80083be:	e840 2100 	strex	r1, r2, [r0]
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d1f3      	bne.n	80083ae <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 80083c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80083c8:	b1e0      	cbz	r0, 8008404 <HAL_UART_IRQHandler+0x284>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ca:	f248 03a1 	movw	r3, #32929	; 0x80a1
 80083ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80083d2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083d4:	f7fd f8f0 	bl	80055b8 <HAL_DMA_Abort_IT>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f43f aeed 	beq.w	80081b8 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80083e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80083e2:	b003      	add	sp, #12
 80083e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083e8:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	f103 020c 	add.w	r2, r3, #12
 80083ee:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	f103 000c 	add.w	r0, r3, #12
 80083fa:	e840 2100 	strex	r1, r2, [r0]
 80083fe:	2900      	cmp	r1, #0
 8008400:	d1f3      	bne.n	80083ea <HAL_UART_IRQHandler+0x26a>
 8008402:	e7cc      	b.n	800839e <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff fe49 	bl	800809c <HAL_UART_ErrorCallback>
 800840a:	e6d5      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800840c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 800840e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8008410:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008412:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008414:	2a00      	cmp	r2, #0
 8008416:	f43f aecf 	beq.w	80081b8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800841a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800841c:	1a51      	subs	r1, r2, r1
 800841e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008420:	2900      	cmp	r1, #0
 8008422:	f43f aec9 	beq.w	80081b8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	f103 020c 	add.w	r2, r3, #12
 800842a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800842e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	f103 050c 	add.w	r5, r3, #12
 8008436:	e845 2000 	strex	r0, r2, [r5]
 800843a:	2800      	cmp	r0, #0
 800843c:	d1f3      	bne.n	8008426 <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	f103 0214 	add.w	r2, r3, #20
 8008442:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008446:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	f103 0514 	add.w	r5, r3, #20
 800844e:	e845 2000 	strex	r0, r2, [r5]
 8008452:	2800      	cmp	r0, #0
 8008454:	d1f3      	bne.n	800843e <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8008456:	2220      	movs	r2, #32
 8008458:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	f103 020c 	add.w	r2, r3, #12
 8008462:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008466:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	f103 050c 	add.w	r5, r3, #12
 800846e:	e845 2000 	strex	r0, r2, [r5]
 8008472:	2800      	cmp	r0, #0
 8008474:	d1f3      	bne.n	800845e <HAL_UART_IRQHandler+0x2de>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008476:	4620      	mov	r0, r4
 8008478:	f7ff fe1a 	bl	80080b0 <HAL_UARTEx_RxEventCallback>
 800847c:	e69c      	b.n	80081b8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847e:	6922      	ldr	r2, [r4, #16]
 8008480:	2a00      	cmp	r2, #0
 8008482:	f47f af51 	bne.w	8008328 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008486:	6a22      	ldr	r2, [r4, #32]
 8008488:	f832 1b02 	ldrh.w	r1, [r2], #2
 800848c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008490:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008492:	6222      	str	r2, [r4, #32]
 8008494:	e74d      	b.n	8008332 <HAL_UART_IRQHandler+0x1b2>
 8008496:	bf00      	nop

08008498 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8008498:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 800849c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 80084a0:	4310      	orrs	r0, r2
 80084a2:	4770      	bx	lr

080084a4 <atof>:
 80084a4:	2100      	movs	r1, #0
 80084a6:	f001 bd0b 	b.w	8009ec0 <strtod>
	...

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	2000007c 	.word	0x2000007c

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4d0d      	ldr	r5, [pc, #52]	; (80084f0 <__libc_init_array+0x38>)
 80084bc:	4c0d      	ldr	r4, [pc, #52]	; (80084f4 <__libc_init_array+0x3c>)
 80084be:	1b64      	subs	r4, r4, r5
 80084c0:	10a4      	asrs	r4, r4, #2
 80084c2:	2600      	movs	r6, #0
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	4d0b      	ldr	r5, [pc, #44]	; (80084f8 <__libc_init_array+0x40>)
 80084ca:	4c0c      	ldr	r4, [pc, #48]	; (80084fc <__libc_init_array+0x44>)
 80084cc:	f005 fdde 	bl	800e08c <_init>
 80084d0:	1b64      	subs	r4, r4, r5
 80084d2:	10a4      	asrs	r4, r4, #2
 80084d4:	2600      	movs	r6, #0
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800f808 	.word	0x0800f808
 80084f4:	0800f808 	.word	0x0800f808
 80084f8:	0800f808 	.word	0x0800f808
 80084fc:	0800f80c 	.word	0x0800f80c

08008500 <memcpy>:
 8008500:	440a      	add	r2, r1
 8008502:	4291      	cmp	r1, r2
 8008504:	f100 33ff 	add.w	r3, r0, #4294967295
 8008508:	d100      	bne.n	800850c <memcpy+0xc>
 800850a:	4770      	bx	lr
 800850c:	b510      	push	{r4, lr}
 800850e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008516:	4291      	cmp	r1, r2
 8008518:	d1f9      	bne.n	800850e <memcpy+0xe>
 800851a:	bd10      	pop	{r4, pc}

0800851c <memset>:
 800851c:	4402      	add	r2, r0
 800851e:	4603      	mov	r3, r0
 8008520:	4293      	cmp	r3, r2
 8008522:	d100      	bne.n	8008526 <memset+0xa>
 8008524:	4770      	bx	lr
 8008526:	f803 1b01 	strb.w	r1, [r3], #1
 800852a:	e7f9      	b.n	8008520 <memset+0x4>

0800852c <__cvt>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	ec55 4b10 	vmov	r4, r5, d0
 8008534:	2d00      	cmp	r5, #0
 8008536:	460e      	mov	r6, r1
 8008538:	4619      	mov	r1, r3
 800853a:	462b      	mov	r3, r5
 800853c:	bfbb      	ittet	lt
 800853e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008542:	461d      	movlt	r5, r3
 8008544:	2300      	movge	r3, #0
 8008546:	232d      	movlt	r3, #45	; 0x2d
 8008548:	700b      	strb	r3, [r1, #0]
 800854a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008550:	4691      	mov	r9, r2
 8008552:	f023 0820 	bic.w	r8, r3, #32
 8008556:	bfbc      	itt	lt
 8008558:	4622      	movlt	r2, r4
 800855a:	4614      	movlt	r4, r2
 800855c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008560:	d005      	beq.n	800856e <__cvt+0x42>
 8008562:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008566:	d100      	bne.n	800856a <__cvt+0x3e>
 8008568:	3601      	adds	r6, #1
 800856a:	2102      	movs	r1, #2
 800856c:	e000      	b.n	8008570 <__cvt+0x44>
 800856e:	2103      	movs	r1, #3
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	ab02      	add	r3, sp, #8
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	ec45 4b10 	vmov	d0, r4, r5
 800857c:	4653      	mov	r3, sl
 800857e:	4632      	mov	r2, r6
 8008580:	f001 fed2 	bl	800a328 <_dtoa_r>
 8008584:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008588:	4607      	mov	r7, r0
 800858a:	d102      	bne.n	8008592 <__cvt+0x66>
 800858c:	f019 0f01 	tst.w	r9, #1
 8008590:	d022      	beq.n	80085d8 <__cvt+0xac>
 8008592:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008596:	eb07 0906 	add.w	r9, r7, r6
 800859a:	d110      	bne.n	80085be <__cvt+0x92>
 800859c:	783b      	ldrb	r3, [r7, #0]
 800859e:	2b30      	cmp	r3, #48	; 0x30
 80085a0:	d10a      	bne.n	80085b8 <__cvt+0x8c>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80085ae:	b918      	cbnz	r0, 80085b8 <__cvt+0x8c>
 80085b0:	f1c6 0601 	rsb	r6, r6, #1
 80085b4:	f8ca 6000 	str.w	r6, [sl]
 80085b8:	f8da 3000 	ldr.w	r3, [sl]
 80085bc:	4499      	add	r9, r3
 80085be:	2200      	movs	r2, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4620      	mov	r0, r4
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7f8 fa8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80085ca:	b108      	cbz	r0, 80085d0 <__cvt+0xa4>
 80085cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80085d0:	2230      	movs	r2, #48	; 0x30
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	454b      	cmp	r3, r9
 80085d6:	d307      	bcc.n	80085e8 <__cvt+0xbc>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085dc:	1bdb      	subs	r3, r3, r7
 80085de:	4638      	mov	r0, r7
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	b004      	add	sp, #16
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	1c59      	adds	r1, r3, #1
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e7f0      	b.n	80085d2 <__cvt+0xa6>

080085f0 <__exponent>:
 80085f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f2:	4603      	mov	r3, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	bfb8      	it	lt
 80085f8:	4249      	neglt	r1, r1
 80085fa:	f803 2b02 	strb.w	r2, [r3], #2
 80085fe:	bfb4      	ite	lt
 8008600:	222d      	movlt	r2, #45	; 0x2d
 8008602:	222b      	movge	r2, #43	; 0x2b
 8008604:	2909      	cmp	r1, #9
 8008606:	7042      	strb	r2, [r0, #1]
 8008608:	dd2a      	ble.n	8008660 <__exponent+0x70>
 800860a:	f10d 0407 	add.w	r4, sp, #7
 800860e:	46a4      	mov	ip, r4
 8008610:	270a      	movs	r7, #10
 8008612:	46a6      	mov	lr, r4
 8008614:	460a      	mov	r2, r1
 8008616:	fb91 f6f7 	sdiv	r6, r1, r7
 800861a:	fb07 1516 	mls	r5, r7, r6, r1
 800861e:	3530      	adds	r5, #48	; 0x30
 8008620:	2a63      	cmp	r2, #99	; 0x63
 8008622:	f104 34ff 	add.w	r4, r4, #4294967295
 8008626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800862a:	4631      	mov	r1, r6
 800862c:	dcf1      	bgt.n	8008612 <__exponent+0x22>
 800862e:	3130      	adds	r1, #48	; 0x30
 8008630:	f1ae 0502 	sub.w	r5, lr, #2
 8008634:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008638:	1c44      	adds	r4, r0, #1
 800863a:	4629      	mov	r1, r5
 800863c:	4561      	cmp	r1, ip
 800863e:	d30a      	bcc.n	8008656 <__exponent+0x66>
 8008640:	f10d 0209 	add.w	r2, sp, #9
 8008644:	eba2 020e 	sub.w	r2, r2, lr
 8008648:	4565      	cmp	r5, ip
 800864a:	bf88      	it	hi
 800864c:	2200      	movhi	r2, #0
 800864e:	4413      	add	r3, r2
 8008650:	1a18      	subs	r0, r3, r0
 8008652:	b003      	add	sp, #12
 8008654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800865a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800865e:	e7ed      	b.n	800863c <__exponent+0x4c>
 8008660:	2330      	movs	r3, #48	; 0x30
 8008662:	3130      	adds	r1, #48	; 0x30
 8008664:	7083      	strb	r3, [r0, #2]
 8008666:	70c1      	strb	r1, [r0, #3]
 8008668:	1d03      	adds	r3, r0, #4
 800866a:	e7f1      	b.n	8008650 <__exponent+0x60>

0800866c <_printf_float>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	ed2d 8b02 	vpush	{d8}
 8008674:	b08d      	sub	sp, #52	; 0x34
 8008676:	460c      	mov	r4, r1
 8008678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800867c:	4616      	mov	r6, r2
 800867e:	461f      	mov	r7, r3
 8008680:	4605      	mov	r5, r0
 8008682:	f002 ffc1 	bl	800b608 <_localeconv_r>
 8008686:	f8d0 a000 	ldr.w	sl, [r0]
 800868a:	4650      	mov	r0, sl
 800868c:	f7f7 fdaa 	bl	80001e4 <strlen>
 8008690:	2300      	movs	r3, #0
 8008692:	930a      	str	r3, [sp, #40]	; 0x28
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	f8d8 3000 	ldr.w	r3, [r8]
 800869c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086a0:	3307      	adds	r3, #7
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	f103 0208 	add.w	r2, r3, #8
 80086aa:	f8c8 2000 	str.w	r2, [r8]
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80086c4:	ee08 0a10 	vmov	s16, r0
 80086c8:	4b9f      	ldr	r3, [pc, #636]	; (8008948 <_printf_float+0x2dc>)
 80086ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	f7f8 fa3b 	bl	8000b4c <__aeabi_dcmpun>
 80086d6:	bb88      	cbnz	r0, 800873c <_printf_float+0xd0>
 80086d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086dc:	4b9a      	ldr	r3, [pc, #616]	; (8008948 <_printf_float+0x2dc>)
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	f7f8 fa15 	bl	8000b10 <__aeabi_dcmple>
 80086e6:	bb48      	cbnz	r0, 800873c <_printf_float+0xd0>
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 fa04 	bl	8000afc <__aeabi_dcmplt>
 80086f4:	b110      	cbz	r0, 80086fc <_printf_float+0x90>
 80086f6:	232d      	movs	r3, #45	; 0x2d
 80086f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fc:	4b93      	ldr	r3, [pc, #588]	; (800894c <_printf_float+0x2e0>)
 80086fe:	4894      	ldr	r0, [pc, #592]	; (8008950 <_printf_float+0x2e4>)
 8008700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008704:	bf94      	ite	ls
 8008706:	4698      	movls	r8, r3
 8008708:	4680      	movhi	r8, r0
 800870a:	2303      	movs	r3, #3
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	9b05      	ldr	r3, [sp, #20]
 8008710:	f023 0204 	bic.w	r2, r3, #4
 8008714:	6022      	str	r2, [r4, #0]
 8008716:	f04f 0900 	mov.w	r9, #0
 800871a:	9700      	str	r7, [sp, #0]
 800871c:	4633      	mov	r3, r6
 800871e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008720:	4621      	mov	r1, r4
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f9d8 	bl	8008ad8 <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	f040 8090 	bne.w	800884e <_printf_float+0x1e2>
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	b00d      	add	sp, #52	; 0x34
 8008734:	ecbd 8b02 	vpop	{d8}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 fa02 	bl	8000b4c <__aeabi_dcmpun>
 8008748:	b140      	cbz	r0, 800875c <_printf_float+0xf0>
 800874a:	464b      	mov	r3, r9
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfbc      	itt	lt
 8008750:	232d      	movlt	r3, #45	; 0x2d
 8008752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008756:	487f      	ldr	r0, [pc, #508]	; (8008954 <_printf_float+0x2e8>)
 8008758:	4b7f      	ldr	r3, [pc, #508]	; (8008958 <_printf_float+0x2ec>)
 800875a:	e7d1      	b.n	8008700 <_printf_float+0x94>
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008762:	9206      	str	r2, [sp, #24]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	d13f      	bne.n	80087e8 <_printf_float+0x17c>
 8008768:	2306      	movs	r3, #6
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	9b05      	ldr	r3, [sp, #20]
 800876e:	6861      	ldr	r1, [r4, #4]
 8008770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008774:	2300      	movs	r3, #0
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	ab0a      	add	r3, sp, #40	; 0x28
 800877a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800877e:	ab09      	add	r3, sp, #36	; 0x24
 8008780:	ec49 8b10 	vmov	d0, r8, r9
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff fecd 	bl	800852c <__cvt>
 8008792:	9b06      	ldr	r3, [sp, #24]
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	2b47      	cmp	r3, #71	; 0x47
 8008798:	4680      	mov	r8, r0
 800879a:	d108      	bne.n	80087ae <_printf_float+0x142>
 800879c:	1cc8      	adds	r0, r1, #3
 800879e:	db02      	blt.n	80087a6 <_printf_float+0x13a>
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	4299      	cmp	r1, r3
 80087a4:	dd41      	ble.n	800882a <_printf_float+0x1be>
 80087a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80087aa:	fa5f fb8b 	uxtb.w	fp, fp
 80087ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087b2:	d820      	bhi.n	80087f6 <_printf_float+0x18a>
 80087b4:	3901      	subs	r1, #1
 80087b6:	465a      	mov	r2, fp
 80087b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087bc:	9109      	str	r1, [sp, #36]	; 0x24
 80087be:	f7ff ff17 	bl	80085f0 <__exponent>
 80087c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c4:	1813      	adds	r3, r2, r0
 80087c6:	2a01      	cmp	r2, #1
 80087c8:	4681      	mov	r9, r0
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	dc02      	bgt.n	80087d4 <_printf_float+0x168>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	07d2      	lsls	r2, r2, #31
 80087d2:	d501      	bpl.n	80087d8 <_printf_float+0x16c>
 80087d4:	3301      	adds	r3, #1
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d09c      	beq.n	800871a <_printf_float+0xae>
 80087e0:	232d      	movs	r3, #45	; 0x2d
 80087e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e6:	e798      	b.n	800871a <_printf_float+0xae>
 80087e8:	9a06      	ldr	r2, [sp, #24]
 80087ea:	2a47      	cmp	r2, #71	; 0x47
 80087ec:	d1be      	bne.n	800876c <_printf_float+0x100>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1bc      	bne.n	800876c <_printf_float+0x100>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e7b9      	b.n	800876a <_printf_float+0xfe>
 80087f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087fa:	d118      	bne.n	800882e <_printf_float+0x1c2>
 80087fc:	2900      	cmp	r1, #0
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	dd0b      	ble.n	800881a <_printf_float+0x1ae>
 8008802:	6121      	str	r1, [r4, #16]
 8008804:	b913      	cbnz	r3, 800880c <_printf_float+0x1a0>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	07d0      	lsls	r0, r2, #31
 800880a:	d502      	bpl.n	8008812 <_printf_float+0x1a6>
 800880c:	3301      	adds	r3, #1
 800880e:	440b      	add	r3, r1
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	65a1      	str	r1, [r4, #88]	; 0x58
 8008814:	f04f 0900 	mov.w	r9, #0
 8008818:	e7de      	b.n	80087d8 <_printf_float+0x16c>
 800881a:	b913      	cbnz	r3, 8008822 <_printf_float+0x1b6>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	07d2      	lsls	r2, r2, #31
 8008820:	d501      	bpl.n	8008826 <_printf_float+0x1ba>
 8008822:	3302      	adds	r3, #2
 8008824:	e7f4      	b.n	8008810 <_printf_float+0x1a4>
 8008826:	2301      	movs	r3, #1
 8008828:	e7f2      	b.n	8008810 <_printf_float+0x1a4>
 800882a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	4299      	cmp	r1, r3
 8008832:	db05      	blt.n	8008840 <_printf_float+0x1d4>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	6121      	str	r1, [r4, #16]
 8008838:	07d8      	lsls	r0, r3, #31
 800883a:	d5ea      	bpl.n	8008812 <_printf_float+0x1a6>
 800883c:	1c4b      	adds	r3, r1, #1
 800883e:	e7e7      	b.n	8008810 <_printf_float+0x1a4>
 8008840:	2900      	cmp	r1, #0
 8008842:	bfd4      	ite	le
 8008844:	f1c1 0202 	rsble	r2, r1, #2
 8008848:	2201      	movgt	r2, #1
 800884a:	4413      	add	r3, r2
 800884c:	e7e0      	b.n	8008810 <_printf_float+0x1a4>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	055a      	lsls	r2, r3, #21
 8008852:	d407      	bmi.n	8008864 <_printf_float+0x1f8>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	4642      	mov	r2, r8
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	d12c      	bne.n	80088bc <_printf_float+0x250>
 8008862:	e764      	b.n	800872e <_printf_float+0xc2>
 8008864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008868:	f240 80e0 	bls.w	8008a2c <_printf_float+0x3c0>
 800886c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	f7f8 f938 	bl	8000ae8 <__aeabi_dcmpeq>
 8008878:	2800      	cmp	r0, #0
 800887a:	d034      	beq.n	80088e6 <_printf_float+0x27a>
 800887c:	4a37      	ldr	r2, [pc, #220]	; (800895c <_printf_float+0x2f0>)
 800887e:	2301      	movs	r3, #1
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af51 	beq.w	800872e <_printf_float+0xc2>
 800888c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008890:	429a      	cmp	r2, r3
 8008892:	db02      	blt.n	800889a <_printf_float+0x22e>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	07d8      	lsls	r0, r3, #31
 8008898:	d510      	bpl.n	80088bc <_printf_float+0x250>
 800889a:	ee18 3a10 	vmov	r3, s16
 800889e:	4652      	mov	r2, sl
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f af41 	beq.w	800872e <_printf_float+0xc2>
 80088ac:	f04f 0800 	mov.w	r8, #0
 80088b0:	f104 091a 	add.w	r9, r4, #26
 80088b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4543      	cmp	r3, r8
 80088ba:	dc09      	bgt.n	80088d0 <_printf_float+0x264>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	079b      	lsls	r3, r3, #30
 80088c0:	f100 8105 	bmi.w	8008ace <_printf_float+0x462>
 80088c4:	68e0      	ldr	r0, [r4, #12]
 80088c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c8:	4298      	cmp	r0, r3
 80088ca:	bfb8      	it	lt
 80088cc:	4618      	movlt	r0, r3
 80088ce:	e730      	b.n	8008732 <_printf_float+0xc6>
 80088d0:	2301      	movs	r3, #1
 80088d2:	464a      	mov	r2, r9
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af27 	beq.w	800872e <_printf_float+0xc2>
 80088e0:	f108 0801 	add.w	r8, r8, #1
 80088e4:	e7e6      	b.n	80088b4 <_printf_float+0x248>
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dc39      	bgt.n	8008960 <_printf_float+0x2f4>
 80088ec:	4a1b      	ldr	r2, [pc, #108]	; (800895c <_printf_float+0x2f0>)
 80088ee:	2301      	movs	r3, #1
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f af19 	beq.w	800872e <_printf_float+0xc2>
 80088fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008900:	4313      	orrs	r3, r2
 8008902:	d102      	bne.n	800890a <_printf_float+0x29e>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	07d9      	lsls	r1, r3, #31
 8008908:	d5d8      	bpl.n	80088bc <_printf_float+0x250>
 800890a:	ee18 3a10 	vmov	r3, s16
 800890e:	4652      	mov	r2, sl
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f af09 	beq.w	800872e <_printf_float+0xc2>
 800891c:	f04f 0900 	mov.w	r9, #0
 8008920:	f104 0a1a 	add.w	sl, r4, #26
 8008924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008926:	425b      	negs	r3, r3
 8008928:	454b      	cmp	r3, r9
 800892a:	dc01      	bgt.n	8008930 <_printf_float+0x2c4>
 800892c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892e:	e792      	b.n	8008856 <_printf_float+0x1ea>
 8008930:	2301      	movs	r3, #1
 8008932:	4652      	mov	r2, sl
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f43f aef7 	beq.w	800872e <_printf_float+0xc2>
 8008940:	f109 0901 	add.w	r9, r9, #1
 8008944:	e7ee      	b.n	8008924 <_printf_float+0x2b8>
 8008946:	bf00      	nop
 8008948:	7fefffff 	.word	0x7fefffff
 800894c:	0800ef30 	.word	0x0800ef30
 8008950:	0800ef34 	.word	0x0800ef34
 8008954:	0800ef3c 	.word	0x0800ef3c
 8008958:	0800ef38 	.word	0x0800ef38
 800895c:	0800ef40 	.word	0x0800ef40
 8008960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008964:	429a      	cmp	r2, r3
 8008966:	bfa8      	it	ge
 8008968:	461a      	movge	r2, r3
 800896a:	2a00      	cmp	r2, #0
 800896c:	4691      	mov	r9, r2
 800896e:	dc37      	bgt.n	80089e0 <_printf_float+0x374>
 8008970:	f04f 0b00 	mov.w	fp, #0
 8008974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008978:	f104 021a 	add.w	r2, r4, #26
 800897c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	eba3 0309 	sub.w	r3, r3, r9
 8008984:	455b      	cmp	r3, fp
 8008986:	dc33      	bgt.n	80089f0 <_printf_float+0x384>
 8008988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800898c:	429a      	cmp	r2, r3
 800898e:	db3b      	blt.n	8008a08 <_printf_float+0x39c>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d438      	bmi.n	8008a08 <_printf_float+0x39c>
 8008996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008998:	9a05      	ldr	r2, [sp, #20]
 800899a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800899c:	1a9a      	subs	r2, r3, r2
 800899e:	eba3 0901 	sub.w	r9, r3, r1
 80089a2:	4591      	cmp	r9, r2
 80089a4:	bfa8      	it	ge
 80089a6:	4691      	movge	r9, r2
 80089a8:	f1b9 0f00 	cmp.w	r9, #0
 80089ac:	dc35      	bgt.n	8008a1a <_printf_float+0x3ae>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b6:	f104 0a1a 	add.w	sl, r4, #26
 80089ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	eba3 0309 	sub.w	r3, r3, r9
 80089c4:	4543      	cmp	r3, r8
 80089c6:	f77f af79 	ble.w	80088bc <_printf_float+0x250>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4652      	mov	r2, sl
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	f43f aeaa 	beq.w	800872e <_printf_float+0xc2>
 80089da:	f108 0801 	add.w	r8, r8, #1
 80089de:	e7ec      	b.n	80089ba <_printf_float+0x34e>
 80089e0:	4613      	mov	r3, r2
 80089e2:	4631      	mov	r1, r6
 80089e4:	4642      	mov	r2, r8
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	d1c0      	bne.n	8008970 <_printf_float+0x304>
 80089ee:	e69e      	b.n	800872e <_printf_float+0xc2>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	9205      	str	r2, [sp, #20]
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f ae97 	beq.w	800872e <_printf_float+0xc2>
 8008a00:	9a05      	ldr	r2, [sp, #20]
 8008a02:	f10b 0b01 	add.w	fp, fp, #1
 8008a06:	e7b9      	b.n	800897c <_printf_float+0x310>
 8008a08:	ee18 3a10 	vmov	r3, s16
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	d1be      	bne.n	8008996 <_printf_float+0x32a>
 8008a18:	e689      	b.n	800872e <_printf_float+0xc2>
 8008a1a:	9a05      	ldr	r2, [sp, #20]
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	4442      	add	r2, r8
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	d1c1      	bne.n	80089ae <_printf_float+0x342>
 8008a2a:	e680      	b.n	800872e <_printf_float+0xc2>
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	dc01      	bgt.n	8008a36 <_printf_float+0x3ca>
 8008a32:	07db      	lsls	r3, r3, #31
 8008a34:	d538      	bpl.n	8008aa8 <_printf_float+0x43c>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	f43f ae74 	beq.w	800872e <_printf_float+0xc2>
 8008a46:	ee18 3a10 	vmov	r3, s16
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f ae6b 	beq.w	800872e <_printf_float+0xc2>
 8008a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f7f8 f842 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a64:	b9d8      	cbnz	r0, 8008a9e <_printf_float+0x432>
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	f108 0201 	add.w	r2, r8, #1
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	d10e      	bne.n	8008a96 <_printf_float+0x42a>
 8008a78:	e659      	b.n	800872e <_printf_float+0xc2>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae52 	beq.w	800872e <_printf_float+0xc2>
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a90:	3b01      	subs	r3, #1
 8008a92:	4543      	cmp	r3, r8
 8008a94:	dcf1      	bgt.n	8008a7a <_printf_float+0x40e>
 8008a96:	464b      	mov	r3, r9
 8008a98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a9c:	e6dc      	b.n	8008858 <_printf_float+0x1ec>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	f104 0a1a 	add.w	sl, r4, #26
 8008aa6:	e7f2      	b.n	8008a8e <_printf_float+0x422>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4642      	mov	r2, r8
 8008aac:	e7df      	b.n	8008a6e <_printf_float+0x402>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	464a      	mov	r2, r9
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f43f ae38 	beq.w	800872e <_printf_float+0xc2>
 8008abe:	f108 0801 	add.w	r8, r8, #1
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac6:	1a5b      	subs	r3, r3, r1
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	dcf0      	bgt.n	8008aae <_printf_float+0x442>
 8008acc:	e6fa      	b.n	80088c4 <_printf_float+0x258>
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	f104 0919 	add.w	r9, r4, #25
 8008ad6:	e7f4      	b.n	8008ac2 <_printf_float+0x456>

08008ad8 <_printf_common>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	4616      	mov	r6, r2
 8008ade:	4699      	mov	r9, r3
 8008ae0:	688a      	ldr	r2, [r1, #8]
 8008ae2:	690b      	ldr	r3, [r1, #16]
 8008ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bfb8      	it	lt
 8008aec:	4613      	movlt	r3, r2
 8008aee:	6033      	str	r3, [r6, #0]
 8008af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af4:	4607      	mov	r7, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	b10a      	cbz	r2, 8008afe <_printf_common+0x26>
 8008afa:	3301      	adds	r3, #1
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	0699      	lsls	r1, r3, #26
 8008b02:	bf42      	ittt	mi
 8008b04:	6833      	ldrmi	r3, [r6, #0]
 8008b06:	3302      	addmi	r3, #2
 8008b08:	6033      	strmi	r3, [r6, #0]
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	f015 0506 	ands.w	r5, r5, #6
 8008b10:	d106      	bne.n	8008b20 <_printf_common+0x48>
 8008b12:	f104 0a19 	add.w	sl, r4, #25
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	6832      	ldr	r2, [r6, #0]
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	42ab      	cmp	r3, r5
 8008b1e:	dc26      	bgt.n	8008b6e <_printf_common+0x96>
 8008b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b24:	1e13      	subs	r3, r2, #0
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	2301      	movne	r3, #1
 8008b2c:	0692      	lsls	r2, r2, #26
 8008b2e:	d42b      	bmi.n	8008b88 <_printf_common+0xb0>
 8008b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b34:	4649      	mov	r1, r9
 8008b36:	4638      	mov	r0, r7
 8008b38:	47c0      	blx	r8
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d01e      	beq.n	8008b7c <_printf_common+0xa4>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	68e5      	ldr	r5, [r4, #12]
 8008b42:	6832      	ldr	r2, [r6, #0]
 8008b44:	f003 0306 	and.w	r3, r3, #6
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	bf08      	it	eq
 8008b4c:	1aad      	subeq	r5, r5, r2
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	6922      	ldr	r2, [r4, #16]
 8008b52:	bf0c      	ite	eq
 8008b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b58:	2500      	movne	r5, #0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	bfc4      	itt	gt
 8008b5e:	1a9b      	subgt	r3, r3, r2
 8008b60:	18ed      	addgt	r5, r5, r3
 8008b62:	2600      	movs	r6, #0
 8008b64:	341a      	adds	r4, #26
 8008b66:	42b5      	cmp	r5, r6
 8008b68:	d11a      	bne.n	8008ba0 <_printf_common+0xc8>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e008      	b.n	8008b80 <_printf_common+0xa8>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4652      	mov	r2, sl
 8008b72:	4649      	mov	r1, r9
 8008b74:	4638      	mov	r0, r7
 8008b76:	47c0      	blx	r8
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d103      	bne.n	8008b84 <_printf_common+0xac>
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7c6      	b.n	8008b16 <_printf_common+0x3e>
 8008b88:	18e1      	adds	r1, r4, r3
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	2030      	movs	r0, #48	; 0x30
 8008b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b92:	4422      	add	r2, r4
 8008b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	e7c7      	b.n	8008b30 <_printf_common+0x58>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c0      	blx	r8
 8008baa:	3001      	adds	r0, #1
 8008bac:	d0e6      	beq.n	8008b7c <_printf_common+0xa4>
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7d9      	b.n	8008b66 <_printf_common+0x8e>
	...

08008bb4 <_printf_i>:
 8008bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	7e0f      	ldrb	r7, [r1, #24]
 8008bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bbc:	2f78      	cmp	r7, #120	; 0x78
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bca:	d807      	bhi.n	8008bdc <_printf_i+0x28>
 8008bcc:	2f62      	cmp	r7, #98	; 0x62
 8008bce:	d80a      	bhi.n	8008be6 <_printf_i+0x32>
 8008bd0:	2f00      	cmp	r7, #0
 8008bd2:	f000 80d8 	beq.w	8008d86 <_printf_i+0x1d2>
 8008bd6:	2f58      	cmp	r7, #88	; 0x58
 8008bd8:	f000 80a3 	beq.w	8008d22 <_printf_i+0x16e>
 8008bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be4:	e03a      	b.n	8008c5c <_printf_i+0xa8>
 8008be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bea:	2b15      	cmp	r3, #21
 8008bec:	d8f6      	bhi.n	8008bdc <_printf_i+0x28>
 8008bee:	a101      	add	r1, pc, #4	; (adr r1, 8008bf4 <_printf_i+0x40>)
 8008bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf4:	08008c4d 	.word	0x08008c4d
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008bdd 	.word	0x08008bdd
 8008c00:	08008bdd 	.word	0x08008bdd
 8008c04:	08008bdd 	.word	0x08008bdd
 8008c08:	08008bdd 	.word	0x08008bdd
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bdd 	.word	0x08008bdd
 8008c14:	08008bdd 	.word	0x08008bdd
 8008c18:	08008bdd 	.word	0x08008bdd
 8008c1c:	08008bdd 	.word	0x08008bdd
 8008c20:	08008d6d 	.word	0x08008d6d
 8008c24:	08008c91 	.word	0x08008c91
 8008c28:	08008d4f 	.word	0x08008d4f
 8008c2c:	08008bdd 	.word	0x08008bdd
 8008c30:	08008bdd 	.word	0x08008bdd
 8008c34:	08008d8f 	.word	0x08008d8f
 8008c38:	08008bdd 	.word	0x08008bdd
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008bdd 	.word	0x08008bdd
 8008c44:	08008bdd 	.word	0x08008bdd
 8008c48:	08008d57 	.word	0x08008d57
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	602a      	str	r2, [r5, #0]
 8008c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0a3      	b.n	8008da8 <_printf_i+0x1f4>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	6829      	ldr	r1, [r5, #0]
 8008c64:	0606      	lsls	r6, r0, #24
 8008c66:	f101 0304 	add.w	r3, r1, #4
 8008c6a:	d50a      	bpl.n	8008c82 <_printf_i+0xce>
 8008c6c:	680e      	ldr	r6, [r1, #0]
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	da03      	bge.n	8008c7c <_printf_i+0xc8>
 8008c74:	232d      	movs	r3, #45	; 0x2d
 8008c76:	4276      	negs	r6, r6
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c7c:	485e      	ldr	r0, [pc, #376]	; (8008df8 <_printf_i+0x244>)
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e019      	b.n	8008cb6 <_printf_i+0x102>
 8008c82:	680e      	ldr	r6, [r1, #0]
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c8a:	bf18      	it	ne
 8008c8c:	b236      	sxthne	r6, r6
 8008c8e:	e7ef      	b.n	8008c70 <_printf_i+0xbc>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	6029      	str	r1, [r5, #0]
 8008c98:	0601      	lsls	r1, r0, #24
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0xec>
 8008c9c:	681e      	ldr	r6, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <_printf_i+0xf2>
 8008ca0:	0646      	lsls	r6, r0, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0xe8>
 8008ca4:	881e      	ldrh	r6, [r3, #0]
 8008ca6:	4854      	ldr	r0, [pc, #336]	; (8008df8 <_printf_i+0x244>)
 8008ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8008caa:	bf0c      	ite	eq
 8008cac:	2308      	moveq	r3, #8
 8008cae:	230a      	movne	r3, #10
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb6:	6865      	ldr	r5, [r4, #4]
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	bfa2      	ittt	ge
 8008cbe:	6821      	ldrge	r1, [r4, #0]
 8008cc0:	f021 0104 	bicge.w	r1, r1, #4
 8008cc4:	6021      	strge	r1, [r4, #0]
 8008cc6:	b90e      	cbnz	r6, 8008ccc <_printf_i+0x118>
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d04d      	beq.n	8008d68 <_printf_i+0x1b4>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008cd6:	5dc7      	ldrb	r7, [r0, r7]
 8008cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cdc:	4637      	mov	r7, r6
 8008cde:	42bb      	cmp	r3, r7
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	d9f4      	bls.n	8008cce <_printf_i+0x11a>
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d10b      	bne.n	8008d00 <_printf_i+0x14c>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07de      	lsls	r6, r3, #31
 8008cec:	d508      	bpl.n	8008d00 <_printf_i+0x14c>
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6861      	ldr	r1, [r4, #4]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	bfde      	ittt	le
 8008cf6:	2330      	movle	r3, #48	; 0x30
 8008cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d00:	1b52      	subs	r2, r2, r5
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	f8cd a000 	str.w	sl, [sp]
 8008d08:	464b      	mov	r3, r9
 8008d0a:	aa03      	add	r2, sp, #12
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f7ff fee2 	bl	8008ad8 <_printf_common>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d14c      	bne.n	8008db2 <_printf_i+0x1fe>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b004      	add	sp, #16
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	4835      	ldr	r0, [pc, #212]	; (8008df8 <_printf_i+0x244>)
 8008d24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d28:	6829      	ldr	r1, [r5, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d30:	6029      	str	r1, [r5, #0]
 8008d32:	061d      	lsls	r5, r3, #24
 8008d34:	d514      	bpl.n	8008d60 <_printf_i+0x1ac>
 8008d36:	07df      	lsls	r7, r3, #31
 8008d38:	bf44      	itt	mi
 8008d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d3e:	6023      	strmi	r3, [r4, #0]
 8008d40:	b91e      	cbnz	r6, 8008d4a <_printf_i+0x196>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	f023 0320 	bic.w	r3, r3, #32
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	e7b0      	b.n	8008cb0 <_printf_i+0xfc>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f043 0320 	orr.w	r3, r3, #32
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	2378      	movs	r3, #120	; 0x78
 8008d58:	4828      	ldr	r0, [pc, #160]	; (8008dfc <_printf_i+0x248>)
 8008d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d5e:	e7e3      	b.n	8008d28 <_printf_i+0x174>
 8008d60:	0659      	lsls	r1, r3, #25
 8008d62:	bf48      	it	mi
 8008d64:	b2b6      	uxthmi	r6, r6
 8008d66:	e7e6      	b.n	8008d36 <_printf_i+0x182>
 8008d68:	4615      	mov	r5, r2
 8008d6a:	e7bb      	b.n	8008ce4 <_printf_i+0x130>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	6826      	ldr	r6, [r4, #0]
 8008d70:	6961      	ldr	r1, [r4, #20]
 8008d72:	1d18      	adds	r0, r3, #4
 8008d74:	6028      	str	r0, [r5, #0]
 8008d76:	0635      	lsls	r5, r6, #24
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	d501      	bpl.n	8008d80 <_printf_i+0x1cc>
 8008d7c:	6019      	str	r1, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <_printf_i+0x1d2>
 8008d80:	0670      	lsls	r0, r6, #25
 8008d82:	d5fb      	bpl.n	8008d7c <_printf_i+0x1c8>
 8008d84:	8019      	strh	r1, [r3, #0]
 8008d86:	2300      	movs	r3, #0
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	4615      	mov	r5, r2
 8008d8c:	e7ba      	b.n	8008d04 <_printf_i+0x150>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	602a      	str	r2, [r5, #0]
 8008d94:	681d      	ldr	r5, [r3, #0]
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7f7 fa30 	bl	8000200 <memchr>
 8008da0:	b108      	cbz	r0, 8008da6 <_printf_i+0x1f2>
 8008da2:	1b40      	subs	r0, r0, r5
 8008da4:	6060      	str	r0, [r4, #4]
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	2300      	movs	r3, #0
 8008dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db0:	e7a8      	b.n	8008d04 <_printf_i+0x150>
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	47d0      	blx	sl
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d0ab      	beq.n	8008d18 <_printf_i+0x164>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	079b      	lsls	r3, r3, #30
 8008dc4:	d413      	bmi.n	8008dee <_printf_i+0x23a>
 8008dc6:	68e0      	ldr	r0, [r4, #12]
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	bfb8      	it	lt
 8008dce:	4618      	movlt	r0, r3
 8008dd0:	e7a4      	b.n	8008d1c <_printf_i+0x168>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	47d0      	blx	sl
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d09b      	beq.n	8008d18 <_printf_i+0x164>
 8008de0:	3501      	adds	r5, #1
 8008de2:	68e3      	ldr	r3, [r4, #12]
 8008de4:	9903      	ldr	r1, [sp, #12]
 8008de6:	1a5b      	subs	r3, r3, r1
 8008de8:	42ab      	cmp	r3, r5
 8008dea:	dcf2      	bgt.n	8008dd2 <_printf_i+0x21e>
 8008dec:	e7eb      	b.n	8008dc6 <_printf_i+0x212>
 8008dee:	2500      	movs	r5, #0
 8008df0:	f104 0619 	add.w	r6, r4, #25
 8008df4:	e7f5      	b.n	8008de2 <_printf_i+0x22e>
 8008df6:	bf00      	nop
 8008df8:	0800ef42 	.word	0x0800ef42
 8008dfc:	0800ef53 	.word	0x0800ef53

08008e00 <_scanf_float>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b087      	sub	sp, #28
 8008e06:	4617      	mov	r7, r2
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	688b      	ldr	r3, [r1, #8]
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e12:	bf83      	ittte	hi
 8008e14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e18:	195b      	addhi	r3, r3, r5
 8008e1a:	9302      	strhi	r3, [sp, #8]
 8008e1c:	2300      	movls	r3, #0
 8008e1e:	bf86      	itte	hi
 8008e20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e24:	608b      	strhi	r3, [r1, #8]
 8008e26:	9302      	strls	r3, [sp, #8]
 8008e28:	680b      	ldr	r3, [r1, #0]
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e32:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	465e      	mov	r6, fp
 8008e40:	46aa      	mov	sl, r5
 8008e42:	46a9      	mov	r9, r5
 8008e44:	9501      	str	r5, [sp, #4]
 8008e46:	68a2      	ldr	r2, [r4, #8]
 8008e48:	b152      	cbz	r2, 8008e60 <_scanf_float+0x60>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e50:	d864      	bhi.n	8008f1c <_scanf_float+0x11c>
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d83c      	bhi.n	8008ed0 <_scanf_float+0xd0>
 8008e56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e5a:	b2c8      	uxtb	r0, r1
 8008e5c:	280e      	cmp	r0, #14
 8008e5e:	d93a      	bls.n	8008ed6 <_scanf_float+0xd6>
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	d003      	beq.n	8008e6e <_scanf_float+0x6e>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e72:	f1ba 0f01 	cmp.w	sl, #1
 8008e76:	f200 8113 	bhi.w	80090a0 <_scanf_float+0x2a0>
 8008e7a:	455e      	cmp	r6, fp
 8008e7c:	f200 8105 	bhi.w	800908a <_scanf_float+0x28a>
 8008e80:	2501      	movs	r5, #1
 8008e82:	4628      	mov	r0, r5
 8008e84:	b007      	add	sp, #28
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e8e:	2a0d      	cmp	r2, #13
 8008e90:	d8e6      	bhi.n	8008e60 <_scanf_float+0x60>
 8008e92:	a101      	add	r1, pc, #4	; (adr r1, 8008e98 <_scanf_float+0x98>)
 8008e94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e98:	08008fd7 	.word	0x08008fd7
 8008e9c:	08008e61 	.word	0x08008e61
 8008ea0:	08008e61 	.word	0x08008e61
 8008ea4:	08008e61 	.word	0x08008e61
 8008ea8:	08009037 	.word	0x08009037
 8008eac:	0800900f 	.word	0x0800900f
 8008eb0:	08008e61 	.word	0x08008e61
 8008eb4:	08008e61 	.word	0x08008e61
 8008eb8:	08008fe5 	.word	0x08008fe5
 8008ebc:	08008e61 	.word	0x08008e61
 8008ec0:	08008e61 	.word	0x08008e61
 8008ec4:	08008e61 	.word	0x08008e61
 8008ec8:	08008e61 	.word	0x08008e61
 8008ecc:	08008f9d 	.word	0x08008f9d
 8008ed0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ed4:	e7db      	b.n	8008e8e <_scanf_float+0x8e>
 8008ed6:	290e      	cmp	r1, #14
 8008ed8:	d8c2      	bhi.n	8008e60 <_scanf_float+0x60>
 8008eda:	a001      	add	r0, pc, #4	; (adr r0, 8008ee0 <_scanf_float+0xe0>)
 8008edc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ee0:	08008f8f 	.word	0x08008f8f
 8008ee4:	08008e61 	.word	0x08008e61
 8008ee8:	08008f8f 	.word	0x08008f8f
 8008eec:	08009023 	.word	0x08009023
 8008ef0:	08008e61 	.word	0x08008e61
 8008ef4:	08008f3d 	.word	0x08008f3d
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f79 	.word	0x08008f79
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	2b6e      	cmp	r3, #110	; 0x6e
 8008f1e:	d809      	bhi.n	8008f34 <_scanf_float+0x134>
 8008f20:	2b60      	cmp	r3, #96	; 0x60
 8008f22:	d8b2      	bhi.n	8008e8a <_scanf_float+0x8a>
 8008f24:	2b54      	cmp	r3, #84	; 0x54
 8008f26:	d077      	beq.n	8009018 <_scanf_float+0x218>
 8008f28:	2b59      	cmp	r3, #89	; 0x59
 8008f2a:	d199      	bne.n	8008e60 <_scanf_float+0x60>
 8008f2c:	2d07      	cmp	r5, #7
 8008f2e:	d197      	bne.n	8008e60 <_scanf_float+0x60>
 8008f30:	2508      	movs	r5, #8
 8008f32:	e029      	b.n	8008f88 <_scanf_float+0x188>
 8008f34:	2b74      	cmp	r3, #116	; 0x74
 8008f36:	d06f      	beq.n	8009018 <_scanf_float+0x218>
 8008f38:	2b79      	cmp	r3, #121	; 0x79
 8008f3a:	e7f6      	b.n	8008f2a <_scanf_float+0x12a>
 8008f3c:	6821      	ldr	r1, [r4, #0]
 8008f3e:	05c8      	lsls	r0, r1, #23
 8008f40:	d51a      	bpl.n	8008f78 <_scanf_float+0x178>
 8008f42:	9b02      	ldr	r3, [sp, #8]
 8008f44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f48:	6021      	str	r1, [r4, #0]
 8008f4a:	f109 0901 	add.w	r9, r9, #1
 8008f4e:	b11b      	cbz	r3, 8008f58 <_scanf_float+0x158>
 8008f50:	3b01      	subs	r3, #1
 8008f52:	3201      	adds	r2, #1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	60a2      	str	r2, [r4, #8]
 8008f58:	68a3      	ldr	r3, [r4, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	f340 8084 	ble.w	8009078 <_scanf_float+0x278>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	e766      	b.n	8008e46 <_scanf_float+0x46>
 8008f78:	eb1a 0f05 	cmn.w	sl, r5
 8008f7c:	f47f af70 	bne.w	8008e60 <_scanf_float+0x60>
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f86:	6022      	str	r2, [r4, #0]
 8008f88:	f806 3b01 	strb.w	r3, [r6], #1
 8008f8c:	e7e4      	b.n	8008f58 <_scanf_float+0x158>
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	0610      	lsls	r0, r2, #24
 8008f92:	f57f af65 	bpl.w	8008e60 <_scanf_float+0x60>
 8008f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f9a:	e7f4      	b.n	8008f86 <_scanf_float+0x186>
 8008f9c:	f1ba 0f00 	cmp.w	sl, #0
 8008fa0:	d10e      	bne.n	8008fc0 <_scanf_float+0x1c0>
 8008fa2:	f1b9 0f00 	cmp.w	r9, #0
 8008fa6:	d10e      	bne.n	8008fc6 <_scanf_float+0x1c6>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fb2:	d108      	bne.n	8008fc6 <_scanf_float+0x1c6>
 8008fb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	f04f 0a01 	mov.w	sl, #1
 8008fbe:	e7e3      	b.n	8008f88 <_scanf_float+0x188>
 8008fc0:	f1ba 0f02 	cmp.w	sl, #2
 8008fc4:	d055      	beq.n	8009072 <_scanf_float+0x272>
 8008fc6:	2d01      	cmp	r5, #1
 8008fc8:	d002      	beq.n	8008fd0 <_scanf_float+0x1d0>
 8008fca:	2d04      	cmp	r5, #4
 8008fcc:	f47f af48 	bne.w	8008e60 <_scanf_float+0x60>
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	b2ed      	uxtb	r5, r5
 8008fd4:	e7d8      	b.n	8008f88 <_scanf_float+0x188>
 8008fd6:	f1ba 0f01 	cmp.w	sl, #1
 8008fda:	f47f af41 	bne.w	8008e60 <_scanf_float+0x60>
 8008fde:	f04f 0a02 	mov.w	sl, #2
 8008fe2:	e7d1      	b.n	8008f88 <_scanf_float+0x188>
 8008fe4:	b97d      	cbnz	r5, 8009006 <_scanf_float+0x206>
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	f47f af3c 	bne.w	8008e66 <_scanf_float+0x66>
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ff4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ff8:	f47f af39 	bne.w	8008e6e <_scanf_float+0x6e>
 8008ffc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009000:	6022      	str	r2, [r4, #0]
 8009002:	2501      	movs	r5, #1
 8009004:	e7c0      	b.n	8008f88 <_scanf_float+0x188>
 8009006:	2d03      	cmp	r5, #3
 8009008:	d0e2      	beq.n	8008fd0 <_scanf_float+0x1d0>
 800900a:	2d05      	cmp	r5, #5
 800900c:	e7de      	b.n	8008fcc <_scanf_float+0x1cc>
 800900e:	2d02      	cmp	r5, #2
 8009010:	f47f af26 	bne.w	8008e60 <_scanf_float+0x60>
 8009014:	2503      	movs	r5, #3
 8009016:	e7b7      	b.n	8008f88 <_scanf_float+0x188>
 8009018:	2d06      	cmp	r5, #6
 800901a:	f47f af21 	bne.w	8008e60 <_scanf_float+0x60>
 800901e:	2507      	movs	r5, #7
 8009020:	e7b2      	b.n	8008f88 <_scanf_float+0x188>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	0591      	lsls	r1, r2, #22
 8009026:	f57f af1b 	bpl.w	8008e60 <_scanf_float+0x60>
 800902a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800902e:	6022      	str	r2, [r4, #0]
 8009030:	f8cd 9004 	str.w	r9, [sp, #4]
 8009034:	e7a8      	b.n	8008f88 <_scanf_float+0x188>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800903c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009040:	d006      	beq.n	8009050 <_scanf_float+0x250>
 8009042:	0550      	lsls	r0, r2, #21
 8009044:	f57f af0c 	bpl.w	8008e60 <_scanf_float+0x60>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	f43f af0f 	beq.w	8008e6e <_scanf_float+0x6e>
 8009050:	0591      	lsls	r1, r2, #22
 8009052:	bf58      	it	pl
 8009054:	9901      	ldrpl	r1, [sp, #4]
 8009056:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800905a:	bf58      	it	pl
 800905c:	eba9 0101 	subpl.w	r1, r9, r1
 8009060:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009064:	bf58      	it	pl
 8009066:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	e78a      	b.n	8008f88 <_scanf_float+0x188>
 8009072:	f04f 0a03 	mov.w	sl, #3
 8009076:	e787      	b.n	8008f88 <_scanf_float+0x188>
 8009078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800907c:	4639      	mov	r1, r7
 800907e:	4640      	mov	r0, r8
 8009080:	4798      	blx	r3
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f aedf 	beq.w	8008e46 <_scanf_float+0x46>
 8009088:	e6ea      	b.n	8008e60 <_scanf_float+0x60>
 800908a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800908e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009092:	463a      	mov	r2, r7
 8009094:	4640      	mov	r0, r8
 8009096:	4798      	blx	r3
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	3b01      	subs	r3, #1
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	e6ec      	b.n	8008e7a <_scanf_float+0x7a>
 80090a0:	1e6b      	subs	r3, r5, #1
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d825      	bhi.n	80090f2 <_scanf_float+0x2f2>
 80090a6:	2d02      	cmp	r5, #2
 80090a8:	d836      	bhi.n	8009118 <_scanf_float+0x318>
 80090aa:	455e      	cmp	r6, fp
 80090ac:	f67f aee8 	bls.w	8008e80 <_scanf_float+0x80>
 80090b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b8:	463a      	mov	r2, r7
 80090ba:	4640      	mov	r0, r8
 80090bc:	4798      	blx	r3
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	e7f1      	b.n	80090aa <_scanf_float+0x2aa>
 80090c6:	9802      	ldr	r0, [sp, #8]
 80090c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090d0:	9002      	str	r0, [sp, #8]
 80090d2:	463a      	mov	r2, r7
 80090d4:	4640      	mov	r0, r8
 80090d6:	4798      	blx	r3
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	3b01      	subs	r3, #1
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090e2:	fa5f fa8a 	uxtb.w	sl, sl
 80090e6:	f1ba 0f02 	cmp.w	sl, #2
 80090ea:	d1ec      	bne.n	80090c6 <_scanf_float+0x2c6>
 80090ec:	3d03      	subs	r5, #3
 80090ee:	b2ed      	uxtb	r5, r5
 80090f0:	1b76      	subs	r6, r6, r5
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	05da      	lsls	r2, r3, #23
 80090f6:	d52f      	bpl.n	8009158 <_scanf_float+0x358>
 80090f8:	055b      	lsls	r3, r3, #21
 80090fa:	d510      	bpl.n	800911e <_scanf_float+0x31e>
 80090fc:	455e      	cmp	r6, fp
 80090fe:	f67f aebf 	bls.w	8008e80 <_scanf_float+0x80>
 8009102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800910a:	463a      	mov	r2, r7
 800910c:	4640      	mov	r0, r8
 800910e:	4798      	blx	r3
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	3b01      	subs	r3, #1
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	e7f1      	b.n	80090fc <_scanf_float+0x2fc>
 8009118:	46aa      	mov	sl, r5
 800911a:	9602      	str	r6, [sp, #8]
 800911c:	e7df      	b.n	80090de <_scanf_float+0x2de>
 800911e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	2965      	cmp	r1, #101	; 0x65
 8009126:	f103 33ff 	add.w	r3, r3, #4294967295
 800912a:	f106 35ff 	add.w	r5, r6, #4294967295
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	d00c      	beq.n	800914c <_scanf_float+0x34c>
 8009132:	2945      	cmp	r1, #69	; 0x45
 8009134:	d00a      	beq.n	800914c <_scanf_float+0x34c>
 8009136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800913a:	463a      	mov	r2, r7
 800913c:	4640      	mov	r0, r8
 800913e:	4798      	blx	r3
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009146:	3b01      	subs	r3, #1
 8009148:	1eb5      	subs	r5, r6, #2
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009150:	463a      	mov	r2, r7
 8009152:	4640      	mov	r0, r8
 8009154:	4798      	blx	r3
 8009156:	462e      	mov	r6, r5
 8009158:	6825      	ldr	r5, [r4, #0]
 800915a:	f015 0510 	ands.w	r5, r5, #16
 800915e:	d159      	bne.n	8009214 <_scanf_float+0x414>
 8009160:	7035      	strb	r5, [r6, #0]
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916c:	d11b      	bne.n	80091a6 <_scanf_float+0x3a6>
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	454b      	cmp	r3, r9
 8009172:	eba3 0209 	sub.w	r2, r3, r9
 8009176:	d123      	bne.n	80091c0 <_scanf_float+0x3c0>
 8009178:	2200      	movs	r2, #0
 800917a:	4659      	mov	r1, fp
 800917c:	4640      	mov	r0, r8
 800917e:	f000 fe99 	bl	8009eb4 <_strtod_r>
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	f012 0f02 	tst.w	r2, #2
 800918a:	ec57 6b10 	vmov	r6, r7, d0
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	d021      	beq.n	80091d6 <_scanf_float+0x3d6>
 8009192:	9903      	ldr	r1, [sp, #12]
 8009194:	1d1a      	adds	r2, r3, #4
 8009196:	600a      	str	r2, [r1, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	e9c3 6700 	strd	r6, r7, [r3]
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60e3      	str	r3, [r4, #12]
 80091a4:	e66d      	b.n	8008e82 <_scanf_float+0x82>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0e5      	beq.n	8009178 <_scanf_float+0x378>
 80091ac:	9905      	ldr	r1, [sp, #20]
 80091ae:	230a      	movs	r3, #10
 80091b0:	462a      	mov	r2, r5
 80091b2:	3101      	adds	r1, #1
 80091b4:	4640      	mov	r0, r8
 80091b6:	f000 ff6d 	bl	800a094 <_strtol_r>
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	9e05      	ldr	r6, [sp, #20]
 80091be:	1ac2      	subs	r2, r0, r3
 80091c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091c4:	429e      	cmp	r6, r3
 80091c6:	bf28      	it	cs
 80091c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091cc:	4912      	ldr	r1, [pc, #72]	; (8009218 <_scanf_float+0x418>)
 80091ce:	4630      	mov	r0, r6
 80091d0:	f000 f82c 	bl	800922c <siprintf>
 80091d4:	e7d0      	b.n	8009178 <_scanf_float+0x378>
 80091d6:	9903      	ldr	r1, [sp, #12]
 80091d8:	f012 0f04 	tst.w	r2, #4
 80091dc:	f103 0204 	add.w	r2, r3, #4
 80091e0:	600a      	str	r2, [r1, #0]
 80091e2:	d1d9      	bne.n	8009198 <_scanf_float+0x398>
 80091e4:	f8d3 8000 	ldr.w	r8, [r3]
 80091e8:	ee10 2a10 	vmov	r2, s0
 80091ec:	ee10 0a10 	vmov	r0, s0
 80091f0:	463b      	mov	r3, r7
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fcaa 	bl	8000b4c <__aeabi_dcmpun>
 80091f8:	b128      	cbz	r0, 8009206 <_scanf_float+0x406>
 80091fa:	4808      	ldr	r0, [pc, #32]	; (800921c <_scanf_float+0x41c>)
 80091fc:	f000 f810 	bl	8009220 <nanf>
 8009200:	ed88 0a00 	vstr	s0, [r8]
 8009204:	e7cb      	b.n	800919e <_scanf_float+0x39e>
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	f7f7 fcfd 	bl	8000c08 <__aeabi_d2f>
 800920e:	f8c8 0000 	str.w	r0, [r8]
 8009212:	e7c4      	b.n	800919e <_scanf_float+0x39e>
 8009214:	2500      	movs	r5, #0
 8009216:	e634      	b.n	8008e82 <_scanf_float+0x82>
 8009218:	0800ef64 	.word	0x0800ef64
 800921c:	0800f06f 	.word	0x0800f06f

08009220 <nanf>:
 8009220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009228 <nanf+0x8>
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	7fc00000 	.word	0x7fc00000

0800922c <siprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	b500      	push	{lr}
 8009230:	b09c      	sub	sp, #112	; 0x70
 8009232:	ab1d      	add	r3, sp, #116	; 0x74
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <siprintf+0x38>)
 800923e:	9107      	str	r1, [sp, #28]
 8009240:	9104      	str	r1, [sp, #16]
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <siprintf+0x3c>)
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	a902      	add	r1, sp, #8
 8009250:	f003 f80c 	bl	800c26c <_svfiprintf_r>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	b01c      	add	sp, #112	; 0x70
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	2000007c 	.word	0x2000007c
 8009268:	ffff0208 	.word	0xffff0208

0800926c <sulp>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	ec45 4b10 	vmov	d0, r4, r5
 8009276:	4616      	mov	r6, r2
 8009278:	f002 fd56 	bl	800bd28 <__ulp>
 800927c:	ec51 0b10 	vmov	r0, r1, d0
 8009280:	b17e      	cbz	r6, 80092a2 <sulp+0x36>
 8009282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009286:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800928a:	2b00      	cmp	r3, #0
 800928c:	dd09      	ble.n	80092a2 <sulp+0x36>
 800928e:	051b      	lsls	r3, r3, #20
 8009290:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009294:	2400      	movs	r4, #0
 8009296:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800929a:	4622      	mov	r2, r4
 800929c:	462b      	mov	r3, r5
 800929e:	f7f7 f9bb 	bl	8000618 <__aeabi_dmul>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	0000      	movs	r0, r0
	...

080092a8 <_strtod_l>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	ed2d 8b02 	vpush	{d8}
 80092b0:	b09d      	sub	sp, #116	; 0x74
 80092b2:	461f      	mov	r7, r3
 80092b4:	2300      	movs	r3, #0
 80092b6:	9318      	str	r3, [sp, #96]	; 0x60
 80092b8:	4ba2      	ldr	r3, [pc, #648]	; (8009544 <_strtod_l+0x29c>)
 80092ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	4604      	mov	r4, r0
 80092c2:	4618      	mov	r0, r3
 80092c4:	4688      	mov	r8, r1
 80092c6:	f7f6 ff8d 	bl	80001e4 <strlen>
 80092ca:	f04f 0a00 	mov.w	sl, #0
 80092ce:	4605      	mov	r5, r0
 80092d0:	f04f 0b00 	mov.w	fp, #0
 80092d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	2a2b      	cmp	r2, #43	; 0x2b
 80092de:	d04e      	beq.n	800937e <_strtod_l+0xd6>
 80092e0:	d83b      	bhi.n	800935a <_strtod_l+0xb2>
 80092e2:	2a0d      	cmp	r2, #13
 80092e4:	d834      	bhi.n	8009350 <_strtod_l+0xa8>
 80092e6:	2a08      	cmp	r2, #8
 80092e8:	d834      	bhi.n	8009354 <_strtod_l+0xac>
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	d03e      	beq.n	800936c <_strtod_l+0xc4>
 80092ee:	2300      	movs	r3, #0
 80092f0:	930a      	str	r3, [sp, #40]	; 0x28
 80092f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092f4:	7833      	ldrb	r3, [r6, #0]
 80092f6:	2b30      	cmp	r3, #48	; 0x30
 80092f8:	f040 80b0 	bne.w	800945c <_strtod_l+0x1b4>
 80092fc:	7873      	ldrb	r3, [r6, #1]
 80092fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009302:	2b58      	cmp	r3, #88	; 0x58
 8009304:	d168      	bne.n	80093d8 <_strtod_l+0x130>
 8009306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	ab18      	add	r3, sp, #96	; 0x60
 800930c:	9702      	str	r7, [sp, #8]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4a8d      	ldr	r2, [pc, #564]	; (8009548 <_strtod_l+0x2a0>)
 8009312:	ab19      	add	r3, sp, #100	; 0x64
 8009314:	a917      	add	r1, sp, #92	; 0x5c
 8009316:	4620      	mov	r0, r4
 8009318:	f001 fe6e 	bl	800aff8 <__gethex>
 800931c:	f010 0707 	ands.w	r7, r0, #7
 8009320:	4605      	mov	r5, r0
 8009322:	d005      	beq.n	8009330 <_strtod_l+0x88>
 8009324:	2f06      	cmp	r7, #6
 8009326:	d12c      	bne.n	8009382 <_strtod_l+0xda>
 8009328:	3601      	adds	r6, #1
 800932a:	2300      	movs	r3, #0
 800932c:	9617      	str	r6, [sp, #92]	; 0x5c
 800932e:	930a      	str	r3, [sp, #40]	; 0x28
 8009330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 8590 	bne.w	8009e58 <_strtod_l+0xbb0>
 8009338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933a:	b1eb      	cbz	r3, 8009378 <_strtod_l+0xd0>
 800933c:	4652      	mov	r2, sl
 800933e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009342:	ec43 2b10 	vmov	d0, r2, r3
 8009346:	b01d      	add	sp, #116	; 0x74
 8009348:	ecbd 8b02 	vpop	{d8}
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	2a20      	cmp	r2, #32
 8009352:	d1cc      	bne.n	80092ee <_strtod_l+0x46>
 8009354:	3301      	adds	r3, #1
 8009356:	9317      	str	r3, [sp, #92]	; 0x5c
 8009358:	e7be      	b.n	80092d8 <_strtod_l+0x30>
 800935a:	2a2d      	cmp	r2, #45	; 0x2d
 800935c:	d1c7      	bne.n	80092ee <_strtod_l+0x46>
 800935e:	2201      	movs	r2, #1
 8009360:	920a      	str	r2, [sp, #40]	; 0x28
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	9217      	str	r2, [sp, #92]	; 0x5c
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1c2      	bne.n	80092f2 <_strtod_l+0x4a>
 800936c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800936e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009372:	2b00      	cmp	r3, #0
 8009374:	f040 856e 	bne.w	8009e54 <_strtod_l+0xbac>
 8009378:	4652      	mov	r2, sl
 800937a:	465b      	mov	r3, fp
 800937c:	e7e1      	b.n	8009342 <_strtod_l+0x9a>
 800937e:	2200      	movs	r2, #0
 8009380:	e7ee      	b.n	8009360 <_strtod_l+0xb8>
 8009382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009384:	b13a      	cbz	r2, 8009396 <_strtod_l+0xee>
 8009386:	2135      	movs	r1, #53	; 0x35
 8009388:	a81a      	add	r0, sp, #104	; 0x68
 800938a:	f002 fdd8 	bl	800bf3e <__copybits>
 800938e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009390:	4620      	mov	r0, r4
 8009392:	f002 f997 	bl	800b6c4 <_Bfree>
 8009396:	3f01      	subs	r7, #1
 8009398:	2f04      	cmp	r7, #4
 800939a:	d806      	bhi.n	80093aa <_strtod_l+0x102>
 800939c:	e8df f007 	tbb	[pc, r7]
 80093a0:	1714030a 	.word	0x1714030a
 80093a4:	0a          	.byte	0x0a
 80093a5:	00          	.byte	0x00
 80093a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80093aa:	0728      	lsls	r0, r5, #28
 80093ac:	d5c0      	bpl.n	8009330 <_strtod_l+0x88>
 80093ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093b2:	e7bd      	b.n	8009330 <_strtod_l+0x88>
 80093b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80093b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093c6:	e7f0      	b.n	80093aa <_strtod_l+0x102>
 80093c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800954c <_strtod_l+0x2a4>
 80093cc:	e7ed      	b.n	80093aa <_strtod_l+0x102>
 80093ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093d2:	f04f 3aff 	mov.w	sl, #4294967295
 80093d6:	e7e8      	b.n	80093aa <_strtod_l+0x102>
 80093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d0f9      	beq.n	80093d8 <_strtod_l+0x130>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0a3      	beq.n	8009330 <_strtod_l+0x88>
 80093e8:	2301      	movs	r3, #1
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093f2:	9308      	str	r3, [sp, #32]
 80093f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80093f8:	464f      	mov	r7, r9
 80093fa:	220a      	movs	r2, #10
 80093fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093fe:	7806      	ldrb	r6, [r0, #0]
 8009400:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009404:	b2d9      	uxtb	r1, r3
 8009406:	2909      	cmp	r1, #9
 8009408:	d92a      	bls.n	8009460 <_strtod_l+0x1b8>
 800940a:	9905      	ldr	r1, [sp, #20]
 800940c:	462a      	mov	r2, r5
 800940e:	f003 f99f 	bl	800c750 <strncmp>
 8009412:	b398      	cbz	r0, 800947c <_strtod_l+0x1d4>
 8009414:	2000      	movs	r0, #0
 8009416:	4632      	mov	r2, r6
 8009418:	463d      	mov	r5, r7
 800941a:	9005      	str	r0, [sp, #20]
 800941c:	4603      	mov	r3, r0
 800941e:	2a65      	cmp	r2, #101	; 0x65
 8009420:	d001      	beq.n	8009426 <_strtod_l+0x17e>
 8009422:	2a45      	cmp	r2, #69	; 0x45
 8009424:	d118      	bne.n	8009458 <_strtod_l+0x1b0>
 8009426:	b91d      	cbnz	r5, 8009430 <_strtod_l+0x188>
 8009428:	9a04      	ldr	r2, [sp, #16]
 800942a:	4302      	orrs	r2, r0
 800942c:	d09e      	beq.n	800936c <_strtod_l+0xc4>
 800942e:	2500      	movs	r5, #0
 8009430:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009434:	f108 0201 	add.w	r2, r8, #1
 8009438:	9217      	str	r2, [sp, #92]	; 0x5c
 800943a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800943e:	2a2b      	cmp	r2, #43	; 0x2b
 8009440:	d075      	beq.n	800952e <_strtod_l+0x286>
 8009442:	2a2d      	cmp	r2, #45	; 0x2d
 8009444:	d07b      	beq.n	800953e <_strtod_l+0x296>
 8009446:	f04f 0c00 	mov.w	ip, #0
 800944a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800944e:	2909      	cmp	r1, #9
 8009450:	f240 8082 	bls.w	8009558 <_strtod_l+0x2b0>
 8009454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009458:	2600      	movs	r6, #0
 800945a:	e09d      	b.n	8009598 <_strtod_l+0x2f0>
 800945c:	2300      	movs	r3, #0
 800945e:	e7c4      	b.n	80093ea <_strtod_l+0x142>
 8009460:	2f08      	cmp	r7, #8
 8009462:	bfd8      	it	le
 8009464:	9907      	ldrle	r1, [sp, #28]
 8009466:	f100 0001 	add.w	r0, r0, #1
 800946a:	bfda      	itte	le
 800946c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009470:	9307      	strle	r3, [sp, #28]
 8009472:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009476:	3701      	adds	r7, #1
 8009478:	9017      	str	r0, [sp, #92]	; 0x5c
 800947a:	e7bf      	b.n	80093fc <_strtod_l+0x154>
 800947c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800947e:	195a      	adds	r2, r3, r5
 8009480:	9217      	str	r2, [sp, #92]	; 0x5c
 8009482:	5d5a      	ldrb	r2, [r3, r5]
 8009484:	2f00      	cmp	r7, #0
 8009486:	d037      	beq.n	80094f8 <_strtod_l+0x250>
 8009488:	9005      	str	r0, [sp, #20]
 800948a:	463d      	mov	r5, r7
 800948c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009490:	2b09      	cmp	r3, #9
 8009492:	d912      	bls.n	80094ba <_strtod_l+0x212>
 8009494:	2301      	movs	r3, #1
 8009496:	e7c2      	b.n	800941e <_strtod_l+0x176>
 8009498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	9217      	str	r2, [sp, #92]	; 0x5c
 800949e:	785a      	ldrb	r2, [r3, #1]
 80094a0:	3001      	adds	r0, #1
 80094a2:	2a30      	cmp	r2, #48	; 0x30
 80094a4:	d0f8      	beq.n	8009498 <_strtod_l+0x1f0>
 80094a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80094aa:	2b08      	cmp	r3, #8
 80094ac:	f200 84d9 	bhi.w	8009e62 <_strtod_l+0xbba>
 80094b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094b2:	9005      	str	r0, [sp, #20]
 80094b4:	2000      	movs	r0, #0
 80094b6:	9308      	str	r3, [sp, #32]
 80094b8:	4605      	mov	r5, r0
 80094ba:	3a30      	subs	r2, #48	; 0x30
 80094bc:	f100 0301 	add.w	r3, r0, #1
 80094c0:	d014      	beq.n	80094ec <_strtod_l+0x244>
 80094c2:	9905      	ldr	r1, [sp, #20]
 80094c4:	4419      	add	r1, r3
 80094c6:	9105      	str	r1, [sp, #20]
 80094c8:	462b      	mov	r3, r5
 80094ca:	eb00 0e05 	add.w	lr, r0, r5
 80094ce:	210a      	movs	r1, #10
 80094d0:	4573      	cmp	r3, lr
 80094d2:	d113      	bne.n	80094fc <_strtod_l+0x254>
 80094d4:	182b      	adds	r3, r5, r0
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	f105 0501 	add.w	r5, r5, #1
 80094dc:	4405      	add	r5, r0
 80094de:	dc1c      	bgt.n	800951a <_strtod_l+0x272>
 80094e0:	9907      	ldr	r1, [sp, #28]
 80094e2:	230a      	movs	r3, #10
 80094e4:	fb03 2301 	mla	r3, r3, r1, r2
 80094e8:	9307      	str	r3, [sp, #28]
 80094ea:	2300      	movs	r3, #0
 80094ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094ee:	1c51      	adds	r1, r2, #1
 80094f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80094f2:	7852      	ldrb	r2, [r2, #1]
 80094f4:	4618      	mov	r0, r3
 80094f6:	e7c9      	b.n	800948c <_strtod_l+0x1e4>
 80094f8:	4638      	mov	r0, r7
 80094fa:	e7d2      	b.n	80094a2 <_strtod_l+0x1fa>
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	dc04      	bgt.n	800950a <_strtod_l+0x262>
 8009500:	9e07      	ldr	r6, [sp, #28]
 8009502:	434e      	muls	r6, r1
 8009504:	9607      	str	r6, [sp, #28]
 8009506:	3301      	adds	r3, #1
 8009508:	e7e2      	b.n	80094d0 <_strtod_l+0x228>
 800950a:	f103 0c01 	add.w	ip, r3, #1
 800950e:	f1bc 0f10 	cmp.w	ip, #16
 8009512:	bfd8      	it	le
 8009514:	fb01 f909 	mulle.w	r9, r1, r9
 8009518:	e7f5      	b.n	8009506 <_strtod_l+0x25e>
 800951a:	2d10      	cmp	r5, #16
 800951c:	bfdc      	itt	le
 800951e:	230a      	movle	r3, #10
 8009520:	fb03 2909 	mlale	r9, r3, r9, r2
 8009524:	e7e1      	b.n	80094ea <_strtod_l+0x242>
 8009526:	2300      	movs	r3, #0
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	2301      	movs	r3, #1
 800952c:	e77c      	b.n	8009428 <_strtod_l+0x180>
 800952e:	f04f 0c00 	mov.w	ip, #0
 8009532:	f108 0202 	add.w	r2, r8, #2
 8009536:	9217      	str	r2, [sp, #92]	; 0x5c
 8009538:	f898 2002 	ldrb.w	r2, [r8, #2]
 800953c:	e785      	b.n	800944a <_strtod_l+0x1a2>
 800953e:	f04f 0c01 	mov.w	ip, #1
 8009542:	e7f6      	b.n	8009532 <_strtod_l+0x28a>
 8009544:	0800f250 	.word	0x0800f250
 8009548:	0800ef6c 	.word	0x0800ef6c
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009552:	1c51      	adds	r1, r2, #1
 8009554:	9117      	str	r1, [sp, #92]	; 0x5c
 8009556:	7852      	ldrb	r2, [r2, #1]
 8009558:	2a30      	cmp	r2, #48	; 0x30
 800955a:	d0f9      	beq.n	8009550 <_strtod_l+0x2a8>
 800955c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009560:	2908      	cmp	r1, #8
 8009562:	f63f af79 	bhi.w	8009458 <_strtod_l+0x1b0>
 8009566:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800956a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800956c:	9206      	str	r2, [sp, #24]
 800956e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009570:	1c51      	adds	r1, r2, #1
 8009572:	9117      	str	r1, [sp, #92]	; 0x5c
 8009574:	7852      	ldrb	r2, [r2, #1]
 8009576:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800957a:	2e09      	cmp	r6, #9
 800957c:	d937      	bls.n	80095ee <_strtod_l+0x346>
 800957e:	9e06      	ldr	r6, [sp, #24]
 8009580:	1b89      	subs	r1, r1, r6
 8009582:	2908      	cmp	r1, #8
 8009584:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009588:	dc02      	bgt.n	8009590 <_strtod_l+0x2e8>
 800958a:	4576      	cmp	r6, lr
 800958c:	bfa8      	it	ge
 800958e:	4676      	movge	r6, lr
 8009590:	f1bc 0f00 	cmp.w	ip, #0
 8009594:	d000      	beq.n	8009598 <_strtod_l+0x2f0>
 8009596:	4276      	negs	r6, r6
 8009598:	2d00      	cmp	r5, #0
 800959a:	d14d      	bne.n	8009638 <_strtod_l+0x390>
 800959c:	9904      	ldr	r1, [sp, #16]
 800959e:	4301      	orrs	r1, r0
 80095a0:	f47f aec6 	bne.w	8009330 <_strtod_l+0x88>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f47f aee1 	bne.w	800936c <_strtod_l+0xc4>
 80095aa:	2a69      	cmp	r2, #105	; 0x69
 80095ac:	d027      	beq.n	80095fe <_strtod_l+0x356>
 80095ae:	dc24      	bgt.n	80095fa <_strtod_l+0x352>
 80095b0:	2a49      	cmp	r2, #73	; 0x49
 80095b2:	d024      	beq.n	80095fe <_strtod_l+0x356>
 80095b4:	2a4e      	cmp	r2, #78	; 0x4e
 80095b6:	f47f aed9 	bne.w	800936c <_strtod_l+0xc4>
 80095ba:	499f      	ldr	r1, [pc, #636]	; (8009838 <_strtod_l+0x590>)
 80095bc:	a817      	add	r0, sp, #92	; 0x5c
 80095be:	f001 ff73 	bl	800b4a8 <__match>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f43f aed2 	beq.w	800936c <_strtod_l+0xc4>
 80095c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b28      	cmp	r3, #40	; 0x28
 80095ce:	d12d      	bne.n	800962c <_strtod_l+0x384>
 80095d0:	499a      	ldr	r1, [pc, #616]	; (800983c <_strtod_l+0x594>)
 80095d2:	aa1a      	add	r2, sp, #104	; 0x68
 80095d4:	a817      	add	r0, sp, #92	; 0x5c
 80095d6:	f001 ff7b 	bl	800b4d0 <__hexnan>
 80095da:	2805      	cmp	r0, #5
 80095dc:	d126      	bne.n	800962c <_strtod_l+0x384>
 80095de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095ec:	e6a0      	b.n	8009330 <_strtod_l+0x88>
 80095ee:	210a      	movs	r1, #10
 80095f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095f8:	e7b9      	b.n	800956e <_strtod_l+0x2c6>
 80095fa:	2a6e      	cmp	r2, #110	; 0x6e
 80095fc:	e7db      	b.n	80095b6 <_strtod_l+0x30e>
 80095fe:	4990      	ldr	r1, [pc, #576]	; (8009840 <_strtod_l+0x598>)
 8009600:	a817      	add	r0, sp, #92	; 0x5c
 8009602:	f001 ff51 	bl	800b4a8 <__match>
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f aeb0 	beq.w	800936c <_strtod_l+0xc4>
 800960c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800960e:	498d      	ldr	r1, [pc, #564]	; (8009844 <_strtod_l+0x59c>)
 8009610:	3b01      	subs	r3, #1
 8009612:	a817      	add	r0, sp, #92	; 0x5c
 8009614:	9317      	str	r3, [sp, #92]	; 0x5c
 8009616:	f001 ff47 	bl	800b4a8 <__match>
 800961a:	b910      	cbnz	r0, 8009622 <_strtod_l+0x37a>
 800961c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800961e:	3301      	adds	r3, #1
 8009620:	9317      	str	r3, [sp, #92]	; 0x5c
 8009622:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009854 <_strtod_l+0x5ac>
 8009626:	f04f 0a00 	mov.w	sl, #0
 800962a:	e681      	b.n	8009330 <_strtod_l+0x88>
 800962c:	4886      	ldr	r0, [pc, #536]	; (8009848 <_strtod_l+0x5a0>)
 800962e:	f003 f877 	bl	800c720 <nan>
 8009632:	ec5b ab10 	vmov	sl, fp, d0
 8009636:	e67b      	b.n	8009330 <_strtod_l+0x88>
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	9807      	ldr	r0, [sp, #28]
 800963c:	1af3      	subs	r3, r6, r3
 800963e:	2f00      	cmp	r7, #0
 8009640:	bf08      	it	eq
 8009642:	462f      	moveq	r7, r5
 8009644:	2d10      	cmp	r5, #16
 8009646:	9306      	str	r3, [sp, #24]
 8009648:	46a8      	mov	r8, r5
 800964a:	bfa8      	it	ge
 800964c:	f04f 0810 	movge.w	r8, #16
 8009650:	f7f6 ff68 	bl	8000524 <__aeabi_ui2d>
 8009654:	2d09      	cmp	r5, #9
 8009656:	4682      	mov	sl, r0
 8009658:	468b      	mov	fp, r1
 800965a:	dd13      	ble.n	8009684 <_strtod_l+0x3dc>
 800965c:	4b7b      	ldr	r3, [pc, #492]	; (800984c <_strtod_l+0x5a4>)
 800965e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009666:	f7f6 ffd7 	bl	8000618 <__aeabi_dmul>
 800966a:	4682      	mov	sl, r0
 800966c:	4648      	mov	r0, r9
 800966e:	468b      	mov	fp, r1
 8009670:	f7f6 ff58 	bl	8000524 <__aeabi_ui2d>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7f6 fe16 	bl	80002ac <__adddf3>
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	2d0f      	cmp	r5, #15
 8009686:	dc38      	bgt.n	80096fa <_strtod_l+0x452>
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f ae50 	beq.w	8009330 <_strtod_l+0x88>
 8009690:	dd24      	ble.n	80096dc <_strtod_l+0x434>
 8009692:	2b16      	cmp	r3, #22
 8009694:	dc0b      	bgt.n	80096ae <_strtod_l+0x406>
 8009696:	496d      	ldr	r1, [pc, #436]	; (800984c <_strtod_l+0x5a4>)
 8009698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800969c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	f7f6 ffb8 	bl	8000618 <__aeabi_dmul>
 80096a8:	4682      	mov	sl, r0
 80096aa:	468b      	mov	fp, r1
 80096ac:	e640      	b.n	8009330 <_strtod_l+0x88>
 80096ae:	9a06      	ldr	r2, [sp, #24]
 80096b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80096b4:	4293      	cmp	r3, r2
 80096b6:	db20      	blt.n	80096fa <_strtod_l+0x452>
 80096b8:	4c64      	ldr	r4, [pc, #400]	; (800984c <_strtod_l+0x5a4>)
 80096ba:	f1c5 050f 	rsb	r5, r5, #15
 80096be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ca:	f7f6 ffa5 	bl	8000618 <__aeabi_dmul>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	1b5d      	subs	r5, r3, r5
 80096d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096da:	e7e3      	b.n	80096a4 <_strtod_l+0x3fc>
 80096dc:	9b06      	ldr	r3, [sp, #24]
 80096de:	3316      	adds	r3, #22
 80096e0:	db0b      	blt.n	80096fa <_strtod_l+0x452>
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	1b9e      	subs	r6, r3, r6
 80096e6:	4b59      	ldr	r3, [pc, #356]	; (800984c <_strtod_l+0x5a4>)
 80096e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096f0:	4650      	mov	r0, sl
 80096f2:	4659      	mov	r1, fp
 80096f4:	f7f7 f8ba 	bl	800086c <__aeabi_ddiv>
 80096f8:	e7d6      	b.n	80096a8 <_strtod_l+0x400>
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	eba5 0808 	sub.w	r8, r5, r8
 8009700:	4498      	add	r8, r3
 8009702:	f1b8 0f00 	cmp.w	r8, #0
 8009706:	dd74      	ble.n	80097f2 <_strtod_l+0x54a>
 8009708:	f018 030f 	ands.w	r3, r8, #15
 800970c:	d00a      	beq.n	8009724 <_strtod_l+0x47c>
 800970e:	494f      	ldr	r1, [pc, #316]	; (800984c <_strtod_l+0x5a4>)
 8009710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009714:	4652      	mov	r2, sl
 8009716:	465b      	mov	r3, fp
 8009718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971c:	f7f6 ff7c 	bl	8000618 <__aeabi_dmul>
 8009720:	4682      	mov	sl, r0
 8009722:	468b      	mov	fp, r1
 8009724:	f038 080f 	bics.w	r8, r8, #15
 8009728:	d04f      	beq.n	80097ca <_strtod_l+0x522>
 800972a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800972e:	dd22      	ble.n	8009776 <_strtod_l+0x4ce>
 8009730:	2500      	movs	r5, #0
 8009732:	462e      	mov	r6, r5
 8009734:	9507      	str	r5, [sp, #28]
 8009736:	9505      	str	r5, [sp, #20]
 8009738:	2322      	movs	r3, #34	; 0x22
 800973a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009854 <_strtod_l+0x5ac>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	f04f 0a00 	mov.w	sl, #0
 8009744:	9b07      	ldr	r3, [sp, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f43f adf2 	beq.w	8009330 <_strtod_l+0x88>
 800974c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800974e:	4620      	mov	r0, r4
 8009750:	f001 ffb8 	bl	800b6c4 <_Bfree>
 8009754:	9905      	ldr	r1, [sp, #20]
 8009756:	4620      	mov	r0, r4
 8009758:	f001 ffb4 	bl	800b6c4 <_Bfree>
 800975c:	4631      	mov	r1, r6
 800975e:	4620      	mov	r0, r4
 8009760:	f001 ffb0 	bl	800b6c4 <_Bfree>
 8009764:	9907      	ldr	r1, [sp, #28]
 8009766:	4620      	mov	r0, r4
 8009768:	f001 ffac 	bl	800b6c4 <_Bfree>
 800976c:	4629      	mov	r1, r5
 800976e:	4620      	mov	r0, r4
 8009770:	f001 ffa8 	bl	800b6c4 <_Bfree>
 8009774:	e5dc      	b.n	8009330 <_strtod_l+0x88>
 8009776:	4b36      	ldr	r3, [pc, #216]	; (8009850 <_strtod_l+0x5a8>)
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	2300      	movs	r3, #0
 800977c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009780:	4650      	mov	r0, sl
 8009782:	4659      	mov	r1, fp
 8009784:	4699      	mov	r9, r3
 8009786:	f1b8 0f01 	cmp.w	r8, #1
 800978a:	dc21      	bgt.n	80097d0 <_strtod_l+0x528>
 800978c:	b10b      	cbz	r3, 8009792 <_strtod_l+0x4ea>
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	4b2f      	ldr	r3, [pc, #188]	; (8009850 <_strtod_l+0x5a8>)
 8009794:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009798:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800979c:	4652      	mov	r2, sl
 800979e:	465b      	mov	r3, fp
 80097a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80097a4:	f7f6 ff38 	bl	8000618 <__aeabi_dmul>
 80097a8:	4b2a      	ldr	r3, [pc, #168]	; (8009854 <_strtod_l+0x5ac>)
 80097aa:	460a      	mov	r2, r1
 80097ac:	400b      	ands	r3, r1
 80097ae:	492a      	ldr	r1, [pc, #168]	; (8009858 <_strtod_l+0x5b0>)
 80097b0:	428b      	cmp	r3, r1
 80097b2:	4682      	mov	sl, r0
 80097b4:	d8bc      	bhi.n	8009730 <_strtod_l+0x488>
 80097b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097ba:	428b      	cmp	r3, r1
 80097bc:	bf86      	itte	hi
 80097be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800985c <_strtod_l+0x5b4>
 80097c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80097c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097ca:	2300      	movs	r3, #0
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	e084      	b.n	80098da <_strtod_l+0x632>
 80097d0:	f018 0f01 	tst.w	r8, #1
 80097d4:	d005      	beq.n	80097e2 <_strtod_l+0x53a>
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f6 ff1c 	bl	8000618 <__aeabi_dmul>
 80097e0:	2301      	movs	r3, #1
 80097e2:	9a04      	ldr	r2, [sp, #16]
 80097e4:	3208      	adds	r2, #8
 80097e6:	f109 0901 	add.w	r9, r9, #1
 80097ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097ee:	9204      	str	r2, [sp, #16]
 80097f0:	e7c9      	b.n	8009786 <_strtod_l+0x4de>
 80097f2:	d0ea      	beq.n	80097ca <_strtod_l+0x522>
 80097f4:	f1c8 0800 	rsb	r8, r8, #0
 80097f8:	f018 020f 	ands.w	r2, r8, #15
 80097fc:	d00a      	beq.n	8009814 <_strtod_l+0x56c>
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <_strtod_l+0x5a4>)
 8009800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f7 f82e 	bl	800086c <__aeabi_ddiv>
 8009810:	4682      	mov	sl, r0
 8009812:	468b      	mov	fp, r1
 8009814:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009818:	d0d7      	beq.n	80097ca <_strtod_l+0x522>
 800981a:	f1b8 0f1f 	cmp.w	r8, #31
 800981e:	dd1f      	ble.n	8009860 <_strtod_l+0x5b8>
 8009820:	2500      	movs	r5, #0
 8009822:	462e      	mov	r6, r5
 8009824:	9507      	str	r5, [sp, #28]
 8009826:	9505      	str	r5, [sp, #20]
 8009828:	2322      	movs	r3, #34	; 0x22
 800982a:	f04f 0a00 	mov.w	sl, #0
 800982e:	f04f 0b00 	mov.w	fp, #0
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	e786      	b.n	8009744 <_strtod_l+0x49c>
 8009836:	bf00      	nop
 8009838:	0800ef3d 	.word	0x0800ef3d
 800983c:	0800ef80 	.word	0x0800ef80
 8009840:	0800ef35 	.word	0x0800ef35
 8009844:	0800f174 	.word	0x0800f174
 8009848:	0800f06f 	.word	0x0800f06f
 800984c:	0800f2e8 	.word	0x0800f2e8
 8009850:	0800f2c0 	.word	0x0800f2c0
 8009854:	7ff00000 	.word	0x7ff00000
 8009858:	7ca00000 	.word	0x7ca00000
 800985c:	7fefffff 	.word	0x7fefffff
 8009860:	f018 0310 	ands.w	r3, r8, #16
 8009864:	bf18      	it	ne
 8009866:	236a      	movne	r3, #106	; 0x6a
 8009868:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009c18 <_strtod_l+0x970>
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	4650      	mov	r0, sl
 8009870:	4659      	mov	r1, fp
 8009872:	2300      	movs	r3, #0
 8009874:	f018 0f01 	tst.w	r8, #1
 8009878:	d004      	beq.n	8009884 <_strtod_l+0x5dc>
 800987a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800987e:	f7f6 fecb 	bl	8000618 <__aeabi_dmul>
 8009882:	2301      	movs	r3, #1
 8009884:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009888:	f109 0908 	add.w	r9, r9, #8
 800988c:	d1f2      	bne.n	8009874 <_strtod_l+0x5cc>
 800988e:	b10b      	cbz	r3, 8009894 <_strtod_l+0x5ec>
 8009890:	4682      	mov	sl, r0
 8009892:	468b      	mov	fp, r1
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	b1c3      	cbz	r3, 80098ca <_strtod_l+0x622>
 8009898:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800989c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	4659      	mov	r1, fp
 80098a4:	dd11      	ble.n	80098ca <_strtod_l+0x622>
 80098a6:	2b1f      	cmp	r3, #31
 80098a8:	f340 8124 	ble.w	8009af4 <_strtod_l+0x84c>
 80098ac:	2b34      	cmp	r3, #52	; 0x34
 80098ae:	bfde      	ittt	le
 80098b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80098b4:	f04f 33ff 	movle.w	r3, #4294967295
 80098b8:	fa03 f202 	lslle.w	r2, r3, r2
 80098bc:	f04f 0a00 	mov.w	sl, #0
 80098c0:	bfcc      	ite	gt
 80098c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098c6:	ea02 0b01 	andle.w	fp, r2, r1
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	4650      	mov	r0, sl
 80098d0:	4659      	mov	r1, fp
 80098d2:	f7f7 f909 	bl	8000ae8 <__aeabi_dcmpeq>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d1a2      	bne.n	8009820 <_strtod_l+0x578>
 80098da:	9b07      	ldr	r3, [sp, #28]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	9908      	ldr	r1, [sp, #32]
 80098e0:	462b      	mov	r3, r5
 80098e2:	463a      	mov	r2, r7
 80098e4:	4620      	mov	r0, r4
 80098e6:	f001 ff55 	bl	800b794 <__s2b>
 80098ea:	9007      	str	r0, [sp, #28]
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f43f af1f 	beq.w	8009730 <_strtod_l+0x488>
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	1b9e      	subs	r6, r3, r6
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bfb4      	ite	lt
 80098fc:	4633      	movlt	r3, r6
 80098fe:	2300      	movge	r3, #0
 8009900:	930c      	str	r3, [sp, #48]	; 0x30
 8009902:	9b06      	ldr	r3, [sp, #24]
 8009904:	2500      	movs	r5, #0
 8009906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800990a:	9312      	str	r3, [sp, #72]	; 0x48
 800990c:	462e      	mov	r6, r5
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	4620      	mov	r0, r4
 8009912:	6859      	ldr	r1, [r3, #4]
 8009914:	f001 fe96 	bl	800b644 <_Balloc>
 8009918:	9005      	str	r0, [sp, #20]
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f af0c 	beq.w	8009738 <_strtod_l+0x490>
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	3202      	adds	r2, #2
 8009926:	f103 010c 	add.w	r1, r3, #12
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	300c      	adds	r0, #12
 800992e:	f7fe fde7 	bl	8008500 <memcpy>
 8009932:	ec4b ab10 	vmov	d0, sl, fp
 8009936:	aa1a      	add	r2, sp, #104	; 0x68
 8009938:	a919      	add	r1, sp, #100	; 0x64
 800993a:	4620      	mov	r0, r4
 800993c:	f002 fa70 	bl	800be20 <__d2b>
 8009940:	ec4b ab18 	vmov	d8, sl, fp
 8009944:	9018      	str	r0, [sp, #96]	; 0x60
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aef6 	beq.w	8009738 <_strtod_l+0x490>
 800994c:	2101      	movs	r1, #1
 800994e:	4620      	mov	r0, r4
 8009950:	f001 ffba 	bl	800b8c8 <__i2b>
 8009954:	4606      	mov	r6, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f aeee 	beq.w	8009738 <_strtod_l+0x490>
 800995c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800995e:	9904      	ldr	r1, [sp, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfab      	itete	ge
 8009964:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009966:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800996a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800996e:	bfac      	ite	ge
 8009970:	eb03 0902 	addge.w	r9, r3, r2
 8009974:	1ad7      	sublt	r7, r2, r3
 8009976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009978:	eba3 0801 	sub.w	r8, r3, r1
 800997c:	4490      	add	r8, r2
 800997e:	4ba1      	ldr	r3, [pc, #644]	; (8009c04 <_strtod_l+0x95c>)
 8009980:	f108 38ff 	add.w	r8, r8, #4294967295
 8009984:	4598      	cmp	r8, r3
 8009986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800998a:	f280 80c7 	bge.w	8009b1c <_strtod_l+0x874>
 800998e:	eba3 0308 	sub.w	r3, r3, r8
 8009992:	2b1f      	cmp	r3, #31
 8009994:	eba2 0203 	sub.w	r2, r2, r3
 8009998:	f04f 0101 	mov.w	r1, #1
 800999c:	f300 80b1 	bgt.w	8009b02 <_strtod_l+0x85a>
 80099a0:	fa01 f303 	lsl.w	r3, r1, r3
 80099a4:	930d      	str	r3, [sp, #52]	; 0x34
 80099a6:	2300      	movs	r3, #0
 80099a8:	9308      	str	r3, [sp, #32]
 80099aa:	eb09 0802 	add.w	r8, r9, r2
 80099ae:	9b04      	ldr	r3, [sp, #16]
 80099b0:	45c1      	cmp	r9, r8
 80099b2:	4417      	add	r7, r2
 80099b4:	441f      	add	r7, r3
 80099b6:	464b      	mov	r3, r9
 80099b8:	bfa8      	it	ge
 80099ba:	4643      	movge	r3, r8
 80099bc:	42bb      	cmp	r3, r7
 80099be:	bfa8      	it	ge
 80099c0:	463b      	movge	r3, r7
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfc2      	ittt	gt
 80099c6:	eba8 0803 	subgt.w	r8, r8, r3
 80099ca:	1aff      	subgt	r7, r7, r3
 80099cc:	eba9 0903 	subgt.w	r9, r9, r3
 80099d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd17      	ble.n	8009a06 <_strtod_l+0x75e>
 80099d6:	4631      	mov	r1, r6
 80099d8:	461a      	mov	r2, r3
 80099da:	4620      	mov	r0, r4
 80099dc:	f002 f834 	bl	800ba48 <__pow5mult>
 80099e0:	4606      	mov	r6, r0
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f aea8 	beq.w	8009738 <_strtod_l+0x490>
 80099e8:	4601      	mov	r1, r0
 80099ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099ec:	4620      	mov	r0, r4
 80099ee:	f001 ff81 	bl	800b8f4 <__multiply>
 80099f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f43f ae9f 	beq.w	8009738 <_strtod_l+0x490>
 80099fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099fc:	4620      	mov	r0, r4
 80099fe:	f001 fe61 	bl	800b6c4 <_Bfree>
 8009a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a04:	9318      	str	r3, [sp, #96]	; 0x60
 8009a06:	f1b8 0f00 	cmp.w	r8, #0
 8009a0a:	f300 808c 	bgt.w	8009b26 <_strtod_l+0x87e>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd08      	ble.n	8009a26 <_strtod_l+0x77e>
 8009a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a16:	9905      	ldr	r1, [sp, #20]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f002 f815 	bl	800ba48 <__pow5mult>
 8009a1e:	9005      	str	r0, [sp, #20]
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f ae89 	beq.w	8009738 <_strtod_l+0x490>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	dd08      	ble.n	8009a3c <_strtod_l+0x794>
 8009a2a:	9905      	ldr	r1, [sp, #20]
 8009a2c:	463a      	mov	r2, r7
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f002 f864 	bl	800bafc <__lshift>
 8009a34:	9005      	str	r0, [sp, #20]
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f ae7e 	beq.w	8009738 <_strtod_l+0x490>
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	dd08      	ble.n	8009a54 <_strtod_l+0x7ac>
 8009a42:	4631      	mov	r1, r6
 8009a44:	464a      	mov	r2, r9
 8009a46:	4620      	mov	r0, r4
 8009a48:	f002 f858 	bl	800bafc <__lshift>
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f ae72 	beq.w	8009738 <_strtod_l+0x490>
 8009a54:	9a05      	ldr	r2, [sp, #20]
 8009a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f002 f8db 	bl	800bc14 <__mdiff>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f ae69 	beq.w	8009738 <_strtod_l+0x490>
 8009a66:	68c3      	ldr	r3, [r0, #12]
 8009a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60c3      	str	r3, [r0, #12]
 8009a6e:	4631      	mov	r1, r6
 8009a70:	f002 f8b4 	bl	800bbdc <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	da60      	bge.n	8009b3a <_strtod_l+0x892>
 8009a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a7e:	f040 8082 	bne.w	8009b86 <_strtod_l+0x8de>
 8009a82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d17d      	bne.n	8009b86 <_strtod_l+0x8de>
 8009a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a8e:	0d1b      	lsrs	r3, r3, #20
 8009a90:	051b      	lsls	r3, r3, #20
 8009a92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a96:	d976      	bls.n	8009b86 <_strtod_l+0x8de>
 8009a98:	696b      	ldr	r3, [r5, #20]
 8009a9a:	b913      	cbnz	r3, 8009aa2 <_strtod_l+0x7fa>
 8009a9c:	692b      	ldr	r3, [r5, #16]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	dd71      	ble.n	8009b86 <_strtod_l+0x8de>
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f002 f828 	bl	800bafc <__lshift>
 8009aac:	4631      	mov	r1, r6
 8009aae:	4605      	mov	r5, r0
 8009ab0:	f002 f894 	bl	800bbdc <__mcmp>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	dd66      	ble.n	8009b86 <_strtod_l+0x8de>
 8009ab8:	9904      	ldr	r1, [sp, #16]
 8009aba:	4a53      	ldr	r2, [pc, #332]	; (8009c08 <_strtod_l+0x960>)
 8009abc:	465b      	mov	r3, fp
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	f000 8081 	beq.w	8009bc6 <_strtod_l+0x91e>
 8009ac4:	ea02 010b 	and.w	r1, r2, fp
 8009ac8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009acc:	dc7b      	bgt.n	8009bc6 <_strtod_l+0x91e>
 8009ace:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ad2:	f77f aea9 	ble.w	8009828 <_strtod_l+0x580>
 8009ad6:	4b4d      	ldr	r3, [pc, #308]	; (8009c0c <_strtod_l+0x964>)
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4659      	mov	r1, fp
 8009adc:	2200      	movs	r2, #0
 8009ade:	f7f6 fd9b 	bl	8000618 <__aeabi_dmul>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4303      	orrs	r3, r0
 8009ae6:	bf08      	it	eq
 8009ae8:	2322      	moveq	r3, #34	; 0x22
 8009aea:	4682      	mov	sl, r0
 8009aec:	468b      	mov	fp, r1
 8009aee:	bf08      	it	eq
 8009af0:	6023      	streq	r3, [r4, #0]
 8009af2:	e62b      	b.n	800974c <_strtod_l+0x4a4>
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	ea03 0a0a 	and.w	sl, r3, sl
 8009b00:	e6e3      	b.n	80098ca <_strtod_l+0x622>
 8009b02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b12:	fa01 f308 	lsl.w	r3, r1, r8
 8009b16:	9308      	str	r3, [sp, #32]
 8009b18:	910d      	str	r1, [sp, #52]	; 0x34
 8009b1a:	e746      	b.n	80099aa <_strtod_l+0x702>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	2301      	movs	r3, #1
 8009b22:	930d      	str	r3, [sp, #52]	; 0x34
 8009b24:	e741      	b.n	80099aa <_strtod_l+0x702>
 8009b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b28:	4642      	mov	r2, r8
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f001 ffe6 	bl	800bafc <__lshift>
 8009b30:	9018      	str	r0, [sp, #96]	; 0x60
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f47f af6b 	bne.w	8009a0e <_strtod_l+0x766>
 8009b38:	e5fe      	b.n	8009738 <_strtod_l+0x490>
 8009b3a:	465f      	mov	r7, fp
 8009b3c:	d16e      	bne.n	8009c1c <_strtod_l+0x974>
 8009b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b44:	b342      	cbz	r2, 8009b98 <_strtod_l+0x8f0>
 8009b46:	4a32      	ldr	r2, [pc, #200]	; (8009c10 <_strtod_l+0x968>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d128      	bne.n	8009b9e <_strtod_l+0x8f6>
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	4651      	mov	r1, sl
 8009b50:	b1eb      	cbz	r3, 8009b8e <_strtod_l+0x8e6>
 8009b52:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <_strtod_l+0x960>)
 8009b54:	403b      	ands	r3, r7
 8009b56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	d819      	bhi.n	8009b94 <_strtod_l+0x8ec>
 8009b60:	0d1b      	lsrs	r3, r3, #20
 8009b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	4299      	cmp	r1, r3
 8009b6c:	d117      	bne.n	8009b9e <_strtod_l+0x8f6>
 8009b6e:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <_strtod_l+0x96c>)
 8009b70:	429f      	cmp	r7, r3
 8009b72:	d102      	bne.n	8009b7a <_strtod_l+0x8d2>
 8009b74:	3101      	adds	r1, #1
 8009b76:	f43f addf 	beq.w	8009738 <_strtod_l+0x490>
 8009b7a:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <_strtod_l+0x960>)
 8009b7c:	403b      	ands	r3, r7
 8009b7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b82:	f04f 0a00 	mov.w	sl, #0
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1a4      	bne.n	8009ad6 <_strtod_l+0x82e>
 8009b8c:	e5de      	b.n	800974c <_strtod_l+0x4a4>
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b92:	e7ea      	b.n	8009b6a <_strtod_l+0x8c2>
 8009b94:	4613      	mov	r3, r2
 8009b96:	e7e8      	b.n	8009b6a <_strtod_l+0x8c2>
 8009b98:	ea53 030a 	orrs.w	r3, r3, sl
 8009b9c:	d08c      	beq.n	8009ab8 <_strtod_l+0x810>
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	b1db      	cbz	r3, 8009bda <_strtod_l+0x932>
 8009ba2:	423b      	tst	r3, r7
 8009ba4:	d0ef      	beq.n	8009b86 <_strtod_l+0x8de>
 8009ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba8:	9a04      	ldr	r2, [sp, #16]
 8009baa:	4650      	mov	r0, sl
 8009bac:	4659      	mov	r1, fp
 8009bae:	b1c3      	cbz	r3, 8009be2 <_strtod_l+0x93a>
 8009bb0:	f7ff fb5c 	bl	800926c <sulp>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	ec51 0b18 	vmov	r0, r1, d8
 8009bbc:	f7f6 fb76 	bl	80002ac <__adddf3>
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	468b      	mov	fp, r1
 8009bc4:	e7df      	b.n	8009b86 <_strtod_l+0x8de>
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bd4:	f04f 3aff 	mov.w	sl, #4294967295
 8009bd8:	e7d5      	b.n	8009b86 <_strtod_l+0x8de>
 8009bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bdc:	ea13 0f0a 	tst.w	r3, sl
 8009be0:	e7e0      	b.n	8009ba4 <_strtod_l+0x8fc>
 8009be2:	f7ff fb43 	bl	800926c <sulp>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	ec51 0b18 	vmov	r0, r1, d8
 8009bee:	f7f6 fb5b 	bl	80002a8 <__aeabi_dsub>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	f7f6 ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0c1      	beq.n	8009b86 <_strtod_l+0x8de>
 8009c02:	e611      	b.n	8009828 <_strtod_l+0x580>
 8009c04:	fffffc02 	.word	0xfffffc02
 8009c08:	7ff00000 	.word	0x7ff00000
 8009c0c:	39500000 	.word	0x39500000
 8009c10:	000fffff 	.word	0x000fffff
 8009c14:	7fefffff 	.word	0x7fefffff
 8009c18:	0800ef98 	.word	0x0800ef98
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f002 f95a 	bl	800bed8 <__ratio>
 8009c24:	ec59 8b10 	vmov	r8, r9, d0
 8009c28:	ee10 0a10 	vmov	r0, s0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff6c 	bl	8000b10 <__aeabi_dcmple>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d07a      	beq.n	8009d32 <_strtod_l+0xa8a>
 8009c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04a      	beq.n	8009cd8 <_strtod_l+0xa30>
 8009c42:	4b95      	ldr	r3, [pc, #596]	; (8009e98 <_strtod_l+0xbf0>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e98 <_strtod_l+0xbf0>
 8009c4e:	f04f 0800 	mov.w	r8, #0
 8009c52:	4b92      	ldr	r3, [pc, #584]	; (8009e9c <_strtod_l+0xbf4>)
 8009c54:	403b      	ands	r3, r7
 8009c56:	930d      	str	r3, [sp, #52]	; 0x34
 8009c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c5a:	4b91      	ldr	r3, [pc, #580]	; (8009ea0 <_strtod_l+0xbf8>)
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	f040 80b0 	bne.w	8009dc2 <_strtod_l+0xb1a>
 8009c62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c6a:	ec4b ab10 	vmov	d0, sl, fp
 8009c6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c72:	f002 f859 	bl	800bd28 <__ulp>
 8009c76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c7a:	ec53 2b10 	vmov	r2, r3, d0
 8009c7e:	f7f6 fccb 	bl	8000618 <__aeabi_dmul>
 8009c82:	4652      	mov	r2, sl
 8009c84:	465b      	mov	r3, fp
 8009c86:	f7f6 fb11 	bl	80002ac <__adddf3>
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4983      	ldr	r1, [pc, #524]	; (8009e9c <_strtod_l+0xbf4>)
 8009c8e:	4a85      	ldr	r2, [pc, #532]	; (8009ea4 <_strtod_l+0xbfc>)
 8009c90:	4019      	ands	r1, r3
 8009c92:	4291      	cmp	r1, r2
 8009c94:	4682      	mov	sl, r0
 8009c96:	d960      	bls.n	8009d5a <_strtod_l+0xab2>
 8009c98:	ee18 3a90 	vmov	r3, s17
 8009c9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d104      	bne.n	8009cae <_strtod_l+0xa06>
 8009ca4:	ee18 3a10 	vmov	r3, s16
 8009ca8:	3301      	adds	r3, #1
 8009caa:	f43f ad45 	beq.w	8009738 <_strtod_l+0x490>
 8009cae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009eb0 <_strtod_l+0xc08>
 8009cb2:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f001 fd03 	bl	800b6c4 <_Bfree>
 8009cbe:	9905      	ldr	r1, [sp, #20]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 fcff 	bl	800b6c4 <_Bfree>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f001 fcfb 	bl	800b6c4 <_Bfree>
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f001 fcf7 	bl	800b6c4 <_Bfree>
 8009cd6:	e61a      	b.n	800990e <_strtod_l+0x666>
 8009cd8:	f1ba 0f00 	cmp.w	sl, #0
 8009cdc:	d11b      	bne.n	8009d16 <_strtod_l+0xa6e>
 8009cde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce2:	b9f3      	cbnz	r3, 8009d22 <_strtod_l+0xa7a>
 8009ce4:	4b6c      	ldr	r3, [pc, #432]	; (8009e98 <_strtod_l+0xbf0>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4649      	mov	r1, r9
 8009cec:	f7f6 ff06 	bl	8000afc <__aeabi_dcmplt>
 8009cf0:	b9d0      	cbnz	r0, 8009d28 <_strtod_l+0xa80>
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4b6c      	ldr	r3, [pc, #432]	; (8009ea8 <_strtod_l+0xc00>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f7f6 fc8d 	bl	8000618 <__aeabi_dmul>
 8009cfe:	4680      	mov	r8, r0
 8009d00:	4689      	mov	r9, r1
 8009d02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009d0a:	9315      	str	r3, [sp, #84]	; 0x54
 8009d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d14:	e79d      	b.n	8009c52 <_strtod_l+0x9aa>
 8009d16:	f1ba 0f01 	cmp.w	sl, #1
 8009d1a:	d102      	bne.n	8009d22 <_strtod_l+0xa7a>
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	f43f ad83 	beq.w	8009828 <_strtod_l+0x580>
 8009d22:	4b62      	ldr	r3, [pc, #392]	; (8009eac <_strtod_l+0xc04>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	e78e      	b.n	8009c46 <_strtod_l+0x99e>
 8009d28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009ea8 <_strtod_l+0xc00>
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	e7e7      	b.n	8009d02 <_strtod_l+0xa5a>
 8009d32:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <_strtod_l+0xc00>)
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f7f6 fc6d 	bl	8000618 <__aeabi_dmul>
 8009d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d40:	4680      	mov	r8, r0
 8009d42:	4689      	mov	r9, r1
 8009d44:	b933      	cbnz	r3, 8009d54 <_strtod_l+0xaac>
 8009d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d52:	e7dd      	b.n	8009d10 <_strtod_l+0xa68>
 8009d54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d58:	e7f9      	b.n	8009d4e <_strtod_l+0xaa6>
 8009d5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1a8      	bne.n	8009cb6 <_strtod_l+0xa0e>
 8009d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d6a:	0d1b      	lsrs	r3, r3, #20
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d1a1      	bne.n	8009cb6 <_strtod_l+0xa0e>
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	f7f6 ffaf 	bl	8000cd8 <__aeabi_d2lz>
 8009d7a:	f7f6 fc1f 	bl	80005bc <__aeabi_l2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fa8f 	bl	80002a8 <__aeabi_dsub>
 8009d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d90:	ea43 030a 	orr.w	r3, r3, sl
 8009d94:	4313      	orrs	r3, r2
 8009d96:	4680      	mov	r8, r0
 8009d98:	4689      	mov	r9, r1
 8009d9a:	d055      	beq.n	8009e48 <_strtod_l+0xba0>
 8009d9c:	a336      	add	r3, pc, #216	; (adr r3, 8009e78 <_strtod_l+0xbd0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 feab 	bl	8000afc <__aeabi_dcmplt>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f47f acd0 	bne.w	800974c <_strtod_l+0x4a4>
 8009dac:	a334      	add	r3, pc, #208	; (adr r3, 8009e80 <_strtod_l+0xbd8>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	f7f6 febf 	bl	8000b38 <__aeabi_dcmpgt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f43f af7b 	beq.w	8009cb6 <_strtod_l+0xa0e>
 8009dc0:	e4c4      	b.n	800974c <_strtod_l+0x4a4>
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	b333      	cbz	r3, 8009e14 <_strtod_l+0xb6c>
 8009dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dcc:	d822      	bhi.n	8009e14 <_strtod_l+0xb6c>
 8009dce:	a32e      	add	r3, pc, #184	; (adr r3, 8009e88 <_strtod_l+0xbe0>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fe9a 	bl	8000b10 <__aeabi_dcmple>
 8009ddc:	b1a0      	cbz	r0, 8009e08 <_strtod_l+0xb60>
 8009dde:	4649      	mov	r1, r9
 8009de0:	4640      	mov	r0, r8
 8009de2:	f7f6 fef1 	bl	8000bc8 <__aeabi_d2uiz>
 8009de6:	2801      	cmp	r0, #1
 8009de8:	bf38      	it	cc
 8009dea:	2001      	movcc	r0, #1
 8009dec:	f7f6 fb9a 	bl	8000524 <__aeabi_ui2d>
 8009df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	bb23      	cbnz	r3, 8009e42 <_strtod_l+0xb9a>
 8009df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dfc:	9010      	str	r0, [sp, #64]	; 0x40
 8009dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8009e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e10:	1a9b      	subs	r3, r3, r2
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e18:	eeb0 0a48 	vmov.f32	s0, s16
 8009e1c:	eef0 0a68 	vmov.f32	s1, s17
 8009e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e24:	f001 ff80 	bl	800bd28 <__ulp>
 8009e28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e2c:	ec53 2b10 	vmov	r2, r3, d0
 8009e30:	f7f6 fbf2 	bl	8000618 <__aeabi_dmul>
 8009e34:	ec53 2b18 	vmov	r2, r3, d8
 8009e38:	f7f6 fa38 	bl	80002ac <__adddf3>
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	468b      	mov	fp, r1
 8009e40:	e78d      	b.n	8009d5e <_strtod_l+0xab6>
 8009e42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e46:	e7db      	b.n	8009e00 <_strtod_l+0xb58>
 8009e48:	a311      	add	r3, pc, #68	; (adr r3, 8009e90 <_strtod_l+0xbe8>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fe55 	bl	8000afc <__aeabi_dcmplt>
 8009e52:	e7b2      	b.n	8009dba <_strtod_l+0xb12>
 8009e54:	2300      	movs	r3, #0
 8009e56:	930a      	str	r3, [sp, #40]	; 0x28
 8009e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	f7ff ba6b 	b.w	8009338 <_strtod_l+0x90>
 8009e62:	2a65      	cmp	r2, #101	; 0x65
 8009e64:	f43f ab5f 	beq.w	8009526 <_strtod_l+0x27e>
 8009e68:	2a45      	cmp	r2, #69	; 0x45
 8009e6a:	f43f ab5c 	beq.w	8009526 <_strtod_l+0x27e>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f7ff bb94 	b.w	800959c <_strtod_l+0x2f4>
 8009e74:	f3af 8000 	nop.w
 8009e78:	94a03595 	.word	0x94a03595
 8009e7c:	3fdfffff 	.word	0x3fdfffff
 8009e80:	35afe535 	.word	0x35afe535
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	ffc00000 	.word	0xffc00000
 8009e8c:	41dfffff 	.word	0x41dfffff
 8009e90:	94a03595 	.word	0x94a03595
 8009e94:	3fcfffff 	.word	0x3fcfffff
 8009e98:	3ff00000 	.word	0x3ff00000
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	7fe00000 	.word	0x7fe00000
 8009ea4:	7c9fffff 	.word	0x7c9fffff
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	7fefffff 	.word	0x7fefffff

08009eb4 <_strtod_r>:
 8009eb4:	4b01      	ldr	r3, [pc, #4]	; (8009ebc <_strtod_r+0x8>)
 8009eb6:	f7ff b9f7 	b.w	80092a8 <_strtod_l>
 8009eba:	bf00      	nop
 8009ebc:	200000e4 	.word	0x200000e4

08009ec0 <strtod>:
 8009ec0:	460a      	mov	r2, r1
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4802      	ldr	r0, [pc, #8]	; (8009ed0 <strtod+0x10>)
 8009ec6:	4b03      	ldr	r3, [pc, #12]	; (8009ed4 <strtod+0x14>)
 8009ec8:	6800      	ldr	r0, [r0, #0]
 8009eca:	f7ff b9ed 	b.w	80092a8 <_strtod_l>
 8009ece:	bf00      	nop
 8009ed0:	2000007c 	.word	0x2000007c
 8009ed4:	200000e4 	.word	0x200000e4

08009ed8 <strtok>:
 8009ed8:	4b16      	ldr	r3, [pc, #88]	; (8009f34 <strtok+0x5c>)
 8009eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009edc:	681e      	ldr	r6, [r3, #0]
 8009ede:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	b9fc      	cbnz	r4, 8009f24 <strtok+0x4c>
 8009ee4:	2050      	movs	r0, #80	; 0x50
 8009ee6:	9101      	str	r1, [sp, #4]
 8009ee8:	f001 fb92 	bl	800b610 <malloc>
 8009eec:	9901      	ldr	r1, [sp, #4]
 8009eee:	65b0      	str	r0, [r6, #88]	; 0x58
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	b920      	cbnz	r0, 8009efe <strtok+0x26>
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <strtok+0x60>)
 8009ef6:	4811      	ldr	r0, [pc, #68]	; (8009f3c <strtok+0x64>)
 8009ef8:	2157      	movs	r1, #87	; 0x57
 8009efa:	f000 f969 	bl	800a1d0 <__assert_func>
 8009efe:	e9c0 4400 	strd	r4, r4, [r0]
 8009f02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009f06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009f0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009f0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009f12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009f16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009f1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009f1e:	6184      	str	r4, [r0, #24]
 8009f20:	7704      	strb	r4, [r0, #28]
 8009f22:	6244      	str	r4, [r0, #36]	; 0x24
 8009f24:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009f26:	2301      	movs	r3, #1
 8009f28:	4628      	mov	r0, r5
 8009f2a:	b002      	add	sp, #8
 8009f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f30:	f000 b806 	b.w	8009f40 <__strtok_r>
 8009f34:	2000007c 	.word	0x2000007c
 8009f38:	0800efc0 	.word	0x0800efc0
 8009f3c:	0800efd7 	.word	0x0800efd7

08009f40 <__strtok_r>:
 8009f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f42:	b908      	cbnz	r0, 8009f48 <__strtok_r+0x8>
 8009f44:	6810      	ldr	r0, [r2, #0]
 8009f46:	b188      	cbz	r0, 8009f6c <__strtok_r+0x2c>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f50:	460f      	mov	r7, r1
 8009f52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f56:	b91e      	cbnz	r6, 8009f60 <__strtok_r+0x20>
 8009f58:	b965      	cbnz	r5, 8009f74 <__strtok_r+0x34>
 8009f5a:	6015      	str	r5, [r2, #0]
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	e005      	b.n	8009f6c <__strtok_r+0x2c>
 8009f60:	42b5      	cmp	r5, r6
 8009f62:	d1f6      	bne.n	8009f52 <__strtok_r+0x12>
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1f0      	bne.n	8009f4a <__strtok_r+0xa>
 8009f68:	6014      	str	r4, [r2, #0]
 8009f6a:	7003      	strb	r3, [r0, #0]
 8009f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6e:	461c      	mov	r4, r3
 8009f70:	e00c      	b.n	8009f8c <__strtok_r+0x4c>
 8009f72:	b915      	cbnz	r5, 8009f7a <__strtok_r+0x3a>
 8009f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f78:	460e      	mov	r6, r1
 8009f7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f7e:	42ab      	cmp	r3, r5
 8009f80:	d1f7      	bne.n	8009f72 <__strtok_r+0x32>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0f3      	beq.n	8009f6e <__strtok_r+0x2e>
 8009f86:	2300      	movs	r3, #0
 8009f88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f8c:	6014      	str	r4, [r2, #0]
 8009f8e:	e7ed      	b.n	8009f6c <__strtok_r+0x2c>

08009f90 <_strtol_l.constprop.0>:
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f96:	d001      	beq.n	8009f9c <_strtol_l.constprop.0+0xc>
 8009f98:	2b24      	cmp	r3, #36	; 0x24
 8009f9a:	d906      	bls.n	8009faa <_strtol_l.constprop.0+0x1a>
 8009f9c:	f7fe fa86 	bl	80084ac <__errno>
 8009fa0:	2316      	movs	r3, #22
 8009fa2:	6003      	str	r3, [r0, #0]
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a090 <_strtol_l.constprop.0+0x100>
 8009fae:	460d      	mov	r5, r1
 8009fb0:	462e      	mov	r6, r5
 8009fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009fba:	f017 0708 	ands.w	r7, r7, #8
 8009fbe:	d1f7      	bne.n	8009fb0 <_strtol_l.constprop.0+0x20>
 8009fc0:	2c2d      	cmp	r4, #45	; 0x2d
 8009fc2:	d132      	bne.n	800a02a <_strtol_l.constprop.0+0x9a>
 8009fc4:	782c      	ldrb	r4, [r5, #0]
 8009fc6:	2701      	movs	r7, #1
 8009fc8:	1cb5      	adds	r5, r6, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d05b      	beq.n	800a086 <_strtol_l.constprop.0+0xf6>
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	d109      	bne.n	8009fe6 <_strtol_l.constprop.0+0x56>
 8009fd2:	2c30      	cmp	r4, #48	; 0x30
 8009fd4:	d107      	bne.n	8009fe6 <_strtol_l.constprop.0+0x56>
 8009fd6:	782c      	ldrb	r4, [r5, #0]
 8009fd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fdc:	2c58      	cmp	r4, #88	; 0x58
 8009fde:	d14d      	bne.n	800a07c <_strtol_l.constprop.0+0xec>
 8009fe0:	786c      	ldrb	r4, [r5, #1]
 8009fe2:	2310      	movs	r3, #16
 8009fe4:	3502      	adds	r5, #2
 8009fe6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fee:	f04f 0c00 	mov.w	ip, #0
 8009ff2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ff6:	4666      	mov	r6, ip
 8009ff8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ffc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a000:	f1be 0f09 	cmp.w	lr, #9
 800a004:	d816      	bhi.n	800a034 <_strtol_l.constprop.0+0xa4>
 800a006:	4674      	mov	r4, lr
 800a008:	42a3      	cmp	r3, r4
 800a00a:	dd24      	ble.n	800a056 <_strtol_l.constprop.0+0xc6>
 800a00c:	f1bc 0f00 	cmp.w	ip, #0
 800a010:	db1e      	blt.n	800a050 <_strtol_l.constprop.0+0xc0>
 800a012:	45b1      	cmp	r9, r6
 800a014:	d31c      	bcc.n	800a050 <_strtol_l.constprop.0+0xc0>
 800a016:	d101      	bne.n	800a01c <_strtol_l.constprop.0+0x8c>
 800a018:	45a2      	cmp	sl, r4
 800a01a:	db19      	blt.n	800a050 <_strtol_l.constprop.0+0xc0>
 800a01c:	fb06 4603 	mla	r6, r6, r3, r4
 800a020:	f04f 0c01 	mov.w	ip, #1
 800a024:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a028:	e7e8      	b.n	8009ffc <_strtol_l.constprop.0+0x6c>
 800a02a:	2c2b      	cmp	r4, #43	; 0x2b
 800a02c:	bf04      	itt	eq
 800a02e:	782c      	ldrbeq	r4, [r5, #0]
 800a030:	1cb5      	addeq	r5, r6, #2
 800a032:	e7ca      	b.n	8009fca <_strtol_l.constprop.0+0x3a>
 800a034:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a038:	f1be 0f19 	cmp.w	lr, #25
 800a03c:	d801      	bhi.n	800a042 <_strtol_l.constprop.0+0xb2>
 800a03e:	3c37      	subs	r4, #55	; 0x37
 800a040:	e7e2      	b.n	800a008 <_strtol_l.constprop.0+0x78>
 800a042:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a046:	f1be 0f19 	cmp.w	lr, #25
 800a04a:	d804      	bhi.n	800a056 <_strtol_l.constprop.0+0xc6>
 800a04c:	3c57      	subs	r4, #87	; 0x57
 800a04e:	e7db      	b.n	800a008 <_strtol_l.constprop.0+0x78>
 800a050:	f04f 3cff 	mov.w	ip, #4294967295
 800a054:	e7e6      	b.n	800a024 <_strtol_l.constprop.0+0x94>
 800a056:	f1bc 0f00 	cmp.w	ip, #0
 800a05a:	da05      	bge.n	800a068 <_strtol_l.constprop.0+0xd8>
 800a05c:	2322      	movs	r3, #34	; 0x22
 800a05e:	6003      	str	r3, [r0, #0]
 800a060:	4646      	mov	r6, r8
 800a062:	b942      	cbnz	r2, 800a076 <_strtol_l.constprop.0+0xe6>
 800a064:	4630      	mov	r0, r6
 800a066:	e79e      	b.n	8009fa6 <_strtol_l.constprop.0+0x16>
 800a068:	b107      	cbz	r7, 800a06c <_strtol_l.constprop.0+0xdc>
 800a06a:	4276      	negs	r6, r6
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	d0f9      	beq.n	800a064 <_strtol_l.constprop.0+0xd4>
 800a070:	f1bc 0f00 	cmp.w	ip, #0
 800a074:	d000      	beq.n	800a078 <_strtol_l.constprop.0+0xe8>
 800a076:	1e69      	subs	r1, r5, #1
 800a078:	6011      	str	r1, [r2, #0]
 800a07a:	e7f3      	b.n	800a064 <_strtol_l.constprop.0+0xd4>
 800a07c:	2430      	movs	r4, #48	; 0x30
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1b1      	bne.n	8009fe6 <_strtol_l.constprop.0+0x56>
 800a082:	2308      	movs	r3, #8
 800a084:	e7af      	b.n	8009fe6 <_strtol_l.constprop.0+0x56>
 800a086:	2c30      	cmp	r4, #48	; 0x30
 800a088:	d0a5      	beq.n	8009fd6 <_strtol_l.constprop.0+0x46>
 800a08a:	230a      	movs	r3, #10
 800a08c:	e7ab      	b.n	8009fe6 <_strtol_l.constprop.0+0x56>
 800a08e:	bf00      	nop
 800a090:	0800f071 	.word	0x0800f071

0800a094 <_strtol_r>:
 800a094:	f7ff bf7c 	b.w	8009f90 <_strtol_l.constprop.0>

0800a098 <_strtoul_l.constprop.0>:
 800a098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4f36      	ldr	r7, [pc, #216]	; (800a178 <_strtoul_l.constprop.0+0xe0>)
 800a09e:	4686      	mov	lr, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0a8:	5de6      	ldrb	r6, [r4, r7]
 800a0aa:	f016 0608 	ands.w	r6, r6, #8
 800a0ae:	d1f8      	bne.n	800a0a2 <_strtoul_l.constprop.0+0xa>
 800a0b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0b2:	d12f      	bne.n	800a114 <_strtoul_l.constprop.0+0x7c>
 800a0b4:	782c      	ldrb	r4, [r5, #0]
 800a0b6:	2601      	movs	r6, #1
 800a0b8:	1c85      	adds	r5, r0, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d057      	beq.n	800a16e <_strtoul_l.constprop.0+0xd6>
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	d109      	bne.n	800a0d6 <_strtoul_l.constprop.0+0x3e>
 800a0c2:	2c30      	cmp	r4, #48	; 0x30
 800a0c4:	d107      	bne.n	800a0d6 <_strtoul_l.constprop.0+0x3e>
 800a0c6:	7828      	ldrb	r0, [r5, #0]
 800a0c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0cc:	2858      	cmp	r0, #88	; 0x58
 800a0ce:	d149      	bne.n	800a164 <_strtoul_l.constprop.0+0xcc>
 800a0d0:	786c      	ldrb	r4, [r5, #1]
 800a0d2:	2310      	movs	r3, #16
 800a0d4:	3502      	adds	r5, #2
 800a0d6:	f04f 38ff 	mov.w	r8, #4294967295
 800a0da:	2700      	movs	r7, #0
 800a0dc:	fbb8 f8f3 	udiv	r8, r8, r3
 800a0e0:	fb03 f908 	mul.w	r9, r3, r8
 800a0e4:	ea6f 0909 	mvn.w	r9, r9
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a0ee:	f1bc 0f09 	cmp.w	ip, #9
 800a0f2:	d814      	bhi.n	800a11e <_strtoul_l.constprop.0+0x86>
 800a0f4:	4664      	mov	r4, ip
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	dd22      	ble.n	800a140 <_strtoul_l.constprop.0+0xa8>
 800a0fa:	2f00      	cmp	r7, #0
 800a0fc:	db1d      	blt.n	800a13a <_strtoul_l.constprop.0+0xa2>
 800a0fe:	4580      	cmp	r8, r0
 800a100:	d31b      	bcc.n	800a13a <_strtoul_l.constprop.0+0xa2>
 800a102:	d101      	bne.n	800a108 <_strtoul_l.constprop.0+0x70>
 800a104:	45a1      	cmp	r9, r4
 800a106:	db18      	blt.n	800a13a <_strtoul_l.constprop.0+0xa2>
 800a108:	fb00 4003 	mla	r0, r0, r3, r4
 800a10c:	2701      	movs	r7, #1
 800a10e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a112:	e7ea      	b.n	800a0ea <_strtoul_l.constprop.0+0x52>
 800a114:	2c2b      	cmp	r4, #43	; 0x2b
 800a116:	bf04      	itt	eq
 800a118:	782c      	ldrbeq	r4, [r5, #0]
 800a11a:	1c85      	addeq	r5, r0, #2
 800a11c:	e7cd      	b.n	800a0ba <_strtoul_l.constprop.0+0x22>
 800a11e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a122:	f1bc 0f19 	cmp.w	ip, #25
 800a126:	d801      	bhi.n	800a12c <_strtoul_l.constprop.0+0x94>
 800a128:	3c37      	subs	r4, #55	; 0x37
 800a12a:	e7e4      	b.n	800a0f6 <_strtoul_l.constprop.0+0x5e>
 800a12c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a130:	f1bc 0f19 	cmp.w	ip, #25
 800a134:	d804      	bhi.n	800a140 <_strtoul_l.constprop.0+0xa8>
 800a136:	3c57      	subs	r4, #87	; 0x57
 800a138:	e7dd      	b.n	800a0f6 <_strtoul_l.constprop.0+0x5e>
 800a13a:	f04f 37ff 	mov.w	r7, #4294967295
 800a13e:	e7e6      	b.n	800a10e <_strtoul_l.constprop.0+0x76>
 800a140:	2f00      	cmp	r7, #0
 800a142:	da07      	bge.n	800a154 <_strtoul_l.constprop.0+0xbc>
 800a144:	2322      	movs	r3, #34	; 0x22
 800a146:	f8ce 3000 	str.w	r3, [lr]
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	b932      	cbnz	r2, 800a15e <_strtoul_l.constprop.0+0xc6>
 800a150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a154:	b106      	cbz	r6, 800a158 <_strtoul_l.constprop.0+0xc0>
 800a156:	4240      	negs	r0, r0
 800a158:	2a00      	cmp	r2, #0
 800a15a:	d0f9      	beq.n	800a150 <_strtoul_l.constprop.0+0xb8>
 800a15c:	b107      	cbz	r7, 800a160 <_strtoul_l.constprop.0+0xc8>
 800a15e:	1e69      	subs	r1, r5, #1
 800a160:	6011      	str	r1, [r2, #0]
 800a162:	e7f5      	b.n	800a150 <_strtoul_l.constprop.0+0xb8>
 800a164:	2430      	movs	r4, #48	; 0x30
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1b5      	bne.n	800a0d6 <_strtoul_l.constprop.0+0x3e>
 800a16a:	2308      	movs	r3, #8
 800a16c:	e7b3      	b.n	800a0d6 <_strtoul_l.constprop.0+0x3e>
 800a16e:	2c30      	cmp	r4, #48	; 0x30
 800a170:	d0a9      	beq.n	800a0c6 <_strtoul_l.constprop.0+0x2e>
 800a172:	230a      	movs	r3, #10
 800a174:	e7af      	b.n	800a0d6 <_strtoul_l.constprop.0+0x3e>
 800a176:	bf00      	nop
 800a178:	0800f071 	.word	0x0800f071

0800a17c <strtoul>:
 800a17c:	4613      	mov	r3, r2
 800a17e:	460a      	mov	r2, r1
 800a180:	4601      	mov	r1, r0
 800a182:	4802      	ldr	r0, [pc, #8]	; (800a18c <strtoul+0x10>)
 800a184:	6800      	ldr	r0, [r0, #0]
 800a186:	f7ff bf87 	b.w	800a098 <_strtoul_l.constprop.0>
 800a18a:	bf00      	nop
 800a18c:	2000007c 	.word	0x2000007c

0800a190 <_vsiprintf_r>:
 800a190:	b500      	push	{lr}
 800a192:	b09b      	sub	sp, #108	; 0x6c
 800a194:	9100      	str	r1, [sp, #0]
 800a196:	9104      	str	r1, [sp, #16]
 800a198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a19c:	9105      	str	r1, [sp, #20]
 800a19e:	9102      	str	r1, [sp, #8]
 800a1a0:	4905      	ldr	r1, [pc, #20]	; (800a1b8 <_vsiprintf_r+0x28>)
 800a1a2:	9103      	str	r1, [sp, #12]
 800a1a4:	4669      	mov	r1, sp
 800a1a6:	f002 f861 	bl	800c26c <_svfiprintf_r>
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	b01b      	add	sp, #108	; 0x6c
 800a1b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1b6:	bf00      	nop
 800a1b8:	ffff0208 	.word	0xffff0208

0800a1bc <vsiprintf>:
 800a1bc:	4613      	mov	r3, r2
 800a1be:	460a      	mov	r2, r1
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4802      	ldr	r0, [pc, #8]	; (800a1cc <vsiprintf+0x10>)
 800a1c4:	6800      	ldr	r0, [r0, #0]
 800a1c6:	f7ff bfe3 	b.w	800a190 <_vsiprintf_r>
 800a1ca:	bf00      	nop
 800a1cc:	2000007c 	.word	0x2000007c

0800a1d0 <__assert_func>:
 800a1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <__assert_func+0x2c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4605      	mov	r5, r0
 800a1dc:	68d8      	ldr	r0, [r3, #12]
 800a1de:	b14c      	cbz	r4, 800a1f4 <__assert_func+0x24>
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <__assert_func+0x30>)
 800a1e2:	9100      	str	r1, [sp, #0]
 800a1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1e8:	4906      	ldr	r1, [pc, #24]	; (800a204 <__assert_func+0x34>)
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	f000 fe8a 	bl	800af04 <fiprintf>
 800a1f0:	f002 fb90 	bl	800c914 <abort>
 800a1f4:	4b04      	ldr	r3, [pc, #16]	; (800a208 <__assert_func+0x38>)
 800a1f6:	461c      	mov	r4, r3
 800a1f8:	e7f3      	b.n	800a1e2 <__assert_func+0x12>
 800a1fa:	bf00      	nop
 800a1fc:	2000007c 	.word	0x2000007c
 800a200:	0800f034 	.word	0x0800f034
 800a204:	0800f041 	.word	0x0800f041
 800a208:	0800f06f 	.word	0x0800f06f

0800a20c <quorem>:
 800a20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	6903      	ldr	r3, [r0, #16]
 800a212:	690c      	ldr	r4, [r1, #16]
 800a214:	42a3      	cmp	r3, r4
 800a216:	4607      	mov	r7, r0
 800a218:	f2c0 8081 	blt.w	800a31e <quorem+0x112>
 800a21c:	3c01      	subs	r4, #1
 800a21e:	f101 0814 	add.w	r8, r1, #20
 800a222:	f100 0514 	add.w	r5, r0, #20
 800a226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a234:	3301      	adds	r3, #1
 800a236:	429a      	cmp	r2, r3
 800a238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a23c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a240:	fbb2 f6f3 	udiv	r6, r2, r3
 800a244:	d331      	bcc.n	800a2aa <quorem+0x9e>
 800a246:	f04f 0e00 	mov.w	lr, #0
 800a24a:	4640      	mov	r0, r8
 800a24c:	46ac      	mov	ip, r5
 800a24e:	46f2      	mov	sl, lr
 800a250:	f850 2b04 	ldr.w	r2, [r0], #4
 800a254:	b293      	uxth	r3, r2
 800a256:	fb06 e303 	mla	r3, r6, r3, lr
 800a25a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a25e:	b29b      	uxth	r3, r3
 800a260:	ebaa 0303 	sub.w	r3, sl, r3
 800a264:	f8dc a000 	ldr.w	sl, [ip]
 800a268:	0c12      	lsrs	r2, r2, #16
 800a26a:	fa13 f38a 	uxtah	r3, r3, sl
 800a26e:	fb06 e202 	mla	r2, r6, r2, lr
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a27a:	b292      	uxth	r2, r2
 800a27c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a284:	f8bd 3000 	ldrh.w	r3, [sp]
 800a288:	4581      	cmp	r9, r0
 800a28a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a28e:	f84c 3b04 	str.w	r3, [ip], #4
 800a292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a296:	d2db      	bcs.n	800a250 <quorem+0x44>
 800a298:	f855 300b 	ldr.w	r3, [r5, fp]
 800a29c:	b92b      	cbnz	r3, 800a2aa <quorem+0x9e>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	d32e      	bcc.n	800a306 <quorem+0xfa>
 800a2a8:	613c      	str	r4, [r7, #16]
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f001 fc96 	bl	800bbdc <__mcmp>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	db24      	blt.n	800a2fe <quorem+0xf2>
 800a2b4:	3601      	adds	r6, #1
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f04f 0c00 	mov.w	ip, #0
 800a2bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2c0:	f8d0 e000 	ldr.w	lr, [r0]
 800a2c4:	b293      	uxth	r3, r2
 800a2c6:	ebac 0303 	sub.w	r3, ip, r3
 800a2ca:	0c12      	lsrs	r2, r2, #16
 800a2cc:	fa13 f38e 	uxtah	r3, r3, lr
 800a2d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2de:	45c1      	cmp	r9, r8
 800a2e0:	f840 3b04 	str.w	r3, [r0], #4
 800a2e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2e8:	d2e8      	bcs.n	800a2bc <quorem+0xb0>
 800a2ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2f2:	b922      	cbnz	r2, 800a2fe <quorem+0xf2>
 800a2f4:	3b04      	subs	r3, #4
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	d30a      	bcc.n	800a312 <quorem+0x106>
 800a2fc:	613c      	str	r4, [r7, #16]
 800a2fe:	4630      	mov	r0, r6
 800a300:	b003      	add	sp, #12
 800a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	3b04      	subs	r3, #4
 800a30a:	2a00      	cmp	r2, #0
 800a30c:	d1cc      	bne.n	800a2a8 <quorem+0x9c>
 800a30e:	3c01      	subs	r4, #1
 800a310:	e7c7      	b.n	800a2a2 <quorem+0x96>
 800a312:	6812      	ldr	r2, [r2, #0]
 800a314:	3b04      	subs	r3, #4
 800a316:	2a00      	cmp	r2, #0
 800a318:	d1f0      	bne.n	800a2fc <quorem+0xf0>
 800a31a:	3c01      	subs	r4, #1
 800a31c:	e7eb      	b.n	800a2f6 <quorem+0xea>
 800a31e:	2000      	movs	r0, #0
 800a320:	e7ee      	b.n	800a300 <quorem+0xf4>
 800a322:	0000      	movs	r0, r0
 800a324:	0000      	movs	r0, r0
	...

0800a328 <_dtoa_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	ed2d 8b04 	vpush	{d8-d9}
 800a330:	ec57 6b10 	vmov	r6, r7, d0
 800a334:	b093      	sub	sp, #76	; 0x4c
 800a336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a33c:	9106      	str	r1, [sp, #24]
 800a33e:	ee10 aa10 	vmov	sl, s0
 800a342:	4604      	mov	r4, r0
 800a344:	9209      	str	r2, [sp, #36]	; 0x24
 800a346:	930c      	str	r3, [sp, #48]	; 0x30
 800a348:	46bb      	mov	fp, r7
 800a34a:	b975      	cbnz	r5, 800a36a <_dtoa_r+0x42>
 800a34c:	2010      	movs	r0, #16
 800a34e:	f001 f95f 	bl	800b610 <malloc>
 800a352:	4602      	mov	r2, r0
 800a354:	6260      	str	r0, [r4, #36]	; 0x24
 800a356:	b920      	cbnz	r0, 800a362 <_dtoa_r+0x3a>
 800a358:	4ba7      	ldr	r3, [pc, #668]	; (800a5f8 <_dtoa_r+0x2d0>)
 800a35a:	21ea      	movs	r1, #234	; 0xea
 800a35c:	48a7      	ldr	r0, [pc, #668]	; (800a5fc <_dtoa_r+0x2d4>)
 800a35e:	f7ff ff37 	bl	800a1d0 <__assert_func>
 800a362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a366:	6005      	str	r5, [r0, #0]
 800a368:	60c5      	str	r5, [r0, #12]
 800a36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a36c:	6819      	ldr	r1, [r3, #0]
 800a36e:	b151      	cbz	r1, 800a386 <_dtoa_r+0x5e>
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	604a      	str	r2, [r1, #4]
 800a374:	2301      	movs	r3, #1
 800a376:	4093      	lsls	r3, r2
 800a378:	608b      	str	r3, [r1, #8]
 800a37a:	4620      	mov	r0, r4
 800a37c:	f001 f9a2 	bl	800b6c4 <_Bfree>
 800a380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	1e3b      	subs	r3, r7, #0
 800a388:	bfaa      	itet	ge
 800a38a:	2300      	movge	r3, #0
 800a38c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a390:	f8c8 3000 	strge.w	r3, [r8]
 800a394:	4b9a      	ldr	r3, [pc, #616]	; (800a600 <_dtoa_r+0x2d8>)
 800a396:	bfbc      	itt	lt
 800a398:	2201      	movlt	r2, #1
 800a39a:	f8c8 2000 	strlt.w	r2, [r8]
 800a39e:	ea33 030b 	bics.w	r3, r3, fp
 800a3a2:	d11b      	bne.n	800a3dc <_dtoa_r+0xb4>
 800a3a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3b0:	4333      	orrs	r3, r6
 800a3b2:	f000 8592 	beq.w	800aeda <_dtoa_r+0xbb2>
 800a3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b8:	b963      	cbnz	r3, 800a3d4 <_dtoa_r+0xac>
 800a3ba:	4b92      	ldr	r3, [pc, #584]	; (800a604 <_dtoa_r+0x2dc>)
 800a3bc:	e022      	b.n	800a404 <_dtoa_r+0xdc>
 800a3be:	4b92      	ldr	r3, [pc, #584]	; (800a608 <_dtoa_r+0x2e0>)
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	9801      	ldr	r0, [sp, #4]
 800a3ca:	b013      	add	sp, #76	; 0x4c
 800a3cc:	ecbd 8b04 	vpop	{d8-d9}
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	4b8b      	ldr	r3, [pc, #556]	; (800a604 <_dtoa_r+0x2dc>)
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	3303      	adds	r3, #3
 800a3da:	e7f3      	b.n	800a3c4 <_dtoa_r+0x9c>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	f7f6 fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3e8:	ec4b ab19 	vmov	d9, sl, fp
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	b158      	cbz	r0, 800a408 <_dtoa_r+0xe0>
 800a3f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 856b 	beq.w	800aed4 <_dtoa_r+0xbac>
 800a3fe:	4883      	ldr	r0, [pc, #524]	; (800a60c <_dtoa_r+0x2e4>)
 800a400:	6018      	str	r0, [r3, #0]
 800a402:	1e43      	subs	r3, r0, #1
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	e7df      	b.n	800a3c8 <_dtoa_r+0xa0>
 800a408:	ec4b ab10 	vmov	d0, sl, fp
 800a40c:	aa10      	add	r2, sp, #64	; 0x40
 800a40e:	a911      	add	r1, sp, #68	; 0x44
 800a410:	4620      	mov	r0, r4
 800a412:	f001 fd05 	bl	800be20 <__d2b>
 800a416:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a41a:	ee08 0a10 	vmov	s16, r0
 800a41e:	2d00      	cmp	r5, #0
 800a420:	f000 8084 	beq.w	800a52c <_dtoa_r+0x204>
 800a424:	ee19 3a90 	vmov	r3, s19
 800a428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a42c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a430:	4656      	mov	r6, sl
 800a432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a43a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a43e:	4b74      	ldr	r3, [pc, #464]	; (800a610 <_dtoa_r+0x2e8>)
 800a440:	2200      	movs	r2, #0
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f5 ff2f 	bl	80002a8 <__aeabi_dsub>
 800a44a:	a365      	add	r3, pc, #404	; (adr r3, 800a5e0 <_dtoa_r+0x2b8>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	a364      	add	r3, pc, #400	; (adr r3, 800a5e8 <_dtoa_r+0x2c0>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4606      	mov	r6, r0
 800a460:	4628      	mov	r0, r5
 800a462:	460f      	mov	r7, r1
 800a464:	f7f6 f86e 	bl	8000544 <__aeabi_i2d>
 800a468:	a361      	add	r3, pc, #388	; (adr r3, 800a5f0 <_dtoa_r+0x2c8>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f7f6 f8d3 	bl	8000618 <__aeabi_dmul>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4630      	mov	r0, r6
 800a478:	4639      	mov	r1, r7
 800a47a:	f7f5 ff17 	bl	80002ac <__adddf3>
 800a47e:	4606      	mov	r6, r0
 800a480:	460f      	mov	r7, r1
 800a482:	f7f6 fb79 	bl	8000b78 <__aeabi_d2iz>
 800a486:	2200      	movs	r2, #0
 800a488:	9000      	str	r0, [sp, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f6 fb34 	bl	8000afc <__aeabi_dcmplt>
 800a494:	b150      	cbz	r0, 800a4ac <_dtoa_r+0x184>
 800a496:	9800      	ldr	r0, [sp, #0]
 800a498:	f7f6 f854 	bl	8000544 <__aeabi_i2d>
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	f7f6 fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4a4:	b910      	cbnz	r0, 800a4ac <_dtoa_r+0x184>
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	2b16      	cmp	r3, #22
 800a4b0:	d85a      	bhi.n	800a568 <_dtoa_r+0x240>
 800a4b2:	9a00      	ldr	r2, [sp, #0]
 800a4b4:	4b57      	ldr	r3, [pc, #348]	; (800a614 <_dtoa_r+0x2ec>)
 800a4b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	ec51 0b19 	vmov	r0, r1, d9
 800a4c2:	f7f6 fb1b 	bl	8000afc <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d050      	beq.n	800a56c <_dtoa_r+0x244>
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d6:	1b5d      	subs	r5, r3, r5
 800a4d8:	1e6b      	subs	r3, r5, #1
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	bf45      	ittet	mi
 800a4de:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4e2:	9304      	strmi	r3, [sp, #16]
 800a4e4:	2300      	movpl	r3, #0
 800a4e6:	2300      	movmi	r3, #0
 800a4e8:	bf4c      	ite	mi
 800a4ea:	9305      	strmi	r3, [sp, #20]
 800a4ec:	9304      	strpl	r3, [sp, #16]
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	db3d      	blt.n	800a570 <_dtoa_r+0x248>
 800a4f4:	9b05      	ldr	r3, [sp, #20]
 800a4f6:	9a00      	ldr	r2, [sp, #0]
 800a4f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a4fa:	4413      	add	r3, r2
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	2300      	movs	r3, #0
 800a500:	9307      	str	r3, [sp, #28]
 800a502:	9b06      	ldr	r3, [sp, #24]
 800a504:	2b09      	cmp	r3, #9
 800a506:	f200 8089 	bhi.w	800a61c <_dtoa_r+0x2f4>
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	bfc4      	itt	gt
 800a50e:	3b04      	subgt	r3, #4
 800a510:	9306      	strgt	r3, [sp, #24]
 800a512:	9b06      	ldr	r3, [sp, #24]
 800a514:	f1a3 0302 	sub.w	r3, r3, #2
 800a518:	bfcc      	ite	gt
 800a51a:	2500      	movgt	r5, #0
 800a51c:	2501      	movle	r5, #1
 800a51e:	2b03      	cmp	r3, #3
 800a520:	f200 8087 	bhi.w	800a632 <_dtoa_r+0x30a>
 800a524:	e8df f003 	tbb	[pc, r3]
 800a528:	59383a2d 	.word	0x59383a2d
 800a52c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a530:	441d      	add	r5, r3
 800a532:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a536:	2b20      	cmp	r3, #32
 800a538:	bfc1      	itttt	gt
 800a53a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a53e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a542:	fa0b f303 	lslgt.w	r3, fp, r3
 800a546:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a54a:	bfda      	itte	le
 800a54c:	f1c3 0320 	rsble	r3, r3, #32
 800a550:	fa06 f003 	lslle.w	r0, r6, r3
 800a554:	4318      	orrgt	r0, r3
 800a556:	f7f5 ffe5 	bl	8000524 <__aeabi_ui2d>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4606      	mov	r6, r0
 800a55e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a562:	3d01      	subs	r5, #1
 800a564:	930e      	str	r3, [sp, #56]	; 0x38
 800a566:	e76a      	b.n	800a43e <_dtoa_r+0x116>
 800a568:	2301      	movs	r3, #1
 800a56a:	e7b2      	b.n	800a4d2 <_dtoa_r+0x1aa>
 800a56c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a56e:	e7b1      	b.n	800a4d4 <_dtoa_r+0x1ac>
 800a570:	9b04      	ldr	r3, [sp, #16]
 800a572:	9a00      	ldr	r2, [sp, #0]
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	9304      	str	r3, [sp, #16]
 800a578:	4253      	negs	r3, r2
 800a57a:	9307      	str	r3, [sp, #28]
 800a57c:	2300      	movs	r3, #0
 800a57e:	930a      	str	r3, [sp, #40]	; 0x28
 800a580:	e7bf      	b.n	800a502 <_dtoa_r+0x1da>
 800a582:	2300      	movs	r3, #0
 800a584:	9308      	str	r3, [sp, #32]
 800a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dc55      	bgt.n	800a638 <_dtoa_r+0x310>
 800a58c:	2301      	movs	r3, #1
 800a58e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a592:	461a      	mov	r2, r3
 800a594:	9209      	str	r2, [sp, #36]	; 0x24
 800a596:	e00c      	b.n	800a5b2 <_dtoa_r+0x28a>
 800a598:	2301      	movs	r3, #1
 800a59a:	e7f3      	b.n	800a584 <_dtoa_r+0x25c>
 800a59c:	2300      	movs	r3, #0
 800a59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a0:	9308      	str	r3, [sp, #32]
 800a5a2:	9b00      	ldr	r3, [sp, #0]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	9302      	str	r3, [sp, #8]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	bfb8      	it	lt
 800a5b0:	2301      	movlt	r3, #1
 800a5b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6042      	str	r2, [r0, #4]
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	f102 0614 	add.w	r6, r2, #20
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	6841      	ldr	r1, [r0, #4]
 800a5c2:	d93d      	bls.n	800a640 <_dtoa_r+0x318>
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f001 f83d 	bl	800b644 <_Balloc>
 800a5ca:	9001      	str	r0, [sp, #4]
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d13b      	bne.n	800a648 <_dtoa_r+0x320>
 800a5d0:	4b11      	ldr	r3, [pc, #68]	; (800a618 <_dtoa_r+0x2f0>)
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5d8:	e6c0      	b.n	800a35c <_dtoa_r+0x34>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e7df      	b.n	800a59e <_dtoa_r+0x276>
 800a5de:	bf00      	nop
 800a5e0:	636f4361 	.word	0x636f4361
 800a5e4:	3fd287a7 	.word	0x3fd287a7
 800a5e8:	8b60c8b3 	.word	0x8b60c8b3
 800a5ec:	3fc68a28 	.word	0x3fc68a28
 800a5f0:	509f79fb 	.word	0x509f79fb
 800a5f4:	3fd34413 	.word	0x3fd34413
 800a5f8:	0800efc0 	.word	0x0800efc0
 800a5fc:	0800f17e 	.word	0x0800f17e
 800a600:	7ff00000 	.word	0x7ff00000
 800a604:	0800f17a 	.word	0x0800f17a
 800a608:	0800f171 	.word	0x0800f171
 800a60c:	0800ef41 	.word	0x0800ef41
 800a610:	3ff80000 	.word	0x3ff80000
 800a614:	0800f2e8 	.word	0x0800f2e8
 800a618:	0800f1d9 	.word	0x0800f1d9
 800a61c:	2501      	movs	r5, #1
 800a61e:	2300      	movs	r3, #0
 800a620:	9306      	str	r3, [sp, #24]
 800a622:	9508      	str	r5, [sp, #32]
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
 800a628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a62c:	2200      	movs	r2, #0
 800a62e:	2312      	movs	r3, #18
 800a630:	e7b0      	b.n	800a594 <_dtoa_r+0x26c>
 800a632:	2301      	movs	r3, #1
 800a634:	9308      	str	r3, [sp, #32]
 800a636:	e7f5      	b.n	800a624 <_dtoa_r+0x2fc>
 800a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a63e:	e7b8      	b.n	800a5b2 <_dtoa_r+0x28a>
 800a640:	3101      	adds	r1, #1
 800a642:	6041      	str	r1, [r0, #4]
 800a644:	0052      	lsls	r2, r2, #1
 800a646:	e7b8      	b.n	800a5ba <_dtoa_r+0x292>
 800a648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a64a:	9a01      	ldr	r2, [sp, #4]
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	2b0e      	cmp	r3, #14
 800a652:	f200 809d 	bhi.w	800a790 <_dtoa_r+0x468>
 800a656:	2d00      	cmp	r5, #0
 800a658:	f000 809a 	beq.w	800a790 <_dtoa_r+0x468>
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd32      	ble.n	800a6c8 <_dtoa_r+0x3a0>
 800a662:	4ab7      	ldr	r2, [pc, #732]	; (800a940 <_dtoa_r+0x618>)
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a66c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a670:	9b00      	ldr	r3, [sp, #0]
 800a672:	05d8      	lsls	r0, r3, #23
 800a674:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a678:	d516      	bpl.n	800a6a8 <_dtoa_r+0x380>
 800a67a:	4bb2      	ldr	r3, [pc, #712]	; (800a944 <_dtoa_r+0x61c>)
 800a67c:	ec51 0b19 	vmov	r0, r1, d9
 800a680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a684:	f7f6 f8f2 	bl	800086c <__aeabi_ddiv>
 800a688:	f007 070f 	and.w	r7, r7, #15
 800a68c:	4682      	mov	sl, r0
 800a68e:	468b      	mov	fp, r1
 800a690:	2503      	movs	r5, #3
 800a692:	4eac      	ldr	r6, [pc, #688]	; (800a944 <_dtoa_r+0x61c>)
 800a694:	b957      	cbnz	r7, 800a6ac <_dtoa_r+0x384>
 800a696:	4642      	mov	r2, r8
 800a698:	464b      	mov	r3, r9
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	f7f6 f8e5 	bl	800086c <__aeabi_ddiv>
 800a6a2:	4682      	mov	sl, r0
 800a6a4:	468b      	mov	fp, r1
 800a6a6:	e028      	b.n	800a6fa <_dtoa_r+0x3d2>
 800a6a8:	2502      	movs	r5, #2
 800a6aa:	e7f2      	b.n	800a692 <_dtoa_r+0x36a>
 800a6ac:	07f9      	lsls	r1, r7, #31
 800a6ae:	d508      	bpl.n	800a6c2 <_dtoa_r+0x39a>
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6b8:	f7f5 ffae 	bl	8000618 <__aeabi_dmul>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	4680      	mov	r8, r0
 800a6c0:	4689      	mov	r9, r1
 800a6c2:	107f      	asrs	r7, r7, #1
 800a6c4:	3608      	adds	r6, #8
 800a6c6:	e7e5      	b.n	800a694 <_dtoa_r+0x36c>
 800a6c8:	f000 809b 	beq.w	800a802 <_dtoa_r+0x4da>
 800a6cc:	9b00      	ldr	r3, [sp, #0]
 800a6ce:	4f9d      	ldr	r7, [pc, #628]	; (800a944 <_dtoa_r+0x61c>)
 800a6d0:	425e      	negs	r6, r3
 800a6d2:	4b9b      	ldr	r3, [pc, #620]	; (800a940 <_dtoa_r+0x618>)
 800a6d4:	f006 020f 	and.w	r2, r6, #15
 800a6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	ec51 0b19 	vmov	r0, r1, d9
 800a6e4:	f7f5 ff98 	bl	8000618 <__aeabi_dmul>
 800a6e8:	1136      	asrs	r6, r6, #4
 800a6ea:	4682      	mov	sl, r0
 800a6ec:	468b      	mov	fp, r1
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	2502      	movs	r5, #2
 800a6f2:	2e00      	cmp	r6, #0
 800a6f4:	d17a      	bne.n	800a7ec <_dtoa_r+0x4c4>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1d3      	bne.n	800a6a2 <_dtoa_r+0x37a>
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8082 	beq.w	800a806 <_dtoa_r+0x4de>
 800a702:	4b91      	ldr	r3, [pc, #580]	; (800a948 <_dtoa_r+0x620>)
 800a704:	2200      	movs	r2, #0
 800a706:	4650      	mov	r0, sl
 800a708:	4659      	mov	r1, fp
 800a70a:	f7f6 f9f7 	bl	8000afc <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d079      	beq.n	800a806 <_dtoa_r+0x4de>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d076      	beq.n	800a806 <_dtoa_r+0x4de>
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd36      	ble.n	800a78c <_dtoa_r+0x464>
 800a71e:	9b00      	ldr	r3, [sp, #0]
 800a720:	4650      	mov	r0, sl
 800a722:	4659      	mov	r1, fp
 800a724:	1e5f      	subs	r7, r3, #1
 800a726:	2200      	movs	r2, #0
 800a728:	4b88      	ldr	r3, [pc, #544]	; (800a94c <_dtoa_r+0x624>)
 800a72a:	f7f5 ff75 	bl	8000618 <__aeabi_dmul>
 800a72e:	9e02      	ldr	r6, [sp, #8]
 800a730:	4682      	mov	sl, r0
 800a732:	468b      	mov	fp, r1
 800a734:	3501      	adds	r5, #1
 800a736:	4628      	mov	r0, r5
 800a738:	f7f5 ff04 	bl	8000544 <__aeabi_i2d>
 800a73c:	4652      	mov	r2, sl
 800a73e:	465b      	mov	r3, fp
 800a740:	f7f5 ff6a 	bl	8000618 <__aeabi_dmul>
 800a744:	4b82      	ldr	r3, [pc, #520]	; (800a950 <_dtoa_r+0x628>)
 800a746:	2200      	movs	r2, #0
 800a748:	f7f5 fdb0 	bl	80002ac <__adddf3>
 800a74c:	46d0      	mov	r8, sl
 800a74e:	46d9      	mov	r9, fp
 800a750:	4682      	mov	sl, r0
 800a752:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a756:	2e00      	cmp	r6, #0
 800a758:	d158      	bne.n	800a80c <_dtoa_r+0x4e4>
 800a75a:	4b7e      	ldr	r3, [pc, #504]	; (800a954 <_dtoa_r+0x62c>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f5 fda1 	bl	80002a8 <__aeabi_dsub>
 800a766:	4652      	mov	r2, sl
 800a768:	465b      	mov	r3, fp
 800a76a:	4680      	mov	r8, r0
 800a76c:	4689      	mov	r9, r1
 800a76e:	f7f6 f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 800a772:	2800      	cmp	r0, #0
 800a774:	f040 8295 	bne.w	800aca2 <_dtoa_r+0x97a>
 800a778:	4652      	mov	r2, sl
 800a77a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a77e:	4640      	mov	r0, r8
 800a780:	4649      	mov	r1, r9
 800a782:	f7f6 f9bb 	bl	8000afc <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	f040 8289 	bne.w	800ac9e <_dtoa_r+0x976>
 800a78c:	ec5b ab19 	vmov	sl, fp, d9
 800a790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a792:	2b00      	cmp	r3, #0
 800a794:	f2c0 8148 	blt.w	800aa28 <_dtoa_r+0x700>
 800a798:	9a00      	ldr	r2, [sp, #0]
 800a79a:	2a0e      	cmp	r2, #14
 800a79c:	f300 8144 	bgt.w	800aa28 <_dtoa_r+0x700>
 800a7a0:	4b67      	ldr	r3, [pc, #412]	; (800a940 <_dtoa_r+0x618>)
 800a7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f280 80d5 	bge.w	800a95c <_dtoa_r+0x634>
 800a7b2:	9b03      	ldr	r3, [sp, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f300 80d1 	bgt.w	800a95c <_dtoa_r+0x634>
 800a7ba:	f040 826f 	bne.w	800ac9c <_dtoa_r+0x974>
 800a7be:	4b65      	ldr	r3, [pc, #404]	; (800a954 <_dtoa_r+0x62c>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	f7f5 ff27 	bl	8000618 <__aeabi_dmul>
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	f7f6 f9a9 	bl	8000b24 <__aeabi_dcmpge>
 800a7d2:	9e03      	ldr	r6, [sp, #12]
 800a7d4:	4637      	mov	r7, r6
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f040 8245 	bne.w	800ac66 <_dtoa_r+0x93e>
 800a7dc:	9d01      	ldr	r5, [sp, #4]
 800a7de:	2331      	movs	r3, #49	; 0x31
 800a7e0:	f805 3b01 	strb.w	r3, [r5], #1
 800a7e4:	9b00      	ldr	r3, [sp, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	e240      	b.n	800ac6e <_dtoa_r+0x946>
 800a7ec:	07f2      	lsls	r2, r6, #31
 800a7ee:	d505      	bpl.n	800a7fc <_dtoa_r+0x4d4>
 800a7f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f4:	f7f5 ff10 	bl	8000618 <__aeabi_dmul>
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	1076      	asrs	r6, r6, #1
 800a7fe:	3708      	adds	r7, #8
 800a800:	e777      	b.n	800a6f2 <_dtoa_r+0x3ca>
 800a802:	2502      	movs	r5, #2
 800a804:	e779      	b.n	800a6fa <_dtoa_r+0x3d2>
 800a806:	9f00      	ldr	r7, [sp, #0]
 800a808:	9e03      	ldr	r6, [sp, #12]
 800a80a:	e794      	b.n	800a736 <_dtoa_r+0x40e>
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	4b4c      	ldr	r3, [pc, #304]	; (800a940 <_dtoa_r+0x618>)
 800a810:	4431      	add	r1, r6
 800a812:	910d      	str	r1, [sp, #52]	; 0x34
 800a814:	9908      	ldr	r1, [sp, #32]
 800a816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a81a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a81e:	2900      	cmp	r1, #0
 800a820:	d043      	beq.n	800a8aa <_dtoa_r+0x582>
 800a822:	494d      	ldr	r1, [pc, #308]	; (800a958 <_dtoa_r+0x630>)
 800a824:	2000      	movs	r0, #0
 800a826:	f7f6 f821 	bl	800086c <__aeabi_ddiv>
 800a82a:	4652      	mov	r2, sl
 800a82c:	465b      	mov	r3, fp
 800a82e:	f7f5 fd3b 	bl	80002a8 <__aeabi_dsub>
 800a832:	9d01      	ldr	r5, [sp, #4]
 800a834:	4682      	mov	sl, r0
 800a836:	468b      	mov	fp, r1
 800a838:	4649      	mov	r1, r9
 800a83a:	4640      	mov	r0, r8
 800a83c:	f7f6 f99c 	bl	8000b78 <__aeabi_d2iz>
 800a840:	4606      	mov	r6, r0
 800a842:	f7f5 fe7f 	bl	8000544 <__aeabi_i2d>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f7f5 fd2b 	bl	80002a8 <__aeabi_dsub>
 800a852:	3630      	adds	r6, #48	; 0x30
 800a854:	f805 6b01 	strb.w	r6, [r5], #1
 800a858:	4652      	mov	r2, sl
 800a85a:	465b      	mov	r3, fp
 800a85c:	4680      	mov	r8, r0
 800a85e:	4689      	mov	r9, r1
 800a860:	f7f6 f94c 	bl	8000afc <__aeabi_dcmplt>
 800a864:	2800      	cmp	r0, #0
 800a866:	d163      	bne.n	800a930 <_dtoa_r+0x608>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	4936      	ldr	r1, [pc, #216]	; (800a948 <_dtoa_r+0x620>)
 800a86e:	2000      	movs	r0, #0
 800a870:	f7f5 fd1a 	bl	80002a8 <__aeabi_dsub>
 800a874:	4652      	mov	r2, sl
 800a876:	465b      	mov	r3, fp
 800a878:	f7f6 f940 	bl	8000afc <__aeabi_dcmplt>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f040 80b5 	bne.w	800a9ec <_dtoa_r+0x6c4>
 800a882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a884:	429d      	cmp	r5, r3
 800a886:	d081      	beq.n	800a78c <_dtoa_r+0x464>
 800a888:	4b30      	ldr	r3, [pc, #192]	; (800a94c <_dtoa_r+0x624>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	4650      	mov	r0, sl
 800a88e:	4659      	mov	r1, fp
 800a890:	f7f5 fec2 	bl	8000618 <__aeabi_dmul>
 800a894:	4b2d      	ldr	r3, [pc, #180]	; (800a94c <_dtoa_r+0x624>)
 800a896:	4682      	mov	sl, r0
 800a898:	468b      	mov	fp, r1
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f7f5 feba 	bl	8000618 <__aeabi_dmul>
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	e7c6      	b.n	800a838 <_dtoa_r+0x510>
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	f7f5 feb3 	bl	8000618 <__aeabi_dmul>
 800a8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b4:	9d01      	ldr	r5, [sp, #4]
 800a8b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8b8:	4682      	mov	sl, r0
 800a8ba:	468b      	mov	fp, r1
 800a8bc:	4649      	mov	r1, r9
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7f6 f95a 	bl	8000b78 <__aeabi_d2iz>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	f7f5 fe3d 	bl	8000544 <__aeabi_i2d>
 800a8ca:	3630      	adds	r6, #48	; 0x30
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	f7f5 fce8 	bl	80002a8 <__aeabi_dsub>
 800a8d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	d124      	bne.n	800a934 <_dtoa_r+0x60c>
 800a8ea:	4b1b      	ldr	r3, [pc, #108]	; (800a958 <_dtoa_r+0x630>)
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	4659      	mov	r1, fp
 800a8f0:	f7f5 fcdc 	bl	80002ac <__adddf3>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f6 f91c 	bl	8000b38 <__aeabi_dcmpgt>
 800a900:	2800      	cmp	r0, #0
 800a902:	d173      	bne.n	800a9ec <_dtoa_r+0x6c4>
 800a904:	4652      	mov	r2, sl
 800a906:	465b      	mov	r3, fp
 800a908:	4913      	ldr	r1, [pc, #76]	; (800a958 <_dtoa_r+0x630>)
 800a90a:	2000      	movs	r0, #0
 800a90c:	f7f5 fccc 	bl	80002a8 <__aeabi_dsub>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f6 f8f0 	bl	8000afc <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f43f af35 	beq.w	800a78c <_dtoa_r+0x464>
 800a922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a924:	1e6b      	subs	r3, r5, #1
 800a926:	930f      	str	r3, [sp, #60]	; 0x3c
 800a928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a92c:	2b30      	cmp	r3, #48	; 0x30
 800a92e:	d0f8      	beq.n	800a922 <_dtoa_r+0x5fa>
 800a930:	9700      	str	r7, [sp, #0]
 800a932:	e049      	b.n	800a9c8 <_dtoa_r+0x6a0>
 800a934:	4b05      	ldr	r3, [pc, #20]	; (800a94c <_dtoa_r+0x624>)
 800a936:	f7f5 fe6f 	bl	8000618 <__aeabi_dmul>
 800a93a:	4680      	mov	r8, r0
 800a93c:	4689      	mov	r9, r1
 800a93e:	e7bd      	b.n	800a8bc <_dtoa_r+0x594>
 800a940:	0800f2e8 	.word	0x0800f2e8
 800a944:	0800f2c0 	.word	0x0800f2c0
 800a948:	3ff00000 	.word	0x3ff00000
 800a94c:	40240000 	.word	0x40240000
 800a950:	401c0000 	.word	0x401c0000
 800a954:	40140000 	.word	0x40140000
 800a958:	3fe00000 	.word	0x3fe00000
 800a95c:	9d01      	ldr	r5, [sp, #4]
 800a95e:	4656      	mov	r6, sl
 800a960:	465f      	mov	r7, fp
 800a962:	4642      	mov	r2, r8
 800a964:	464b      	mov	r3, r9
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f5 ff7f 	bl	800086c <__aeabi_ddiv>
 800a96e:	f7f6 f903 	bl	8000b78 <__aeabi_d2iz>
 800a972:	4682      	mov	sl, r0
 800a974:	f7f5 fde6 	bl	8000544 <__aeabi_i2d>
 800a978:	4642      	mov	r2, r8
 800a97a:	464b      	mov	r3, r9
 800a97c:	f7f5 fe4c 	bl	8000618 <__aeabi_dmul>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4630      	mov	r0, r6
 800a986:	4639      	mov	r1, r7
 800a988:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a98c:	f7f5 fc8c 	bl	80002a8 <__aeabi_dsub>
 800a990:	f805 6b01 	strb.w	r6, [r5], #1
 800a994:	9e01      	ldr	r6, [sp, #4]
 800a996:	9f03      	ldr	r7, [sp, #12]
 800a998:	1bae      	subs	r6, r5, r6
 800a99a:	42b7      	cmp	r7, r6
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	d135      	bne.n	800aa0e <_dtoa_r+0x6e6>
 800a9a2:	f7f5 fc83 	bl	80002ac <__adddf3>
 800a9a6:	4642      	mov	r2, r8
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	f7f6 f8c3 	bl	8000b38 <__aeabi_dcmpgt>
 800a9b2:	b9d0      	cbnz	r0, 800a9ea <_dtoa_r+0x6c2>
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f6 f894 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9c0:	b110      	cbz	r0, 800a9c8 <_dtoa_r+0x6a0>
 800a9c2:	f01a 0f01 	tst.w	sl, #1
 800a9c6:	d110      	bne.n	800a9ea <_dtoa_r+0x6c2>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	ee18 1a10 	vmov	r1, s16
 800a9ce:	f000 fe79 	bl	800b6c4 <_Bfree>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9800      	ldr	r0, [sp, #0]
 800a9d6:	702b      	strb	r3, [r5, #0]
 800a9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9da:	3001      	adds	r0, #1
 800a9dc:	6018      	str	r0, [r3, #0]
 800a9de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f43f acf1 	beq.w	800a3c8 <_dtoa_r+0xa0>
 800a9e6:	601d      	str	r5, [r3, #0]
 800a9e8:	e4ee      	b.n	800a3c8 <_dtoa_r+0xa0>
 800a9ea:	9f00      	ldr	r7, [sp, #0]
 800a9ec:	462b      	mov	r3, r5
 800a9ee:	461d      	mov	r5, r3
 800a9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9f4:	2a39      	cmp	r2, #57	; 0x39
 800a9f6:	d106      	bne.n	800aa06 <_dtoa_r+0x6de>
 800a9f8:	9a01      	ldr	r2, [sp, #4]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d1f7      	bne.n	800a9ee <_dtoa_r+0x6c6>
 800a9fe:	9901      	ldr	r1, [sp, #4]
 800aa00:	2230      	movs	r2, #48	; 0x30
 800aa02:	3701      	adds	r7, #1
 800aa04:	700a      	strb	r2, [r1, #0]
 800aa06:	781a      	ldrb	r2, [r3, #0]
 800aa08:	3201      	adds	r2, #1
 800aa0a:	701a      	strb	r2, [r3, #0]
 800aa0c:	e790      	b.n	800a930 <_dtoa_r+0x608>
 800aa0e:	4ba6      	ldr	r3, [pc, #664]	; (800aca8 <_dtoa_r+0x980>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	f7f5 fe01 	bl	8000618 <__aeabi_dmul>
 800aa16:	2200      	movs	r2, #0
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	460f      	mov	r7, r1
 800aa1e:	f7f6 f863 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d09d      	beq.n	800a962 <_dtoa_r+0x63a>
 800aa26:	e7cf      	b.n	800a9c8 <_dtoa_r+0x6a0>
 800aa28:	9a08      	ldr	r2, [sp, #32]
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	f000 80d7 	beq.w	800abde <_dtoa_r+0x8b6>
 800aa30:	9a06      	ldr	r2, [sp, #24]
 800aa32:	2a01      	cmp	r2, #1
 800aa34:	f300 80ba 	bgt.w	800abac <_dtoa_r+0x884>
 800aa38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	f000 80b2 	beq.w	800aba4 <_dtoa_r+0x87c>
 800aa40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa44:	9e07      	ldr	r6, [sp, #28]
 800aa46:	9d04      	ldr	r5, [sp, #16]
 800aa48:	9a04      	ldr	r2, [sp, #16]
 800aa4a:	441a      	add	r2, r3
 800aa4c:	9204      	str	r2, [sp, #16]
 800aa4e:	9a05      	ldr	r2, [sp, #20]
 800aa50:	2101      	movs	r1, #1
 800aa52:	441a      	add	r2, r3
 800aa54:	4620      	mov	r0, r4
 800aa56:	9205      	str	r2, [sp, #20]
 800aa58:	f000 ff36 	bl	800b8c8 <__i2b>
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	dd0c      	ble.n	800aa7c <_dtoa_r+0x754>
 800aa62:	9b05      	ldr	r3, [sp, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd09      	ble.n	800aa7c <_dtoa_r+0x754>
 800aa68:	42ab      	cmp	r3, r5
 800aa6a:	9a04      	ldr	r2, [sp, #16]
 800aa6c:	bfa8      	it	ge
 800aa6e:	462b      	movge	r3, r5
 800aa70:	1ad2      	subs	r2, r2, r3
 800aa72:	9204      	str	r2, [sp, #16]
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	1aed      	subs	r5, r5, r3
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	9305      	str	r3, [sp, #20]
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	b31b      	cbz	r3, 800aac8 <_dtoa_r+0x7a0>
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 80af 	beq.w	800abe6 <_dtoa_r+0x8be>
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	dd13      	ble.n	800aab4 <_dtoa_r+0x78c>
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	4632      	mov	r2, r6
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 ffd9 	bl	800ba48 <__pow5mult>
 800aa96:	ee18 2a10 	vmov	r2, s16
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 ff28 	bl	800b8f4 <__multiply>
 800aaa4:	ee18 1a10 	vmov	r1, s16
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fe0a 	bl	800b6c4 <_Bfree>
 800aab0:	ee08 8a10 	vmov	s16, r8
 800aab4:	9b07      	ldr	r3, [sp, #28]
 800aab6:	1b9a      	subs	r2, r3, r6
 800aab8:	d006      	beq.n	800aac8 <_dtoa_r+0x7a0>
 800aaba:	ee18 1a10 	vmov	r1, s16
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 ffc2 	bl	800ba48 <__pow5mult>
 800aac4:	ee08 0a10 	vmov	s16, r0
 800aac8:	2101      	movs	r1, #1
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fefc 	bl	800b8c8 <__i2b>
 800aad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	4606      	mov	r6, r0
 800aad6:	f340 8088 	ble.w	800abea <_dtoa_r+0x8c2>
 800aada:	461a      	mov	r2, r3
 800aadc:	4601      	mov	r1, r0
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 ffb2 	bl	800ba48 <__pow5mult>
 800aae4:	9b06      	ldr	r3, [sp, #24]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	4606      	mov	r6, r0
 800aaea:	f340 8081 	ble.w	800abf0 <_dtoa_r+0x8c8>
 800aaee:	f04f 0800 	mov.w	r8, #0
 800aaf2:	6933      	ldr	r3, [r6, #16]
 800aaf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaf8:	6918      	ldr	r0, [r3, #16]
 800aafa:	f000 fe95 	bl	800b828 <__hi0bits>
 800aafe:	f1c0 0020 	rsb	r0, r0, #32
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	4418      	add	r0, r3
 800ab06:	f010 001f 	ands.w	r0, r0, #31
 800ab0a:	f000 8092 	beq.w	800ac32 <_dtoa_r+0x90a>
 800ab0e:	f1c0 0320 	rsb	r3, r0, #32
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	f340 808a 	ble.w	800ac2c <_dtoa_r+0x904>
 800ab18:	f1c0 001c 	rsb	r0, r0, #28
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	4403      	add	r3, r0
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	9b05      	ldr	r3, [sp, #20]
 800ab24:	4403      	add	r3, r0
 800ab26:	4405      	add	r5, r0
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	9b04      	ldr	r3, [sp, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dd07      	ble.n	800ab40 <_dtoa_r+0x818>
 800ab30:	ee18 1a10 	vmov	r1, s16
 800ab34:	461a      	mov	r2, r3
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 ffe0 	bl	800bafc <__lshift>
 800ab3c:	ee08 0a10 	vmov	s16, r0
 800ab40:	9b05      	ldr	r3, [sp, #20]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dd05      	ble.n	800ab52 <_dtoa_r+0x82a>
 800ab46:	4631      	mov	r1, r6
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 ffd6 	bl	800bafc <__lshift>
 800ab50:	4606      	mov	r6, r0
 800ab52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d06e      	beq.n	800ac36 <_dtoa_r+0x90e>
 800ab58:	ee18 0a10 	vmov	r0, s16
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	f001 f83d 	bl	800bbdc <__mcmp>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	da67      	bge.n	800ac36 <_dtoa_r+0x90e>
 800ab66:	9b00      	ldr	r3, [sp, #0]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	ee18 1a10 	vmov	r1, s16
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	220a      	movs	r2, #10
 800ab72:	2300      	movs	r3, #0
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 fdc7 	bl	800b708 <__multadd>
 800ab7a:	9b08      	ldr	r3, [sp, #32]
 800ab7c:	ee08 0a10 	vmov	s16, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 81b1 	beq.w	800aee8 <_dtoa_r+0xbc0>
 800ab86:	2300      	movs	r3, #0
 800ab88:	4639      	mov	r1, r7
 800ab8a:	220a      	movs	r2, #10
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 fdbb 	bl	800b708 <__multadd>
 800ab92:	9b02      	ldr	r3, [sp, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	4607      	mov	r7, r0
 800ab98:	f300 808e 	bgt.w	800acb8 <_dtoa_r+0x990>
 800ab9c:	9b06      	ldr	r3, [sp, #24]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	dc51      	bgt.n	800ac46 <_dtoa_r+0x91e>
 800aba2:	e089      	b.n	800acb8 <_dtoa_r+0x990>
 800aba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abaa:	e74b      	b.n	800aa44 <_dtoa_r+0x71c>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	1e5e      	subs	r6, r3, #1
 800abb0:	9b07      	ldr	r3, [sp, #28]
 800abb2:	42b3      	cmp	r3, r6
 800abb4:	bfbf      	itttt	lt
 800abb6:	9b07      	ldrlt	r3, [sp, #28]
 800abb8:	9607      	strlt	r6, [sp, #28]
 800abba:	1af2      	sublt	r2, r6, r3
 800abbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abbe:	bfb6      	itet	lt
 800abc0:	189b      	addlt	r3, r3, r2
 800abc2:	1b9e      	subge	r6, r3, r6
 800abc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	bfb8      	it	lt
 800abca:	2600      	movlt	r6, #0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	bfb7      	itett	lt
 800abd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800abd8:	1a9d      	sublt	r5, r3, r2
 800abda:	2300      	movlt	r3, #0
 800abdc:	e734      	b.n	800aa48 <_dtoa_r+0x720>
 800abde:	9e07      	ldr	r6, [sp, #28]
 800abe0:	9d04      	ldr	r5, [sp, #16]
 800abe2:	9f08      	ldr	r7, [sp, #32]
 800abe4:	e73b      	b.n	800aa5e <_dtoa_r+0x736>
 800abe6:	9a07      	ldr	r2, [sp, #28]
 800abe8:	e767      	b.n	800aaba <_dtoa_r+0x792>
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	2b01      	cmp	r3, #1
 800abee:	dc18      	bgt.n	800ac22 <_dtoa_r+0x8fa>
 800abf0:	f1ba 0f00 	cmp.w	sl, #0
 800abf4:	d115      	bne.n	800ac22 <_dtoa_r+0x8fa>
 800abf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abfa:	b993      	cbnz	r3, 800ac22 <_dtoa_r+0x8fa>
 800abfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac00:	0d1b      	lsrs	r3, r3, #20
 800ac02:	051b      	lsls	r3, r3, #20
 800ac04:	b183      	cbz	r3, 800ac28 <_dtoa_r+0x900>
 800ac06:	9b04      	ldr	r3, [sp, #16]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	9b05      	ldr	r3, [sp, #20]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	9305      	str	r3, [sp, #20]
 800ac12:	f04f 0801 	mov.w	r8, #1
 800ac16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f47f af6a 	bne.w	800aaf2 <_dtoa_r+0x7ca>
 800ac1e:	2001      	movs	r0, #1
 800ac20:	e76f      	b.n	800ab02 <_dtoa_r+0x7da>
 800ac22:	f04f 0800 	mov.w	r8, #0
 800ac26:	e7f6      	b.n	800ac16 <_dtoa_r+0x8ee>
 800ac28:	4698      	mov	r8, r3
 800ac2a:	e7f4      	b.n	800ac16 <_dtoa_r+0x8ee>
 800ac2c:	f43f af7d 	beq.w	800ab2a <_dtoa_r+0x802>
 800ac30:	4618      	mov	r0, r3
 800ac32:	301c      	adds	r0, #28
 800ac34:	e772      	b.n	800ab1c <_dtoa_r+0x7f4>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dc37      	bgt.n	800acac <_dtoa_r+0x984>
 800ac3c:	9b06      	ldr	r3, [sp, #24]
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	dd34      	ble.n	800acac <_dtoa_r+0x984>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	9302      	str	r3, [sp, #8]
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	b96b      	cbnz	r3, 800ac66 <_dtoa_r+0x93e>
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fd5a 	bl	800b708 <__multadd>
 800ac54:	4601      	mov	r1, r0
 800ac56:	4606      	mov	r6, r0
 800ac58:	ee18 0a10 	vmov	r0, s16
 800ac5c:	f000 ffbe 	bl	800bbdc <__mcmp>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f73f adbb 	bgt.w	800a7dc <_dtoa_r+0x4b4>
 800ac66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac68:	9d01      	ldr	r5, [sp, #4]
 800ac6a:	43db      	mvns	r3, r3
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	4631      	mov	r1, r6
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 fd25 	bl	800b6c4 <_Bfree>
 800ac7a:	2f00      	cmp	r7, #0
 800ac7c:	f43f aea4 	beq.w	800a9c8 <_dtoa_r+0x6a0>
 800ac80:	f1b8 0f00 	cmp.w	r8, #0
 800ac84:	d005      	beq.n	800ac92 <_dtoa_r+0x96a>
 800ac86:	45b8      	cmp	r8, r7
 800ac88:	d003      	beq.n	800ac92 <_dtoa_r+0x96a>
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 fd19 	bl	800b6c4 <_Bfree>
 800ac92:	4639      	mov	r1, r7
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fd15 	bl	800b6c4 <_Bfree>
 800ac9a:	e695      	b.n	800a9c8 <_dtoa_r+0x6a0>
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	4637      	mov	r7, r6
 800aca0:	e7e1      	b.n	800ac66 <_dtoa_r+0x93e>
 800aca2:	9700      	str	r7, [sp, #0]
 800aca4:	4637      	mov	r7, r6
 800aca6:	e599      	b.n	800a7dc <_dtoa_r+0x4b4>
 800aca8:	40240000 	.word	0x40240000
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80ca 	beq.w	800ae48 <_dtoa_r+0xb20>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	9302      	str	r3, [sp, #8]
 800acb8:	2d00      	cmp	r5, #0
 800acba:	dd05      	ble.n	800acc8 <_dtoa_r+0x9a0>
 800acbc:	4639      	mov	r1, r7
 800acbe:	462a      	mov	r2, r5
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 ff1b 	bl	800bafc <__lshift>
 800acc6:	4607      	mov	r7, r0
 800acc8:	f1b8 0f00 	cmp.w	r8, #0
 800accc:	d05b      	beq.n	800ad86 <_dtoa_r+0xa5e>
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 fcb7 	bl	800b644 <_Balloc>
 800acd6:	4605      	mov	r5, r0
 800acd8:	b928      	cbnz	r0, 800ace6 <_dtoa_r+0x9be>
 800acda:	4b87      	ldr	r3, [pc, #540]	; (800aef8 <_dtoa_r+0xbd0>)
 800acdc:	4602      	mov	r2, r0
 800acde:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ace2:	f7ff bb3b 	b.w	800a35c <_dtoa_r+0x34>
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	3202      	adds	r2, #2
 800acea:	0092      	lsls	r2, r2, #2
 800acec:	f107 010c 	add.w	r1, r7, #12
 800acf0:	300c      	adds	r0, #12
 800acf2:	f7fd fc05 	bl	8008500 <memcpy>
 800acf6:	2201      	movs	r2, #1
 800acf8:	4629      	mov	r1, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 fefe 	bl	800bafc <__lshift>
 800ad00:	9b01      	ldr	r3, [sp, #4]
 800ad02:	f103 0901 	add.w	r9, r3, #1
 800ad06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	9305      	str	r3, [sp, #20]
 800ad0e:	f00a 0301 	and.w	r3, sl, #1
 800ad12:	46b8      	mov	r8, r7
 800ad14:	9304      	str	r3, [sp, #16]
 800ad16:	4607      	mov	r7, r0
 800ad18:	4631      	mov	r1, r6
 800ad1a:	ee18 0a10 	vmov	r0, s16
 800ad1e:	f7ff fa75 	bl	800a20c <quorem>
 800ad22:	4641      	mov	r1, r8
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad2a:	ee18 0a10 	vmov	r0, s16
 800ad2e:	f000 ff55 	bl	800bbdc <__mcmp>
 800ad32:	463a      	mov	r2, r7
 800ad34:	9003      	str	r0, [sp, #12]
 800ad36:	4631      	mov	r1, r6
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 ff6b 	bl	800bc14 <__mdiff>
 800ad3e:	68c2      	ldr	r2, [r0, #12]
 800ad40:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad44:	4605      	mov	r5, r0
 800ad46:	bb02      	cbnz	r2, 800ad8a <_dtoa_r+0xa62>
 800ad48:	4601      	mov	r1, r0
 800ad4a:	ee18 0a10 	vmov	r0, s16
 800ad4e:	f000 ff45 	bl	800bbdc <__mcmp>
 800ad52:	4602      	mov	r2, r0
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	9207      	str	r2, [sp, #28]
 800ad5a:	f000 fcb3 	bl	800b6c4 <_Bfree>
 800ad5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad62:	ea43 0102 	orr.w	r1, r3, r2
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	464d      	mov	r5, r9
 800ad6c:	d10f      	bne.n	800ad8e <_dtoa_r+0xa66>
 800ad6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad72:	d02a      	beq.n	800adca <_dtoa_r+0xaa2>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dd02      	ble.n	800ad80 <_dtoa_r+0xa58>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad80:	f88b a000 	strb.w	sl, [fp]
 800ad84:	e775      	b.n	800ac72 <_dtoa_r+0x94a>
 800ad86:	4638      	mov	r0, r7
 800ad88:	e7ba      	b.n	800ad00 <_dtoa_r+0x9d8>
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	e7e2      	b.n	800ad54 <_dtoa_r+0xa2c>
 800ad8e:	9b03      	ldr	r3, [sp, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	db04      	blt.n	800ad9e <_dtoa_r+0xa76>
 800ad94:	9906      	ldr	r1, [sp, #24]
 800ad96:	430b      	orrs	r3, r1
 800ad98:	9904      	ldr	r1, [sp, #16]
 800ad9a:	430b      	orrs	r3, r1
 800ad9c:	d122      	bne.n	800ade4 <_dtoa_r+0xabc>
 800ad9e:	2a00      	cmp	r2, #0
 800ada0:	ddee      	ble.n	800ad80 <_dtoa_r+0xa58>
 800ada2:	ee18 1a10 	vmov	r1, s16
 800ada6:	2201      	movs	r2, #1
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 fea7 	bl	800bafc <__lshift>
 800adae:	4631      	mov	r1, r6
 800adb0:	ee08 0a10 	vmov	s16, r0
 800adb4:	f000 ff12 	bl	800bbdc <__mcmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	dc03      	bgt.n	800adc4 <_dtoa_r+0xa9c>
 800adbc:	d1e0      	bne.n	800ad80 <_dtoa_r+0xa58>
 800adbe:	f01a 0f01 	tst.w	sl, #1
 800adc2:	d0dd      	beq.n	800ad80 <_dtoa_r+0xa58>
 800adc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adc8:	d1d7      	bne.n	800ad7a <_dtoa_r+0xa52>
 800adca:	2339      	movs	r3, #57	; 0x39
 800adcc:	f88b 3000 	strb.w	r3, [fp]
 800add0:	462b      	mov	r3, r5
 800add2:	461d      	mov	r5, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adda:	2a39      	cmp	r2, #57	; 0x39
 800addc:	d071      	beq.n	800aec2 <_dtoa_r+0xb9a>
 800adde:	3201      	adds	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	e746      	b.n	800ac72 <_dtoa_r+0x94a>
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	dd07      	ble.n	800adf8 <_dtoa_r+0xad0>
 800ade8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adec:	d0ed      	beq.n	800adca <_dtoa_r+0xaa2>
 800adee:	f10a 0301 	add.w	r3, sl, #1
 800adf2:	f88b 3000 	strb.w	r3, [fp]
 800adf6:	e73c      	b.n	800ac72 <_dtoa_r+0x94a>
 800adf8:	9b05      	ldr	r3, [sp, #20]
 800adfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800adfe:	4599      	cmp	r9, r3
 800ae00:	d047      	beq.n	800ae92 <_dtoa_r+0xb6a>
 800ae02:	ee18 1a10 	vmov	r1, s16
 800ae06:	2300      	movs	r3, #0
 800ae08:	220a      	movs	r2, #10
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fc7c 	bl	800b708 <__multadd>
 800ae10:	45b8      	cmp	r8, r7
 800ae12:	ee08 0a10 	vmov	s16, r0
 800ae16:	f04f 0300 	mov.w	r3, #0
 800ae1a:	f04f 020a 	mov.w	r2, #10
 800ae1e:	4641      	mov	r1, r8
 800ae20:	4620      	mov	r0, r4
 800ae22:	d106      	bne.n	800ae32 <_dtoa_r+0xb0a>
 800ae24:	f000 fc70 	bl	800b708 <__multadd>
 800ae28:	4680      	mov	r8, r0
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	f109 0901 	add.w	r9, r9, #1
 800ae30:	e772      	b.n	800ad18 <_dtoa_r+0x9f0>
 800ae32:	f000 fc69 	bl	800b708 <__multadd>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4680      	mov	r8, r0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fc62 	bl	800b708 <__multadd>
 800ae44:	4607      	mov	r7, r0
 800ae46:	e7f1      	b.n	800ae2c <_dtoa_r+0xb04>
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	9302      	str	r3, [sp, #8]
 800ae4c:	9d01      	ldr	r5, [sp, #4]
 800ae4e:	ee18 0a10 	vmov	r0, s16
 800ae52:	4631      	mov	r1, r6
 800ae54:	f7ff f9da 	bl	800a20c <quorem>
 800ae58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae5c:	9b01      	ldr	r3, [sp, #4]
 800ae5e:	f805 ab01 	strb.w	sl, [r5], #1
 800ae62:	1aea      	subs	r2, r5, r3
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	4293      	cmp	r3, r2
 800ae68:	dd09      	ble.n	800ae7e <_dtoa_r+0xb56>
 800ae6a:	ee18 1a10 	vmov	r1, s16
 800ae6e:	2300      	movs	r3, #0
 800ae70:	220a      	movs	r2, #10
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fc48 	bl	800b708 <__multadd>
 800ae78:	ee08 0a10 	vmov	s16, r0
 800ae7c:	e7e7      	b.n	800ae4e <_dtoa_r+0xb26>
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfc8      	it	gt
 800ae84:	461d      	movgt	r5, r3
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	bfd8      	it	le
 800ae8a:	2501      	movle	r5, #1
 800ae8c:	441d      	add	r5, r3
 800ae8e:	f04f 0800 	mov.w	r8, #0
 800ae92:	ee18 1a10 	vmov	r1, s16
 800ae96:	2201      	movs	r2, #1
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fe2f 	bl	800bafc <__lshift>
 800ae9e:	4631      	mov	r1, r6
 800aea0:	ee08 0a10 	vmov	s16, r0
 800aea4:	f000 fe9a 	bl	800bbdc <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	dc91      	bgt.n	800add0 <_dtoa_r+0xaa8>
 800aeac:	d102      	bne.n	800aeb4 <_dtoa_r+0xb8c>
 800aeae:	f01a 0f01 	tst.w	sl, #1
 800aeb2:	d18d      	bne.n	800add0 <_dtoa_r+0xaa8>
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	461d      	mov	r5, r3
 800aeb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aebc:	2a30      	cmp	r2, #48	; 0x30
 800aebe:	d0fa      	beq.n	800aeb6 <_dtoa_r+0xb8e>
 800aec0:	e6d7      	b.n	800ac72 <_dtoa_r+0x94a>
 800aec2:	9a01      	ldr	r2, [sp, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d184      	bne.n	800add2 <_dtoa_r+0xaaa>
 800aec8:	9b00      	ldr	r3, [sp, #0]
 800aeca:	3301      	adds	r3, #1
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	2331      	movs	r3, #49	; 0x31
 800aed0:	7013      	strb	r3, [r2, #0]
 800aed2:	e6ce      	b.n	800ac72 <_dtoa_r+0x94a>
 800aed4:	4b09      	ldr	r3, [pc, #36]	; (800aefc <_dtoa_r+0xbd4>)
 800aed6:	f7ff ba95 	b.w	800a404 <_dtoa_r+0xdc>
 800aeda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f47f aa6e 	bne.w	800a3be <_dtoa_r+0x96>
 800aee2:	4b07      	ldr	r3, [pc, #28]	; (800af00 <_dtoa_r+0xbd8>)
 800aee4:	f7ff ba8e 	b.w	800a404 <_dtoa_r+0xdc>
 800aee8:	9b02      	ldr	r3, [sp, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dcae      	bgt.n	800ae4c <_dtoa_r+0xb24>
 800aeee:	9b06      	ldr	r3, [sp, #24]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	f73f aea8 	bgt.w	800ac46 <_dtoa_r+0x91e>
 800aef6:	e7a9      	b.n	800ae4c <_dtoa_r+0xb24>
 800aef8:	0800f1d9 	.word	0x0800f1d9
 800aefc:	0800ef40 	.word	0x0800ef40
 800af00:	0800f171 	.word	0x0800f171

0800af04 <fiprintf>:
 800af04:	b40e      	push	{r1, r2, r3}
 800af06:	b503      	push	{r0, r1, lr}
 800af08:	4601      	mov	r1, r0
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	4805      	ldr	r0, [pc, #20]	; (800af24 <fiprintf+0x20>)
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	6800      	ldr	r0, [r0, #0]
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	f001 fad3 	bl	800c4c0 <_vfiprintf_r>
 800af1a:	b002      	add	sp, #8
 800af1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af20:	b003      	add	sp, #12
 800af22:	4770      	bx	lr
 800af24:	2000007c 	.word	0x2000007c

0800af28 <rshift>:
 800af28:	6903      	ldr	r3, [r0, #16]
 800af2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af32:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af36:	f100 0414 	add.w	r4, r0, #20
 800af3a:	dd45      	ble.n	800afc8 <rshift+0xa0>
 800af3c:	f011 011f 	ands.w	r1, r1, #31
 800af40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af48:	d10c      	bne.n	800af64 <rshift+0x3c>
 800af4a:	f100 0710 	add.w	r7, r0, #16
 800af4e:	4629      	mov	r1, r5
 800af50:	42b1      	cmp	r1, r6
 800af52:	d334      	bcc.n	800afbe <rshift+0x96>
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	1eea      	subs	r2, r5, #3
 800af5a:	4296      	cmp	r6, r2
 800af5c:	bf38      	it	cc
 800af5e:	2300      	movcc	r3, #0
 800af60:	4423      	add	r3, r4
 800af62:	e015      	b.n	800af90 <rshift+0x68>
 800af64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af68:	f1c1 0820 	rsb	r8, r1, #32
 800af6c:	40cf      	lsrs	r7, r1
 800af6e:	f105 0e04 	add.w	lr, r5, #4
 800af72:	46a1      	mov	r9, r4
 800af74:	4576      	cmp	r6, lr
 800af76:	46f4      	mov	ip, lr
 800af78:	d815      	bhi.n	800afa6 <rshift+0x7e>
 800af7a:	1a9a      	subs	r2, r3, r2
 800af7c:	0092      	lsls	r2, r2, #2
 800af7e:	3a04      	subs	r2, #4
 800af80:	3501      	adds	r5, #1
 800af82:	42ae      	cmp	r6, r5
 800af84:	bf38      	it	cc
 800af86:	2200      	movcc	r2, #0
 800af88:	18a3      	adds	r3, r4, r2
 800af8a:	50a7      	str	r7, [r4, r2]
 800af8c:	b107      	cbz	r7, 800af90 <rshift+0x68>
 800af8e:	3304      	adds	r3, #4
 800af90:	1b1a      	subs	r2, r3, r4
 800af92:	42a3      	cmp	r3, r4
 800af94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af98:	bf08      	it	eq
 800af9a:	2300      	moveq	r3, #0
 800af9c:	6102      	str	r2, [r0, #16]
 800af9e:	bf08      	it	eq
 800afa0:	6143      	streq	r3, [r0, #20]
 800afa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afa6:	f8dc c000 	ldr.w	ip, [ip]
 800afaa:	fa0c fc08 	lsl.w	ip, ip, r8
 800afae:	ea4c 0707 	orr.w	r7, ip, r7
 800afb2:	f849 7b04 	str.w	r7, [r9], #4
 800afb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afba:	40cf      	lsrs	r7, r1
 800afbc:	e7da      	b.n	800af74 <rshift+0x4c>
 800afbe:	f851 cb04 	ldr.w	ip, [r1], #4
 800afc2:	f847 cf04 	str.w	ip, [r7, #4]!
 800afc6:	e7c3      	b.n	800af50 <rshift+0x28>
 800afc8:	4623      	mov	r3, r4
 800afca:	e7e1      	b.n	800af90 <rshift+0x68>

0800afcc <__hexdig_fun>:
 800afcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d802      	bhi.n	800afda <__hexdig_fun+0xe>
 800afd4:	3820      	subs	r0, #32
 800afd6:	b2c0      	uxtb	r0, r0
 800afd8:	4770      	bx	lr
 800afda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afde:	2b05      	cmp	r3, #5
 800afe0:	d801      	bhi.n	800afe6 <__hexdig_fun+0x1a>
 800afe2:	3847      	subs	r0, #71	; 0x47
 800afe4:	e7f7      	b.n	800afd6 <__hexdig_fun+0xa>
 800afe6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afea:	2b05      	cmp	r3, #5
 800afec:	d801      	bhi.n	800aff2 <__hexdig_fun+0x26>
 800afee:	3827      	subs	r0, #39	; 0x27
 800aff0:	e7f1      	b.n	800afd6 <__hexdig_fun+0xa>
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr
	...

0800aff8 <__gethex>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ed2d 8b02 	vpush	{d8}
 800b000:	b089      	sub	sp, #36	; 0x24
 800b002:	ee08 0a10 	vmov	s16, r0
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	4bb4      	ldr	r3, [pc, #720]	; (800b2dc <__gethex+0x2e4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	4618      	mov	r0, r3
 800b010:	468b      	mov	fp, r1
 800b012:	4690      	mov	r8, r2
 800b014:	f7f5 f8e6 	bl	80001e4 <strlen>
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	f8db 2000 	ldr.w	r2, [fp]
 800b01e:	4403      	add	r3, r0
 800b020:	4682      	mov	sl, r0
 800b022:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	1c93      	adds	r3, r2, #2
 800b02a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b02e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b032:	32fe      	adds	r2, #254	; 0xfe
 800b034:	18d1      	adds	r1, r2, r3
 800b036:	461f      	mov	r7, r3
 800b038:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b03c:	9100      	str	r1, [sp, #0]
 800b03e:	2830      	cmp	r0, #48	; 0x30
 800b040:	d0f8      	beq.n	800b034 <__gethex+0x3c>
 800b042:	f7ff ffc3 	bl	800afcc <__hexdig_fun>
 800b046:	4604      	mov	r4, r0
 800b048:	2800      	cmp	r0, #0
 800b04a:	d13a      	bne.n	800b0c2 <__gethex+0xca>
 800b04c:	9901      	ldr	r1, [sp, #4]
 800b04e:	4652      	mov	r2, sl
 800b050:	4638      	mov	r0, r7
 800b052:	f001 fb7d 	bl	800c750 <strncmp>
 800b056:	4605      	mov	r5, r0
 800b058:	2800      	cmp	r0, #0
 800b05a:	d168      	bne.n	800b12e <__gethex+0x136>
 800b05c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b060:	eb07 060a 	add.w	r6, r7, sl
 800b064:	f7ff ffb2 	bl	800afcc <__hexdig_fun>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d062      	beq.n	800b132 <__gethex+0x13a>
 800b06c:	4633      	mov	r3, r6
 800b06e:	7818      	ldrb	r0, [r3, #0]
 800b070:	2830      	cmp	r0, #48	; 0x30
 800b072:	461f      	mov	r7, r3
 800b074:	f103 0301 	add.w	r3, r3, #1
 800b078:	d0f9      	beq.n	800b06e <__gethex+0x76>
 800b07a:	f7ff ffa7 	bl	800afcc <__hexdig_fun>
 800b07e:	2301      	movs	r3, #1
 800b080:	fab0 f480 	clz	r4, r0
 800b084:	0964      	lsrs	r4, r4, #5
 800b086:	4635      	mov	r5, r6
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	463a      	mov	r2, r7
 800b08c:	4616      	mov	r6, r2
 800b08e:	3201      	adds	r2, #1
 800b090:	7830      	ldrb	r0, [r6, #0]
 800b092:	f7ff ff9b 	bl	800afcc <__hexdig_fun>
 800b096:	2800      	cmp	r0, #0
 800b098:	d1f8      	bne.n	800b08c <__gethex+0x94>
 800b09a:	9901      	ldr	r1, [sp, #4]
 800b09c:	4652      	mov	r2, sl
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f001 fb56 	bl	800c750 <strncmp>
 800b0a4:	b980      	cbnz	r0, 800b0c8 <__gethex+0xd0>
 800b0a6:	b94d      	cbnz	r5, 800b0bc <__gethex+0xc4>
 800b0a8:	eb06 050a 	add.w	r5, r6, sl
 800b0ac:	462a      	mov	r2, r5
 800b0ae:	4616      	mov	r6, r2
 800b0b0:	3201      	adds	r2, #1
 800b0b2:	7830      	ldrb	r0, [r6, #0]
 800b0b4:	f7ff ff8a 	bl	800afcc <__hexdig_fun>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1f8      	bne.n	800b0ae <__gethex+0xb6>
 800b0bc:	1bad      	subs	r5, r5, r6
 800b0be:	00ad      	lsls	r5, r5, #2
 800b0c0:	e004      	b.n	800b0cc <__gethex+0xd4>
 800b0c2:	2400      	movs	r4, #0
 800b0c4:	4625      	mov	r5, r4
 800b0c6:	e7e0      	b.n	800b08a <__gethex+0x92>
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	d1f7      	bne.n	800b0bc <__gethex+0xc4>
 800b0cc:	7833      	ldrb	r3, [r6, #0]
 800b0ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0d2:	2b50      	cmp	r3, #80	; 0x50
 800b0d4:	d13b      	bne.n	800b14e <__gethex+0x156>
 800b0d6:	7873      	ldrb	r3, [r6, #1]
 800b0d8:	2b2b      	cmp	r3, #43	; 0x2b
 800b0da:	d02c      	beq.n	800b136 <__gethex+0x13e>
 800b0dc:	2b2d      	cmp	r3, #45	; 0x2d
 800b0de:	d02e      	beq.n	800b13e <__gethex+0x146>
 800b0e0:	1c71      	adds	r1, r6, #1
 800b0e2:	f04f 0900 	mov.w	r9, #0
 800b0e6:	7808      	ldrb	r0, [r1, #0]
 800b0e8:	f7ff ff70 	bl	800afcc <__hexdig_fun>
 800b0ec:	1e43      	subs	r3, r0, #1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b18      	cmp	r3, #24
 800b0f2:	d82c      	bhi.n	800b14e <__gethex+0x156>
 800b0f4:	f1a0 0210 	sub.w	r2, r0, #16
 800b0f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0fc:	f7ff ff66 	bl	800afcc <__hexdig_fun>
 800b100:	1e43      	subs	r3, r0, #1
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b18      	cmp	r3, #24
 800b106:	d91d      	bls.n	800b144 <__gethex+0x14c>
 800b108:	f1b9 0f00 	cmp.w	r9, #0
 800b10c:	d000      	beq.n	800b110 <__gethex+0x118>
 800b10e:	4252      	negs	r2, r2
 800b110:	4415      	add	r5, r2
 800b112:	f8cb 1000 	str.w	r1, [fp]
 800b116:	b1e4      	cbz	r4, 800b152 <__gethex+0x15a>
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bf14      	ite	ne
 800b11e:	2700      	movne	r7, #0
 800b120:	2706      	moveq	r7, #6
 800b122:	4638      	mov	r0, r7
 800b124:	b009      	add	sp, #36	; 0x24
 800b126:	ecbd 8b02 	vpop	{d8}
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	463e      	mov	r6, r7
 800b130:	4625      	mov	r5, r4
 800b132:	2401      	movs	r4, #1
 800b134:	e7ca      	b.n	800b0cc <__gethex+0xd4>
 800b136:	f04f 0900 	mov.w	r9, #0
 800b13a:	1cb1      	adds	r1, r6, #2
 800b13c:	e7d3      	b.n	800b0e6 <__gethex+0xee>
 800b13e:	f04f 0901 	mov.w	r9, #1
 800b142:	e7fa      	b.n	800b13a <__gethex+0x142>
 800b144:	230a      	movs	r3, #10
 800b146:	fb03 0202 	mla	r2, r3, r2, r0
 800b14a:	3a10      	subs	r2, #16
 800b14c:	e7d4      	b.n	800b0f8 <__gethex+0x100>
 800b14e:	4631      	mov	r1, r6
 800b150:	e7df      	b.n	800b112 <__gethex+0x11a>
 800b152:	1bf3      	subs	r3, r6, r7
 800b154:	3b01      	subs	r3, #1
 800b156:	4621      	mov	r1, r4
 800b158:	2b07      	cmp	r3, #7
 800b15a:	dc0b      	bgt.n	800b174 <__gethex+0x17c>
 800b15c:	ee18 0a10 	vmov	r0, s16
 800b160:	f000 fa70 	bl	800b644 <_Balloc>
 800b164:	4604      	mov	r4, r0
 800b166:	b940      	cbnz	r0, 800b17a <__gethex+0x182>
 800b168:	4b5d      	ldr	r3, [pc, #372]	; (800b2e0 <__gethex+0x2e8>)
 800b16a:	4602      	mov	r2, r0
 800b16c:	21de      	movs	r1, #222	; 0xde
 800b16e:	485d      	ldr	r0, [pc, #372]	; (800b2e4 <__gethex+0x2ec>)
 800b170:	f7ff f82e 	bl	800a1d0 <__assert_func>
 800b174:	3101      	adds	r1, #1
 800b176:	105b      	asrs	r3, r3, #1
 800b178:	e7ee      	b.n	800b158 <__gethex+0x160>
 800b17a:	f100 0914 	add.w	r9, r0, #20
 800b17e:	f04f 0b00 	mov.w	fp, #0
 800b182:	f1ca 0301 	rsb	r3, sl, #1
 800b186:	f8cd 9008 	str.w	r9, [sp, #8]
 800b18a:	f8cd b000 	str.w	fp, [sp]
 800b18e:	9306      	str	r3, [sp, #24]
 800b190:	42b7      	cmp	r7, r6
 800b192:	d340      	bcc.n	800b216 <__gethex+0x21e>
 800b194:	9802      	ldr	r0, [sp, #8]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	f840 3b04 	str.w	r3, [r0], #4
 800b19c:	eba0 0009 	sub.w	r0, r0, r9
 800b1a0:	1080      	asrs	r0, r0, #2
 800b1a2:	0146      	lsls	r6, r0, #5
 800b1a4:	6120      	str	r0, [r4, #16]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fb3e 	bl	800b828 <__hi0bits>
 800b1ac:	1a30      	subs	r0, r6, r0
 800b1ae:	f8d8 6000 	ldr.w	r6, [r8]
 800b1b2:	42b0      	cmp	r0, r6
 800b1b4:	dd63      	ble.n	800b27e <__gethex+0x286>
 800b1b6:	1b87      	subs	r7, r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fee2 	bl	800bf84 <__any_on>
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	b1a8      	cbz	r0, 800b1f0 <__gethex+0x1f8>
 800b1c4:	1e7b      	subs	r3, r7, #1
 800b1c6:	1159      	asrs	r1, r3, #5
 800b1c8:	f003 021f 	and.w	r2, r3, #31
 800b1cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1d0:	f04f 0a01 	mov.w	sl, #1
 800b1d4:	fa0a f202 	lsl.w	r2, sl, r2
 800b1d8:	420a      	tst	r2, r1
 800b1da:	d009      	beq.n	800b1f0 <__gethex+0x1f8>
 800b1dc:	4553      	cmp	r3, sl
 800b1de:	dd05      	ble.n	800b1ec <__gethex+0x1f4>
 800b1e0:	1eb9      	subs	r1, r7, #2
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 fece 	bl	800bf84 <__any_on>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d145      	bne.n	800b278 <__gethex+0x280>
 800b1ec:	f04f 0a02 	mov.w	sl, #2
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f7ff fe98 	bl	800af28 <rshift>
 800b1f8:	443d      	add	r5, r7
 800b1fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1fe:	42ab      	cmp	r3, r5
 800b200:	da4c      	bge.n	800b29c <__gethex+0x2a4>
 800b202:	ee18 0a10 	vmov	r0, s16
 800b206:	4621      	mov	r1, r4
 800b208:	f000 fa5c 	bl	800b6c4 <_Bfree>
 800b20c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b20e:	2300      	movs	r3, #0
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	27a3      	movs	r7, #163	; 0xa3
 800b214:	e785      	b.n	800b122 <__gethex+0x12a>
 800b216:	1e73      	subs	r3, r6, #1
 800b218:	9a05      	ldr	r2, [sp, #20]
 800b21a:	9303      	str	r3, [sp, #12]
 800b21c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b220:	4293      	cmp	r3, r2
 800b222:	d019      	beq.n	800b258 <__gethex+0x260>
 800b224:	f1bb 0f20 	cmp.w	fp, #32
 800b228:	d107      	bne.n	800b23a <__gethex+0x242>
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	9a00      	ldr	r2, [sp, #0]
 800b22e:	f843 2b04 	str.w	r2, [r3], #4
 800b232:	9302      	str	r3, [sp, #8]
 800b234:	2300      	movs	r3, #0
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	469b      	mov	fp, r3
 800b23a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b23e:	f7ff fec5 	bl	800afcc <__hexdig_fun>
 800b242:	9b00      	ldr	r3, [sp, #0]
 800b244:	f000 000f 	and.w	r0, r0, #15
 800b248:	fa00 f00b 	lsl.w	r0, r0, fp
 800b24c:	4303      	orrs	r3, r0
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	f10b 0b04 	add.w	fp, fp, #4
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	e00d      	b.n	800b274 <__gethex+0x27c>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	9a06      	ldr	r2, [sp, #24]
 800b25c:	4413      	add	r3, r2
 800b25e:	42bb      	cmp	r3, r7
 800b260:	d3e0      	bcc.n	800b224 <__gethex+0x22c>
 800b262:	4618      	mov	r0, r3
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	9307      	str	r3, [sp, #28]
 800b268:	4652      	mov	r2, sl
 800b26a:	f001 fa71 	bl	800c750 <strncmp>
 800b26e:	9b07      	ldr	r3, [sp, #28]
 800b270:	2800      	cmp	r0, #0
 800b272:	d1d7      	bne.n	800b224 <__gethex+0x22c>
 800b274:	461e      	mov	r6, r3
 800b276:	e78b      	b.n	800b190 <__gethex+0x198>
 800b278:	f04f 0a03 	mov.w	sl, #3
 800b27c:	e7b8      	b.n	800b1f0 <__gethex+0x1f8>
 800b27e:	da0a      	bge.n	800b296 <__gethex+0x29e>
 800b280:	1a37      	subs	r7, r6, r0
 800b282:	4621      	mov	r1, r4
 800b284:	ee18 0a10 	vmov	r0, s16
 800b288:	463a      	mov	r2, r7
 800b28a:	f000 fc37 	bl	800bafc <__lshift>
 800b28e:	1bed      	subs	r5, r5, r7
 800b290:	4604      	mov	r4, r0
 800b292:	f100 0914 	add.w	r9, r0, #20
 800b296:	f04f 0a00 	mov.w	sl, #0
 800b29a:	e7ae      	b.n	800b1fa <__gethex+0x202>
 800b29c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b2a0:	42a8      	cmp	r0, r5
 800b2a2:	dd72      	ble.n	800b38a <__gethex+0x392>
 800b2a4:	1b45      	subs	r5, r0, r5
 800b2a6:	42ae      	cmp	r6, r5
 800b2a8:	dc36      	bgt.n	800b318 <__gethex+0x320>
 800b2aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d02a      	beq.n	800b308 <__gethex+0x310>
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d02c      	beq.n	800b310 <__gethex+0x318>
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d11c      	bne.n	800b2f4 <__gethex+0x2fc>
 800b2ba:	42ae      	cmp	r6, r5
 800b2bc:	d11a      	bne.n	800b2f4 <__gethex+0x2fc>
 800b2be:	2e01      	cmp	r6, #1
 800b2c0:	d112      	bne.n	800b2e8 <__gethex+0x2f0>
 800b2c2:	9a04      	ldr	r2, [sp, #16]
 800b2c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	6123      	str	r3, [r4, #16]
 800b2ce:	f8c9 3000 	str.w	r3, [r9]
 800b2d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2d4:	2762      	movs	r7, #98	; 0x62
 800b2d6:	601c      	str	r4, [r3, #0]
 800b2d8:	e723      	b.n	800b122 <__gethex+0x12a>
 800b2da:	bf00      	nop
 800b2dc:	0800f250 	.word	0x0800f250
 800b2e0:	0800f1d9 	.word	0x0800f1d9
 800b2e4:	0800f1ea 	.word	0x0800f1ea
 800b2e8:	1e71      	subs	r1, r6, #1
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fe4a 	bl	800bf84 <__any_on>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1e6      	bne.n	800b2c2 <__gethex+0x2ca>
 800b2f4:	ee18 0a10 	vmov	r0, s16
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	f000 f9e3 	bl	800b6c4 <_Bfree>
 800b2fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b300:	2300      	movs	r3, #0
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	2750      	movs	r7, #80	; 0x50
 800b306:	e70c      	b.n	800b122 <__gethex+0x12a>
 800b308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f2      	bne.n	800b2f4 <__gethex+0x2fc>
 800b30e:	e7d8      	b.n	800b2c2 <__gethex+0x2ca>
 800b310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1d5      	bne.n	800b2c2 <__gethex+0x2ca>
 800b316:	e7ed      	b.n	800b2f4 <__gethex+0x2fc>
 800b318:	1e6f      	subs	r7, r5, #1
 800b31a:	f1ba 0f00 	cmp.w	sl, #0
 800b31e:	d131      	bne.n	800b384 <__gethex+0x38c>
 800b320:	b127      	cbz	r7, 800b32c <__gethex+0x334>
 800b322:	4639      	mov	r1, r7
 800b324:	4620      	mov	r0, r4
 800b326:	f000 fe2d 	bl	800bf84 <__any_on>
 800b32a:	4682      	mov	sl, r0
 800b32c:	117b      	asrs	r3, r7, #5
 800b32e:	2101      	movs	r1, #1
 800b330:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b334:	f007 071f 	and.w	r7, r7, #31
 800b338:	fa01 f707 	lsl.w	r7, r1, r7
 800b33c:	421f      	tst	r7, r3
 800b33e:	4629      	mov	r1, r5
 800b340:	4620      	mov	r0, r4
 800b342:	bf18      	it	ne
 800b344:	f04a 0a02 	orrne.w	sl, sl, #2
 800b348:	1b76      	subs	r6, r6, r5
 800b34a:	f7ff fded 	bl	800af28 <rshift>
 800b34e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b352:	2702      	movs	r7, #2
 800b354:	f1ba 0f00 	cmp.w	sl, #0
 800b358:	d048      	beq.n	800b3ec <__gethex+0x3f4>
 800b35a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d015      	beq.n	800b38e <__gethex+0x396>
 800b362:	2b03      	cmp	r3, #3
 800b364:	d017      	beq.n	800b396 <__gethex+0x39e>
 800b366:	2b01      	cmp	r3, #1
 800b368:	d109      	bne.n	800b37e <__gethex+0x386>
 800b36a:	f01a 0f02 	tst.w	sl, #2
 800b36e:	d006      	beq.n	800b37e <__gethex+0x386>
 800b370:	f8d9 0000 	ldr.w	r0, [r9]
 800b374:	ea4a 0a00 	orr.w	sl, sl, r0
 800b378:	f01a 0f01 	tst.w	sl, #1
 800b37c:	d10e      	bne.n	800b39c <__gethex+0x3a4>
 800b37e:	f047 0710 	orr.w	r7, r7, #16
 800b382:	e033      	b.n	800b3ec <__gethex+0x3f4>
 800b384:	f04f 0a01 	mov.w	sl, #1
 800b388:	e7d0      	b.n	800b32c <__gethex+0x334>
 800b38a:	2701      	movs	r7, #1
 800b38c:	e7e2      	b.n	800b354 <__gethex+0x35c>
 800b38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b390:	f1c3 0301 	rsb	r3, r3, #1
 800b394:	9315      	str	r3, [sp, #84]	; 0x54
 800b396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d0f0      	beq.n	800b37e <__gethex+0x386>
 800b39c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3a0:	f104 0314 	add.w	r3, r4, #20
 800b3a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3ac:	f04f 0c00 	mov.w	ip, #0
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3ba:	d01c      	beq.n	800b3f6 <__gethex+0x3fe>
 800b3bc:	3201      	adds	r2, #1
 800b3be:	6002      	str	r2, [r0, #0]
 800b3c0:	2f02      	cmp	r7, #2
 800b3c2:	f104 0314 	add.w	r3, r4, #20
 800b3c6:	d13f      	bne.n	800b448 <__gethex+0x450>
 800b3c8:	f8d8 2000 	ldr.w	r2, [r8]
 800b3cc:	3a01      	subs	r2, #1
 800b3ce:	42b2      	cmp	r2, r6
 800b3d0:	d10a      	bne.n	800b3e8 <__gethex+0x3f0>
 800b3d2:	1171      	asrs	r1, r6, #5
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3da:	f006 061f 	and.w	r6, r6, #31
 800b3de:	fa02 f606 	lsl.w	r6, r2, r6
 800b3e2:	421e      	tst	r6, r3
 800b3e4:	bf18      	it	ne
 800b3e6:	4617      	movne	r7, r2
 800b3e8:	f047 0720 	orr.w	r7, r7, #32
 800b3ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3ee:	601c      	str	r4, [r3, #0]
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	601d      	str	r5, [r3, #0]
 800b3f4:	e695      	b.n	800b122 <__gethex+0x12a>
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3fc:	d8d8      	bhi.n	800b3b0 <__gethex+0x3b8>
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	459b      	cmp	fp, r3
 800b402:	db19      	blt.n	800b438 <__gethex+0x440>
 800b404:	6861      	ldr	r1, [r4, #4]
 800b406:	ee18 0a10 	vmov	r0, s16
 800b40a:	3101      	adds	r1, #1
 800b40c:	f000 f91a 	bl	800b644 <_Balloc>
 800b410:	4681      	mov	r9, r0
 800b412:	b918      	cbnz	r0, 800b41c <__gethex+0x424>
 800b414:	4b1a      	ldr	r3, [pc, #104]	; (800b480 <__gethex+0x488>)
 800b416:	4602      	mov	r2, r0
 800b418:	2184      	movs	r1, #132	; 0x84
 800b41a:	e6a8      	b.n	800b16e <__gethex+0x176>
 800b41c:	6922      	ldr	r2, [r4, #16]
 800b41e:	3202      	adds	r2, #2
 800b420:	f104 010c 	add.w	r1, r4, #12
 800b424:	0092      	lsls	r2, r2, #2
 800b426:	300c      	adds	r0, #12
 800b428:	f7fd f86a 	bl	8008500 <memcpy>
 800b42c:	4621      	mov	r1, r4
 800b42e:	ee18 0a10 	vmov	r0, s16
 800b432:	f000 f947 	bl	800b6c4 <_Bfree>
 800b436:	464c      	mov	r4, r9
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b440:	6122      	str	r2, [r4, #16]
 800b442:	2201      	movs	r2, #1
 800b444:	615a      	str	r2, [r3, #20]
 800b446:	e7bb      	b.n	800b3c0 <__gethex+0x3c8>
 800b448:	6922      	ldr	r2, [r4, #16]
 800b44a:	455a      	cmp	r2, fp
 800b44c:	dd0b      	ble.n	800b466 <__gethex+0x46e>
 800b44e:	2101      	movs	r1, #1
 800b450:	4620      	mov	r0, r4
 800b452:	f7ff fd69 	bl	800af28 <rshift>
 800b456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45a:	3501      	adds	r5, #1
 800b45c:	42ab      	cmp	r3, r5
 800b45e:	f6ff aed0 	blt.w	800b202 <__gethex+0x20a>
 800b462:	2701      	movs	r7, #1
 800b464:	e7c0      	b.n	800b3e8 <__gethex+0x3f0>
 800b466:	f016 061f 	ands.w	r6, r6, #31
 800b46a:	d0fa      	beq.n	800b462 <__gethex+0x46a>
 800b46c:	4453      	add	r3, sl
 800b46e:	f1c6 0620 	rsb	r6, r6, #32
 800b472:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b476:	f000 f9d7 	bl	800b828 <__hi0bits>
 800b47a:	42b0      	cmp	r0, r6
 800b47c:	dbe7      	blt.n	800b44e <__gethex+0x456>
 800b47e:	e7f0      	b.n	800b462 <__gethex+0x46a>
 800b480:	0800f1d9 	.word	0x0800f1d9

0800b484 <L_shift>:
 800b484:	f1c2 0208 	rsb	r2, r2, #8
 800b488:	0092      	lsls	r2, r2, #2
 800b48a:	b570      	push	{r4, r5, r6, lr}
 800b48c:	f1c2 0620 	rsb	r6, r2, #32
 800b490:	6843      	ldr	r3, [r0, #4]
 800b492:	6804      	ldr	r4, [r0, #0]
 800b494:	fa03 f506 	lsl.w	r5, r3, r6
 800b498:	432c      	orrs	r4, r5
 800b49a:	40d3      	lsrs	r3, r2
 800b49c:	6004      	str	r4, [r0, #0]
 800b49e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4a2:	4288      	cmp	r0, r1
 800b4a4:	d3f4      	bcc.n	800b490 <L_shift+0xc>
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}

0800b4a8 <__match>:
 800b4a8:	b530      	push	{r4, r5, lr}
 800b4aa:	6803      	ldr	r3, [r0, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b2:	b914      	cbnz	r4, 800b4ba <__match+0x12>
 800b4b4:	6003      	str	r3, [r0, #0]
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	bd30      	pop	{r4, r5, pc}
 800b4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4c2:	2d19      	cmp	r5, #25
 800b4c4:	bf98      	it	ls
 800b4c6:	3220      	addls	r2, #32
 800b4c8:	42a2      	cmp	r2, r4
 800b4ca:	d0f0      	beq.n	800b4ae <__match+0x6>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e7f3      	b.n	800b4b8 <__match+0x10>

0800b4d0 <__hexnan>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	115e      	asrs	r6, r3, #5
 800b4d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4dc:	f013 031f 	ands.w	r3, r3, #31
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	bf18      	it	ne
 800b4e4:	3604      	addne	r6, #4
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	1f37      	subs	r7, r6, #4
 800b4ea:	4690      	mov	r8, r2
 800b4ec:	6802      	ldr	r2, [r0, #0]
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4f6:	46b9      	mov	r9, r7
 800b4f8:	463c      	mov	r4, r7
 800b4fa:	9502      	str	r5, [sp, #8]
 800b4fc:	46ab      	mov	fp, r5
 800b4fe:	7851      	ldrb	r1, [r2, #1]
 800b500:	1c53      	adds	r3, r2, #1
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	b341      	cbz	r1, 800b558 <__hexnan+0x88>
 800b506:	4608      	mov	r0, r1
 800b508:	9205      	str	r2, [sp, #20]
 800b50a:	9104      	str	r1, [sp, #16]
 800b50c:	f7ff fd5e 	bl	800afcc <__hexdig_fun>
 800b510:	2800      	cmp	r0, #0
 800b512:	d14f      	bne.n	800b5b4 <__hexnan+0xe4>
 800b514:	9904      	ldr	r1, [sp, #16]
 800b516:	9a05      	ldr	r2, [sp, #20]
 800b518:	2920      	cmp	r1, #32
 800b51a:	d818      	bhi.n	800b54e <__hexnan+0x7e>
 800b51c:	9b02      	ldr	r3, [sp, #8]
 800b51e:	459b      	cmp	fp, r3
 800b520:	dd13      	ble.n	800b54a <__hexnan+0x7a>
 800b522:	454c      	cmp	r4, r9
 800b524:	d206      	bcs.n	800b534 <__hexnan+0x64>
 800b526:	2d07      	cmp	r5, #7
 800b528:	dc04      	bgt.n	800b534 <__hexnan+0x64>
 800b52a:	462a      	mov	r2, r5
 800b52c:	4649      	mov	r1, r9
 800b52e:	4620      	mov	r0, r4
 800b530:	f7ff ffa8 	bl	800b484 <L_shift>
 800b534:	4544      	cmp	r4, r8
 800b536:	d950      	bls.n	800b5da <__hexnan+0x10a>
 800b538:	2300      	movs	r3, #0
 800b53a:	f1a4 0904 	sub.w	r9, r4, #4
 800b53e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b542:	f8cd b008 	str.w	fp, [sp, #8]
 800b546:	464c      	mov	r4, r9
 800b548:	461d      	mov	r5, r3
 800b54a:	9a03      	ldr	r2, [sp, #12]
 800b54c:	e7d7      	b.n	800b4fe <__hexnan+0x2e>
 800b54e:	2929      	cmp	r1, #41	; 0x29
 800b550:	d156      	bne.n	800b600 <__hexnan+0x130>
 800b552:	3202      	adds	r2, #2
 800b554:	f8ca 2000 	str.w	r2, [sl]
 800b558:	f1bb 0f00 	cmp.w	fp, #0
 800b55c:	d050      	beq.n	800b600 <__hexnan+0x130>
 800b55e:	454c      	cmp	r4, r9
 800b560:	d206      	bcs.n	800b570 <__hexnan+0xa0>
 800b562:	2d07      	cmp	r5, #7
 800b564:	dc04      	bgt.n	800b570 <__hexnan+0xa0>
 800b566:	462a      	mov	r2, r5
 800b568:	4649      	mov	r1, r9
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff ff8a 	bl	800b484 <L_shift>
 800b570:	4544      	cmp	r4, r8
 800b572:	d934      	bls.n	800b5de <__hexnan+0x10e>
 800b574:	f1a8 0204 	sub.w	r2, r8, #4
 800b578:	4623      	mov	r3, r4
 800b57a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b57e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b582:	429f      	cmp	r7, r3
 800b584:	d2f9      	bcs.n	800b57a <__hexnan+0xaa>
 800b586:	1b3b      	subs	r3, r7, r4
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	3304      	adds	r3, #4
 800b58e:	3401      	adds	r4, #1
 800b590:	3e03      	subs	r6, #3
 800b592:	42b4      	cmp	r4, r6
 800b594:	bf88      	it	hi
 800b596:	2304      	movhi	r3, #4
 800b598:	4443      	add	r3, r8
 800b59a:	2200      	movs	r2, #0
 800b59c:	f843 2b04 	str.w	r2, [r3], #4
 800b5a0:	429f      	cmp	r7, r3
 800b5a2:	d2fb      	bcs.n	800b59c <__hexnan+0xcc>
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	b91b      	cbnz	r3, 800b5b0 <__hexnan+0xe0>
 800b5a8:	4547      	cmp	r7, r8
 800b5aa:	d127      	bne.n	800b5fc <__hexnan+0x12c>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	2005      	movs	r0, #5
 800b5b2:	e026      	b.n	800b602 <__hexnan+0x132>
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	2d08      	cmp	r5, #8
 800b5b8:	f10b 0b01 	add.w	fp, fp, #1
 800b5bc:	dd06      	ble.n	800b5cc <__hexnan+0xfc>
 800b5be:	4544      	cmp	r4, r8
 800b5c0:	d9c3      	bls.n	800b54a <__hexnan+0x7a>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5c8:	2501      	movs	r5, #1
 800b5ca:	3c04      	subs	r4, #4
 800b5cc:	6822      	ldr	r2, [r4, #0]
 800b5ce:	f000 000f 	and.w	r0, r0, #15
 800b5d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b5d6:	6022      	str	r2, [r4, #0]
 800b5d8:	e7b7      	b.n	800b54a <__hexnan+0x7a>
 800b5da:	2508      	movs	r5, #8
 800b5dc:	e7b5      	b.n	800b54a <__hexnan+0x7a>
 800b5de:	9b01      	ldr	r3, [sp, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0df      	beq.n	800b5a4 <__hexnan+0xd4>
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	f1c3 0320 	rsb	r3, r3, #32
 800b5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5f4:	401a      	ands	r2, r3
 800b5f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b5fa:	e7d3      	b.n	800b5a4 <__hexnan+0xd4>
 800b5fc:	3f04      	subs	r7, #4
 800b5fe:	e7d1      	b.n	800b5a4 <__hexnan+0xd4>
 800b600:	2004      	movs	r0, #4
 800b602:	b007      	add	sp, #28
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b608 <_localeconv_r>:
 800b608:	4800      	ldr	r0, [pc, #0]	; (800b60c <_localeconv_r+0x4>)
 800b60a:	4770      	bx	lr
 800b60c:	200001d4 	.word	0x200001d4

0800b610 <malloc>:
 800b610:	4b02      	ldr	r3, [pc, #8]	; (800b61c <malloc+0xc>)
 800b612:	4601      	mov	r1, r0
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	f000 bd59 	b.w	800c0cc <_malloc_r>
 800b61a:	bf00      	nop
 800b61c:	2000007c 	.word	0x2000007c

0800b620 <__ascii_mbtowc>:
 800b620:	b082      	sub	sp, #8
 800b622:	b901      	cbnz	r1, 800b626 <__ascii_mbtowc+0x6>
 800b624:	a901      	add	r1, sp, #4
 800b626:	b142      	cbz	r2, 800b63a <__ascii_mbtowc+0x1a>
 800b628:	b14b      	cbz	r3, 800b63e <__ascii_mbtowc+0x1e>
 800b62a:	7813      	ldrb	r3, [r2, #0]
 800b62c:	600b      	str	r3, [r1, #0]
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	1e10      	subs	r0, r2, #0
 800b632:	bf18      	it	ne
 800b634:	2001      	movne	r0, #1
 800b636:	b002      	add	sp, #8
 800b638:	4770      	bx	lr
 800b63a:	4610      	mov	r0, r2
 800b63c:	e7fb      	b.n	800b636 <__ascii_mbtowc+0x16>
 800b63e:	f06f 0001 	mvn.w	r0, #1
 800b642:	e7f8      	b.n	800b636 <__ascii_mbtowc+0x16>

0800b644 <_Balloc>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b648:	4604      	mov	r4, r0
 800b64a:	460d      	mov	r5, r1
 800b64c:	b976      	cbnz	r6, 800b66c <_Balloc+0x28>
 800b64e:	2010      	movs	r0, #16
 800b650:	f7ff ffde 	bl	800b610 <malloc>
 800b654:	4602      	mov	r2, r0
 800b656:	6260      	str	r0, [r4, #36]	; 0x24
 800b658:	b920      	cbnz	r0, 800b664 <_Balloc+0x20>
 800b65a:	4b18      	ldr	r3, [pc, #96]	; (800b6bc <_Balloc+0x78>)
 800b65c:	4818      	ldr	r0, [pc, #96]	; (800b6c0 <_Balloc+0x7c>)
 800b65e:	2166      	movs	r1, #102	; 0x66
 800b660:	f7fe fdb6 	bl	800a1d0 <__assert_func>
 800b664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b668:	6006      	str	r6, [r0, #0]
 800b66a:	60c6      	str	r6, [r0, #12]
 800b66c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b66e:	68f3      	ldr	r3, [r6, #12]
 800b670:	b183      	cbz	r3, 800b694 <_Balloc+0x50>
 800b672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b67a:	b9b8      	cbnz	r0, 800b6ac <_Balloc+0x68>
 800b67c:	2101      	movs	r1, #1
 800b67e:	fa01 f605 	lsl.w	r6, r1, r5
 800b682:	1d72      	adds	r2, r6, #5
 800b684:	0092      	lsls	r2, r2, #2
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fc9d 	bl	800bfc6 <_calloc_r>
 800b68c:	b160      	cbz	r0, 800b6a8 <_Balloc+0x64>
 800b68e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b692:	e00e      	b.n	800b6b2 <_Balloc+0x6e>
 800b694:	2221      	movs	r2, #33	; 0x21
 800b696:	2104      	movs	r1, #4
 800b698:	4620      	mov	r0, r4
 800b69a:	f000 fc94 	bl	800bfc6 <_calloc_r>
 800b69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a0:	60f0      	str	r0, [r6, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e4      	bne.n	800b672 <_Balloc+0x2e>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	6802      	ldr	r2, [r0, #0]
 800b6ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6b8:	e7f7      	b.n	800b6aa <_Balloc+0x66>
 800b6ba:	bf00      	nop
 800b6bc:	0800efc0 	.word	0x0800efc0
 800b6c0:	0800f264 	.word	0x0800f264

0800b6c4 <_Bfree>:
 800b6c4:	b570      	push	{r4, r5, r6, lr}
 800b6c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b976      	cbnz	r6, 800b6ec <_Bfree+0x28>
 800b6ce:	2010      	movs	r0, #16
 800b6d0:	f7ff ff9e 	bl	800b610 <malloc>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	6268      	str	r0, [r5, #36]	; 0x24
 800b6d8:	b920      	cbnz	r0, 800b6e4 <_Bfree+0x20>
 800b6da:	4b09      	ldr	r3, [pc, #36]	; (800b700 <_Bfree+0x3c>)
 800b6dc:	4809      	ldr	r0, [pc, #36]	; (800b704 <_Bfree+0x40>)
 800b6de:	218a      	movs	r1, #138	; 0x8a
 800b6e0:	f7fe fd76 	bl	800a1d0 <__assert_func>
 800b6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e8:	6006      	str	r6, [r0, #0]
 800b6ea:	60c6      	str	r6, [r0, #12]
 800b6ec:	b13c      	cbz	r4, 800b6fe <_Bfree+0x3a>
 800b6ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6f8:	6021      	str	r1, [r4, #0]
 800b6fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	0800efc0 	.word	0x0800efc0
 800b704:	0800f264 	.word	0x0800f264

0800b708 <__multadd>:
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	690d      	ldr	r5, [r1, #16]
 800b70e:	4607      	mov	r7, r0
 800b710:	460c      	mov	r4, r1
 800b712:	461e      	mov	r6, r3
 800b714:	f101 0c14 	add.w	ip, r1, #20
 800b718:	2000      	movs	r0, #0
 800b71a:	f8dc 3000 	ldr.w	r3, [ip]
 800b71e:	b299      	uxth	r1, r3
 800b720:	fb02 6101 	mla	r1, r2, r1, r6
 800b724:	0c1e      	lsrs	r6, r3, #16
 800b726:	0c0b      	lsrs	r3, r1, #16
 800b728:	fb02 3306 	mla	r3, r2, r6, r3
 800b72c:	b289      	uxth	r1, r1
 800b72e:	3001      	adds	r0, #1
 800b730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b734:	4285      	cmp	r5, r0
 800b736:	f84c 1b04 	str.w	r1, [ip], #4
 800b73a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b73e:	dcec      	bgt.n	800b71a <__multadd+0x12>
 800b740:	b30e      	cbz	r6, 800b786 <__multadd+0x7e>
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	42ab      	cmp	r3, r5
 800b746:	dc19      	bgt.n	800b77c <__multadd+0x74>
 800b748:	6861      	ldr	r1, [r4, #4]
 800b74a:	4638      	mov	r0, r7
 800b74c:	3101      	adds	r1, #1
 800b74e:	f7ff ff79 	bl	800b644 <_Balloc>
 800b752:	4680      	mov	r8, r0
 800b754:	b928      	cbnz	r0, 800b762 <__multadd+0x5a>
 800b756:	4602      	mov	r2, r0
 800b758:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <__multadd+0x84>)
 800b75a:	480d      	ldr	r0, [pc, #52]	; (800b790 <__multadd+0x88>)
 800b75c:	21b5      	movs	r1, #181	; 0xb5
 800b75e:	f7fe fd37 	bl	800a1d0 <__assert_func>
 800b762:	6922      	ldr	r2, [r4, #16]
 800b764:	3202      	adds	r2, #2
 800b766:	f104 010c 	add.w	r1, r4, #12
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	300c      	adds	r0, #12
 800b76e:	f7fc fec7 	bl	8008500 <memcpy>
 800b772:	4621      	mov	r1, r4
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff ffa5 	bl	800b6c4 <_Bfree>
 800b77a:	4644      	mov	r4, r8
 800b77c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b780:	3501      	adds	r5, #1
 800b782:	615e      	str	r6, [r3, #20]
 800b784:	6125      	str	r5, [r4, #16]
 800b786:	4620      	mov	r0, r4
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78c:	0800f1d9 	.word	0x0800f1d9
 800b790:	0800f264 	.word	0x0800f264

0800b794 <__s2b>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	460c      	mov	r4, r1
 800b79a:	4615      	mov	r5, r2
 800b79c:	461f      	mov	r7, r3
 800b79e:	2209      	movs	r2, #9
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	db09      	blt.n	800b7c4 <__s2b+0x30>
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7ff ff47 	bl	800b644 <_Balloc>
 800b7b6:	b940      	cbnz	r0, 800b7ca <__s2b+0x36>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <__s2b+0x8c>)
 800b7bc:	4819      	ldr	r0, [pc, #100]	; (800b824 <__s2b+0x90>)
 800b7be:	21ce      	movs	r1, #206	; 0xce
 800b7c0:	f7fe fd06 	bl	800a1d0 <__assert_func>
 800b7c4:	0052      	lsls	r2, r2, #1
 800b7c6:	3101      	adds	r1, #1
 800b7c8:	e7f0      	b.n	800b7ac <__s2b+0x18>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	6143      	str	r3, [r0, #20]
 800b7ce:	2d09      	cmp	r5, #9
 800b7d0:	f04f 0301 	mov.w	r3, #1
 800b7d4:	6103      	str	r3, [r0, #16]
 800b7d6:	dd16      	ble.n	800b806 <__s2b+0x72>
 800b7d8:	f104 0909 	add.w	r9, r4, #9
 800b7dc:	46c8      	mov	r8, r9
 800b7de:	442c      	add	r4, r5
 800b7e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	3b30      	subs	r3, #48	; 0x30
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ff8c 	bl	800b708 <__multadd>
 800b7f0:	45a0      	cmp	r8, r4
 800b7f2:	d1f5      	bne.n	800b7e0 <__s2b+0x4c>
 800b7f4:	f1a5 0408 	sub.w	r4, r5, #8
 800b7f8:	444c      	add	r4, r9
 800b7fa:	1b2d      	subs	r5, r5, r4
 800b7fc:	1963      	adds	r3, r4, r5
 800b7fe:	42bb      	cmp	r3, r7
 800b800:	db04      	blt.n	800b80c <__s2b+0x78>
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	340a      	adds	r4, #10
 800b808:	2509      	movs	r5, #9
 800b80a:	e7f6      	b.n	800b7fa <__s2b+0x66>
 800b80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b810:	4601      	mov	r1, r0
 800b812:	3b30      	subs	r3, #48	; 0x30
 800b814:	220a      	movs	r2, #10
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ff76 	bl	800b708 <__multadd>
 800b81c:	e7ee      	b.n	800b7fc <__s2b+0x68>
 800b81e:	bf00      	nop
 800b820:	0800f1d9 	.word	0x0800f1d9
 800b824:	0800f264 	.word	0x0800f264

0800b828 <__hi0bits>:
 800b828:	0c03      	lsrs	r3, r0, #16
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	b9d3      	cbnz	r3, 800b864 <__hi0bits+0x3c>
 800b82e:	0400      	lsls	r0, r0, #16
 800b830:	2310      	movs	r3, #16
 800b832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b836:	bf04      	itt	eq
 800b838:	0200      	lsleq	r0, r0, #8
 800b83a:	3308      	addeq	r3, #8
 800b83c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b840:	bf04      	itt	eq
 800b842:	0100      	lsleq	r0, r0, #4
 800b844:	3304      	addeq	r3, #4
 800b846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b84a:	bf04      	itt	eq
 800b84c:	0080      	lsleq	r0, r0, #2
 800b84e:	3302      	addeq	r3, #2
 800b850:	2800      	cmp	r0, #0
 800b852:	db05      	blt.n	800b860 <__hi0bits+0x38>
 800b854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b858:	f103 0301 	add.w	r3, r3, #1
 800b85c:	bf08      	it	eq
 800b85e:	2320      	moveq	r3, #32
 800b860:	4618      	mov	r0, r3
 800b862:	4770      	bx	lr
 800b864:	2300      	movs	r3, #0
 800b866:	e7e4      	b.n	800b832 <__hi0bits+0xa>

0800b868 <__lo0bits>:
 800b868:	6803      	ldr	r3, [r0, #0]
 800b86a:	f013 0207 	ands.w	r2, r3, #7
 800b86e:	4601      	mov	r1, r0
 800b870:	d00b      	beq.n	800b88a <__lo0bits+0x22>
 800b872:	07da      	lsls	r2, r3, #31
 800b874:	d423      	bmi.n	800b8be <__lo0bits+0x56>
 800b876:	0798      	lsls	r0, r3, #30
 800b878:	bf49      	itett	mi
 800b87a:	085b      	lsrmi	r3, r3, #1
 800b87c:	089b      	lsrpl	r3, r3, #2
 800b87e:	2001      	movmi	r0, #1
 800b880:	600b      	strmi	r3, [r1, #0]
 800b882:	bf5c      	itt	pl
 800b884:	600b      	strpl	r3, [r1, #0]
 800b886:	2002      	movpl	r0, #2
 800b888:	4770      	bx	lr
 800b88a:	b298      	uxth	r0, r3
 800b88c:	b9a8      	cbnz	r0, 800b8ba <__lo0bits+0x52>
 800b88e:	0c1b      	lsrs	r3, r3, #16
 800b890:	2010      	movs	r0, #16
 800b892:	b2da      	uxtb	r2, r3
 800b894:	b90a      	cbnz	r2, 800b89a <__lo0bits+0x32>
 800b896:	3008      	adds	r0, #8
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	071a      	lsls	r2, r3, #28
 800b89c:	bf04      	itt	eq
 800b89e:	091b      	lsreq	r3, r3, #4
 800b8a0:	3004      	addeq	r0, #4
 800b8a2:	079a      	lsls	r2, r3, #30
 800b8a4:	bf04      	itt	eq
 800b8a6:	089b      	lsreq	r3, r3, #2
 800b8a8:	3002      	addeq	r0, #2
 800b8aa:	07da      	lsls	r2, r3, #31
 800b8ac:	d403      	bmi.n	800b8b6 <__lo0bits+0x4e>
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	f100 0001 	add.w	r0, r0, #1
 800b8b4:	d005      	beq.n	800b8c2 <__lo0bits+0x5a>
 800b8b6:	600b      	str	r3, [r1, #0]
 800b8b8:	4770      	bx	lr
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	e7e9      	b.n	800b892 <__lo0bits+0x2a>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	4770      	bx	lr
 800b8c2:	2020      	movs	r0, #32
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <__i2b>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	f7ff feb9 	bl	800b644 <_Balloc>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	b928      	cbnz	r0, 800b8e2 <__i2b+0x1a>
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <__i2b+0x24>)
 800b8d8:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <__i2b+0x28>)
 800b8da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8de:	f7fe fc77 	bl	800a1d0 <__assert_func>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	6144      	str	r4, [r0, #20]
 800b8e6:	6103      	str	r3, [r0, #16]
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	bf00      	nop
 800b8ec:	0800f1d9 	.word	0x0800f1d9
 800b8f0:	0800f264 	.word	0x0800f264

0800b8f4 <__multiply>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4691      	mov	r9, r2
 800b8fa:	690a      	ldr	r2, [r1, #16]
 800b8fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b900:	429a      	cmp	r2, r3
 800b902:	bfb8      	it	lt
 800b904:	460b      	movlt	r3, r1
 800b906:	460c      	mov	r4, r1
 800b908:	bfbc      	itt	lt
 800b90a:	464c      	movlt	r4, r9
 800b90c:	4699      	movlt	r9, r3
 800b90e:	6927      	ldr	r7, [r4, #16]
 800b910:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b914:	68a3      	ldr	r3, [r4, #8]
 800b916:	6861      	ldr	r1, [r4, #4]
 800b918:	eb07 060a 	add.w	r6, r7, sl
 800b91c:	42b3      	cmp	r3, r6
 800b91e:	b085      	sub	sp, #20
 800b920:	bfb8      	it	lt
 800b922:	3101      	addlt	r1, #1
 800b924:	f7ff fe8e 	bl	800b644 <_Balloc>
 800b928:	b930      	cbnz	r0, 800b938 <__multiply+0x44>
 800b92a:	4602      	mov	r2, r0
 800b92c:	4b44      	ldr	r3, [pc, #272]	; (800ba40 <__multiply+0x14c>)
 800b92e:	4845      	ldr	r0, [pc, #276]	; (800ba44 <__multiply+0x150>)
 800b930:	f240 115d 	movw	r1, #349	; 0x15d
 800b934:	f7fe fc4c 	bl	800a1d0 <__assert_func>
 800b938:	f100 0514 	add.w	r5, r0, #20
 800b93c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b940:	462b      	mov	r3, r5
 800b942:	2200      	movs	r2, #0
 800b944:	4543      	cmp	r3, r8
 800b946:	d321      	bcc.n	800b98c <__multiply+0x98>
 800b948:	f104 0314 	add.w	r3, r4, #20
 800b94c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b950:	f109 0314 	add.w	r3, r9, #20
 800b954:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b958:	9202      	str	r2, [sp, #8]
 800b95a:	1b3a      	subs	r2, r7, r4
 800b95c:	3a15      	subs	r2, #21
 800b95e:	f022 0203 	bic.w	r2, r2, #3
 800b962:	3204      	adds	r2, #4
 800b964:	f104 0115 	add.w	r1, r4, #21
 800b968:	428f      	cmp	r7, r1
 800b96a:	bf38      	it	cc
 800b96c:	2204      	movcc	r2, #4
 800b96e:	9201      	str	r2, [sp, #4]
 800b970:	9a02      	ldr	r2, [sp, #8]
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d80c      	bhi.n	800b992 <__multiply+0x9e>
 800b978:	2e00      	cmp	r6, #0
 800b97a:	dd03      	ble.n	800b984 <__multiply+0x90>
 800b97c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b980:	2b00      	cmp	r3, #0
 800b982:	d05a      	beq.n	800ba3a <__multiply+0x146>
 800b984:	6106      	str	r6, [r0, #16]
 800b986:	b005      	add	sp, #20
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	f843 2b04 	str.w	r2, [r3], #4
 800b990:	e7d8      	b.n	800b944 <__multiply+0x50>
 800b992:	f8b3 a000 	ldrh.w	sl, [r3]
 800b996:	f1ba 0f00 	cmp.w	sl, #0
 800b99a:	d024      	beq.n	800b9e6 <__multiply+0xf2>
 800b99c:	f104 0e14 	add.w	lr, r4, #20
 800b9a0:	46a9      	mov	r9, r5
 800b9a2:	f04f 0c00 	mov.w	ip, #0
 800b9a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9aa:	f8d9 1000 	ldr.w	r1, [r9]
 800b9ae:	fa1f fb82 	uxth.w	fp, r2
 800b9b2:	b289      	uxth	r1, r1
 800b9b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b9c0:	4461      	add	r1, ip
 800b9c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9ce:	b289      	uxth	r1, r1
 800b9d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9d4:	4577      	cmp	r7, lr
 800b9d6:	f849 1b04 	str.w	r1, [r9], #4
 800b9da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9de:	d8e2      	bhi.n	800b9a6 <__multiply+0xb2>
 800b9e0:	9a01      	ldr	r2, [sp, #4]
 800b9e2:	f845 c002 	str.w	ip, [r5, r2]
 800b9e6:	9a03      	ldr	r2, [sp, #12]
 800b9e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	f1b9 0f00 	cmp.w	r9, #0
 800b9f2:	d020      	beq.n	800ba36 <__multiply+0x142>
 800b9f4:	6829      	ldr	r1, [r5, #0]
 800b9f6:	f104 0c14 	add.w	ip, r4, #20
 800b9fa:	46ae      	mov	lr, r5
 800b9fc:	f04f 0a00 	mov.w	sl, #0
 800ba00:	f8bc b000 	ldrh.w	fp, [ip]
 800ba04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba08:	fb09 220b 	mla	r2, r9, fp, r2
 800ba0c:	4492      	add	sl, r2
 800ba0e:	b289      	uxth	r1, r1
 800ba10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba14:	f84e 1b04 	str.w	r1, [lr], #4
 800ba18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba20:	0c12      	lsrs	r2, r2, #16
 800ba22:	fb09 1102 	mla	r1, r9, r2, r1
 800ba26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba2a:	4567      	cmp	r7, ip
 800ba2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba30:	d8e6      	bhi.n	800ba00 <__multiply+0x10c>
 800ba32:	9a01      	ldr	r2, [sp, #4]
 800ba34:	50a9      	str	r1, [r5, r2]
 800ba36:	3504      	adds	r5, #4
 800ba38:	e79a      	b.n	800b970 <__multiply+0x7c>
 800ba3a:	3e01      	subs	r6, #1
 800ba3c:	e79c      	b.n	800b978 <__multiply+0x84>
 800ba3e:	bf00      	nop
 800ba40:	0800f1d9 	.word	0x0800f1d9
 800ba44:	0800f264 	.word	0x0800f264

0800ba48 <__pow5mult>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	4615      	mov	r5, r2
 800ba4e:	f012 0203 	ands.w	r2, r2, #3
 800ba52:	4606      	mov	r6, r0
 800ba54:	460f      	mov	r7, r1
 800ba56:	d007      	beq.n	800ba68 <__pow5mult+0x20>
 800ba58:	4c25      	ldr	r4, [pc, #148]	; (800baf0 <__pow5mult+0xa8>)
 800ba5a:	3a01      	subs	r2, #1
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba62:	f7ff fe51 	bl	800b708 <__multadd>
 800ba66:	4607      	mov	r7, r0
 800ba68:	10ad      	asrs	r5, r5, #2
 800ba6a:	d03d      	beq.n	800bae8 <__pow5mult+0xa0>
 800ba6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba6e:	b97c      	cbnz	r4, 800ba90 <__pow5mult+0x48>
 800ba70:	2010      	movs	r0, #16
 800ba72:	f7ff fdcd 	bl	800b610 <malloc>
 800ba76:	4602      	mov	r2, r0
 800ba78:	6270      	str	r0, [r6, #36]	; 0x24
 800ba7a:	b928      	cbnz	r0, 800ba88 <__pow5mult+0x40>
 800ba7c:	4b1d      	ldr	r3, [pc, #116]	; (800baf4 <__pow5mult+0xac>)
 800ba7e:	481e      	ldr	r0, [pc, #120]	; (800baf8 <__pow5mult+0xb0>)
 800ba80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba84:	f7fe fba4 	bl	800a1d0 <__assert_func>
 800ba88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba8c:	6004      	str	r4, [r0, #0]
 800ba8e:	60c4      	str	r4, [r0, #12]
 800ba90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba98:	b94c      	cbnz	r4, 800baae <__pow5mult+0x66>
 800ba9a:	f240 2171 	movw	r1, #625	; 0x271
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7ff ff12 	bl	800b8c8 <__i2b>
 800baa4:	2300      	movs	r3, #0
 800baa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800baaa:	4604      	mov	r4, r0
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	f04f 0900 	mov.w	r9, #0
 800bab2:	07eb      	lsls	r3, r5, #31
 800bab4:	d50a      	bpl.n	800bacc <__pow5mult+0x84>
 800bab6:	4639      	mov	r1, r7
 800bab8:	4622      	mov	r2, r4
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff ff1a 	bl	800b8f4 <__multiply>
 800bac0:	4639      	mov	r1, r7
 800bac2:	4680      	mov	r8, r0
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7ff fdfd 	bl	800b6c4 <_Bfree>
 800baca:	4647      	mov	r7, r8
 800bacc:	106d      	asrs	r5, r5, #1
 800bace:	d00b      	beq.n	800bae8 <__pow5mult+0xa0>
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	b938      	cbnz	r0, 800bae4 <__pow5mult+0x9c>
 800bad4:	4622      	mov	r2, r4
 800bad6:	4621      	mov	r1, r4
 800bad8:	4630      	mov	r0, r6
 800bada:	f7ff ff0b 	bl	800b8f4 <__multiply>
 800bade:	6020      	str	r0, [r4, #0]
 800bae0:	f8c0 9000 	str.w	r9, [r0]
 800bae4:	4604      	mov	r4, r0
 800bae6:	e7e4      	b.n	800bab2 <__pow5mult+0x6a>
 800bae8:	4638      	mov	r0, r7
 800baea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baee:	bf00      	nop
 800baf0:	0800f3b0 	.word	0x0800f3b0
 800baf4:	0800efc0 	.word	0x0800efc0
 800baf8:	0800f264 	.word	0x0800f264

0800bafc <__lshift>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	460c      	mov	r4, r1
 800bb02:	6849      	ldr	r1, [r1, #4]
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	4691      	mov	r9, r2
 800bb10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb14:	f108 0601 	add.w	r6, r8, #1
 800bb18:	42b3      	cmp	r3, r6
 800bb1a:	db0b      	blt.n	800bb34 <__lshift+0x38>
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff fd91 	bl	800b644 <_Balloc>
 800bb22:	4605      	mov	r5, r0
 800bb24:	b948      	cbnz	r0, 800bb3a <__lshift+0x3e>
 800bb26:	4602      	mov	r2, r0
 800bb28:	4b2a      	ldr	r3, [pc, #168]	; (800bbd4 <__lshift+0xd8>)
 800bb2a:	482b      	ldr	r0, [pc, #172]	; (800bbd8 <__lshift+0xdc>)
 800bb2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb30:	f7fe fb4e 	bl	800a1d0 <__assert_func>
 800bb34:	3101      	adds	r1, #1
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	e7ee      	b.n	800bb18 <__lshift+0x1c>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f100 0114 	add.w	r1, r0, #20
 800bb40:	f100 0210 	add.w	r2, r0, #16
 800bb44:	4618      	mov	r0, r3
 800bb46:	4553      	cmp	r3, sl
 800bb48:	db37      	blt.n	800bbba <__lshift+0xbe>
 800bb4a:	6920      	ldr	r0, [r4, #16]
 800bb4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb50:	f104 0314 	add.w	r3, r4, #20
 800bb54:	f019 091f 	ands.w	r9, r9, #31
 800bb58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb60:	d02f      	beq.n	800bbc2 <__lshift+0xc6>
 800bb62:	f1c9 0e20 	rsb	lr, r9, #32
 800bb66:	468a      	mov	sl, r1
 800bb68:	f04f 0c00 	mov.w	ip, #0
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	fa02 f209 	lsl.w	r2, r2, r9
 800bb72:	ea42 020c 	orr.w	r2, r2, ip
 800bb76:	f84a 2b04 	str.w	r2, [sl], #4
 800bb7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7e:	4298      	cmp	r0, r3
 800bb80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb84:	d8f2      	bhi.n	800bb6c <__lshift+0x70>
 800bb86:	1b03      	subs	r3, r0, r4
 800bb88:	3b15      	subs	r3, #21
 800bb8a:	f023 0303 	bic.w	r3, r3, #3
 800bb8e:	3304      	adds	r3, #4
 800bb90:	f104 0215 	add.w	r2, r4, #21
 800bb94:	4290      	cmp	r0, r2
 800bb96:	bf38      	it	cc
 800bb98:	2304      	movcc	r3, #4
 800bb9a:	f841 c003 	str.w	ip, [r1, r3]
 800bb9e:	f1bc 0f00 	cmp.w	ip, #0
 800bba2:	d001      	beq.n	800bba8 <__lshift+0xac>
 800bba4:	f108 0602 	add.w	r6, r8, #2
 800bba8:	3e01      	subs	r6, #1
 800bbaa:	4638      	mov	r0, r7
 800bbac:	612e      	str	r6, [r5, #16]
 800bbae:	4621      	mov	r1, r4
 800bbb0:	f7ff fd88 	bl	800b6c4 <_Bfree>
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	e7c1      	b.n	800bb46 <__lshift+0x4a>
 800bbc2:	3904      	subs	r1, #4
 800bbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbcc:	4298      	cmp	r0, r3
 800bbce:	d8f9      	bhi.n	800bbc4 <__lshift+0xc8>
 800bbd0:	e7ea      	b.n	800bba8 <__lshift+0xac>
 800bbd2:	bf00      	nop
 800bbd4:	0800f1d9 	.word	0x0800f1d9
 800bbd8:	0800f264 	.word	0x0800f264

0800bbdc <__mcmp>:
 800bbdc:	b530      	push	{r4, r5, lr}
 800bbde:	6902      	ldr	r2, [r0, #16]
 800bbe0:	690c      	ldr	r4, [r1, #16]
 800bbe2:	1b12      	subs	r2, r2, r4
 800bbe4:	d10e      	bne.n	800bc04 <__mcmp+0x28>
 800bbe6:	f100 0314 	add.w	r3, r0, #20
 800bbea:	3114      	adds	r1, #20
 800bbec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbfc:	42a5      	cmp	r5, r4
 800bbfe:	d003      	beq.n	800bc08 <__mcmp+0x2c>
 800bc00:	d305      	bcc.n	800bc0e <__mcmp+0x32>
 800bc02:	2201      	movs	r2, #1
 800bc04:	4610      	mov	r0, r2
 800bc06:	bd30      	pop	{r4, r5, pc}
 800bc08:	4283      	cmp	r3, r0
 800bc0a:	d3f3      	bcc.n	800bbf4 <__mcmp+0x18>
 800bc0c:	e7fa      	b.n	800bc04 <__mcmp+0x28>
 800bc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc12:	e7f7      	b.n	800bc04 <__mcmp+0x28>

0800bc14 <__mdiff>:
 800bc14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	460c      	mov	r4, r1
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4690      	mov	r8, r2
 800bc22:	f7ff ffdb 	bl	800bbdc <__mcmp>
 800bc26:	1e05      	subs	r5, r0, #0
 800bc28:	d110      	bne.n	800bc4c <__mdiff+0x38>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff fd09 	bl	800b644 <_Balloc>
 800bc32:	b930      	cbnz	r0, 800bc42 <__mdiff+0x2e>
 800bc34:	4b3a      	ldr	r3, [pc, #232]	; (800bd20 <__mdiff+0x10c>)
 800bc36:	4602      	mov	r2, r0
 800bc38:	f240 2132 	movw	r1, #562	; 0x232
 800bc3c:	4839      	ldr	r0, [pc, #228]	; (800bd24 <__mdiff+0x110>)
 800bc3e:	f7fe fac7 	bl	800a1d0 <__assert_func>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	bfa4      	itt	ge
 800bc4e:	4643      	movge	r3, r8
 800bc50:	46a0      	movge	r8, r4
 800bc52:	4630      	mov	r0, r6
 800bc54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc58:	bfa6      	itte	ge
 800bc5a:	461c      	movge	r4, r3
 800bc5c:	2500      	movge	r5, #0
 800bc5e:	2501      	movlt	r5, #1
 800bc60:	f7ff fcf0 	bl	800b644 <_Balloc>
 800bc64:	b920      	cbnz	r0, 800bc70 <__mdiff+0x5c>
 800bc66:	4b2e      	ldr	r3, [pc, #184]	; (800bd20 <__mdiff+0x10c>)
 800bc68:	4602      	mov	r2, r0
 800bc6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc6e:	e7e5      	b.n	800bc3c <__mdiff+0x28>
 800bc70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc74:	6926      	ldr	r6, [r4, #16]
 800bc76:	60c5      	str	r5, [r0, #12]
 800bc78:	f104 0914 	add.w	r9, r4, #20
 800bc7c:	f108 0514 	add.w	r5, r8, #20
 800bc80:	f100 0e14 	add.w	lr, r0, #20
 800bc84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc8c:	f108 0210 	add.w	r2, r8, #16
 800bc90:	46f2      	mov	sl, lr
 800bc92:	2100      	movs	r1, #0
 800bc94:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc9c:	fa1f f883 	uxth.w	r8, r3
 800bca0:	fa11 f18b 	uxtah	r1, r1, fp
 800bca4:	0c1b      	lsrs	r3, r3, #16
 800bca6:	eba1 0808 	sub.w	r8, r1, r8
 800bcaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcb2:	fa1f f888 	uxth.w	r8, r8
 800bcb6:	1419      	asrs	r1, r3, #16
 800bcb8:	454e      	cmp	r6, r9
 800bcba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcbe:	f84a 3b04 	str.w	r3, [sl], #4
 800bcc2:	d8e7      	bhi.n	800bc94 <__mdiff+0x80>
 800bcc4:	1b33      	subs	r3, r6, r4
 800bcc6:	3b15      	subs	r3, #21
 800bcc8:	f023 0303 	bic.w	r3, r3, #3
 800bccc:	3304      	adds	r3, #4
 800bcce:	3415      	adds	r4, #21
 800bcd0:	42a6      	cmp	r6, r4
 800bcd2:	bf38      	it	cc
 800bcd4:	2304      	movcc	r3, #4
 800bcd6:	441d      	add	r5, r3
 800bcd8:	4473      	add	r3, lr
 800bcda:	469e      	mov	lr, r3
 800bcdc:	462e      	mov	r6, r5
 800bcde:	4566      	cmp	r6, ip
 800bce0:	d30e      	bcc.n	800bd00 <__mdiff+0xec>
 800bce2:	f10c 0203 	add.w	r2, ip, #3
 800bce6:	1b52      	subs	r2, r2, r5
 800bce8:	f022 0203 	bic.w	r2, r2, #3
 800bcec:	3d03      	subs	r5, #3
 800bcee:	45ac      	cmp	ip, r5
 800bcf0:	bf38      	it	cc
 800bcf2:	2200      	movcc	r2, #0
 800bcf4:	441a      	add	r2, r3
 800bcf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bcfa:	b17b      	cbz	r3, 800bd1c <__mdiff+0x108>
 800bcfc:	6107      	str	r7, [r0, #16]
 800bcfe:	e7a3      	b.n	800bc48 <__mdiff+0x34>
 800bd00:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd04:	fa11 f288 	uxtah	r2, r1, r8
 800bd08:	1414      	asrs	r4, r2, #16
 800bd0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd0e:	b292      	uxth	r2, r2
 800bd10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd14:	f84e 2b04 	str.w	r2, [lr], #4
 800bd18:	1421      	asrs	r1, r4, #16
 800bd1a:	e7e0      	b.n	800bcde <__mdiff+0xca>
 800bd1c:	3f01      	subs	r7, #1
 800bd1e:	e7ea      	b.n	800bcf6 <__mdiff+0xe2>
 800bd20:	0800f1d9 	.word	0x0800f1d9
 800bd24:	0800f264 	.word	0x0800f264

0800bd28 <__ulp>:
 800bd28:	b082      	sub	sp, #8
 800bd2a:	ed8d 0b00 	vstr	d0, [sp]
 800bd2e:	9b01      	ldr	r3, [sp, #4]
 800bd30:	4912      	ldr	r1, [pc, #72]	; (800bd7c <__ulp+0x54>)
 800bd32:	4019      	ands	r1, r3
 800bd34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	dd05      	ble.n	800bd48 <__ulp+0x20>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	ec43 2b10 	vmov	d0, r2, r3
 800bd44:	b002      	add	sp, #8
 800bd46:	4770      	bx	lr
 800bd48:	4249      	negs	r1, r1
 800bd4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd52:	f04f 0200 	mov.w	r2, #0
 800bd56:	f04f 0300 	mov.w	r3, #0
 800bd5a:	da04      	bge.n	800bd66 <__ulp+0x3e>
 800bd5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd60:	fa41 f300 	asr.w	r3, r1, r0
 800bd64:	e7ec      	b.n	800bd40 <__ulp+0x18>
 800bd66:	f1a0 0114 	sub.w	r1, r0, #20
 800bd6a:	291e      	cmp	r1, #30
 800bd6c:	bfda      	itte	le
 800bd6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd72:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd76:	2101      	movgt	r1, #1
 800bd78:	460a      	mov	r2, r1
 800bd7a:	e7e1      	b.n	800bd40 <__ulp+0x18>
 800bd7c:	7ff00000 	.word	0x7ff00000

0800bd80 <__b2d>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	6905      	ldr	r5, [r0, #16]
 800bd84:	f100 0714 	add.w	r7, r0, #20
 800bd88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd8c:	1f2e      	subs	r6, r5, #4
 800bd8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7ff fd48 	bl	800b828 <__hi0bits>
 800bd98:	f1c0 0320 	rsb	r3, r0, #32
 800bd9c:	280a      	cmp	r0, #10
 800bd9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be1c <__b2d+0x9c>
 800bda2:	600b      	str	r3, [r1, #0]
 800bda4:	dc14      	bgt.n	800bdd0 <__b2d+0x50>
 800bda6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdaa:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdae:	42b7      	cmp	r7, r6
 800bdb0:	ea41 030c 	orr.w	r3, r1, ip
 800bdb4:	bf34      	ite	cc
 800bdb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdba:	2100      	movcs	r1, #0
 800bdbc:	3015      	adds	r0, #21
 800bdbe:	fa04 f000 	lsl.w	r0, r4, r0
 800bdc2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bdc6:	ea40 0201 	orr.w	r2, r0, r1
 800bdca:	ec43 2b10 	vmov	d0, r2, r3
 800bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd0:	42b7      	cmp	r7, r6
 800bdd2:	bf3a      	itte	cc
 800bdd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdd8:	f1a5 0608 	subcc.w	r6, r5, #8
 800bddc:	2100      	movcs	r1, #0
 800bdde:	380b      	subs	r0, #11
 800bde0:	d017      	beq.n	800be12 <__b2d+0x92>
 800bde2:	f1c0 0c20 	rsb	ip, r0, #32
 800bde6:	fa04 f500 	lsl.w	r5, r4, r0
 800bdea:	42be      	cmp	r6, r7
 800bdec:	fa21 f40c 	lsr.w	r4, r1, ip
 800bdf0:	ea45 0504 	orr.w	r5, r5, r4
 800bdf4:	bf8c      	ite	hi
 800bdf6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bdfa:	2400      	movls	r4, #0
 800bdfc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be00:	fa01 f000 	lsl.w	r0, r1, r0
 800be04:	fa24 f40c 	lsr.w	r4, r4, ip
 800be08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be0c:	ea40 0204 	orr.w	r2, r0, r4
 800be10:	e7db      	b.n	800bdca <__b2d+0x4a>
 800be12:	ea44 030c 	orr.w	r3, r4, ip
 800be16:	460a      	mov	r2, r1
 800be18:	e7d7      	b.n	800bdca <__b2d+0x4a>
 800be1a:	bf00      	nop
 800be1c:	3ff00000 	.word	0x3ff00000

0800be20 <__d2b>:
 800be20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be24:	4689      	mov	r9, r1
 800be26:	2101      	movs	r1, #1
 800be28:	ec57 6b10 	vmov	r6, r7, d0
 800be2c:	4690      	mov	r8, r2
 800be2e:	f7ff fc09 	bl	800b644 <_Balloc>
 800be32:	4604      	mov	r4, r0
 800be34:	b930      	cbnz	r0, 800be44 <__d2b+0x24>
 800be36:	4602      	mov	r2, r0
 800be38:	4b25      	ldr	r3, [pc, #148]	; (800bed0 <__d2b+0xb0>)
 800be3a:	4826      	ldr	r0, [pc, #152]	; (800bed4 <__d2b+0xb4>)
 800be3c:	f240 310a 	movw	r1, #778	; 0x30a
 800be40:	f7fe f9c6 	bl	800a1d0 <__assert_func>
 800be44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be4c:	bb35      	cbnz	r5, 800be9c <__d2b+0x7c>
 800be4e:	2e00      	cmp	r6, #0
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	d028      	beq.n	800bea6 <__d2b+0x86>
 800be54:	4668      	mov	r0, sp
 800be56:	9600      	str	r6, [sp, #0]
 800be58:	f7ff fd06 	bl	800b868 <__lo0bits>
 800be5c:	9900      	ldr	r1, [sp, #0]
 800be5e:	b300      	cbz	r0, 800bea2 <__d2b+0x82>
 800be60:	9a01      	ldr	r2, [sp, #4]
 800be62:	f1c0 0320 	rsb	r3, r0, #32
 800be66:	fa02 f303 	lsl.w	r3, r2, r3
 800be6a:	430b      	orrs	r3, r1
 800be6c:	40c2      	lsrs	r2, r0
 800be6e:	6163      	str	r3, [r4, #20]
 800be70:	9201      	str	r2, [sp, #4]
 800be72:	9b01      	ldr	r3, [sp, #4]
 800be74:	61a3      	str	r3, [r4, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	bf14      	ite	ne
 800be7a:	2202      	movne	r2, #2
 800be7c:	2201      	moveq	r2, #1
 800be7e:	6122      	str	r2, [r4, #16]
 800be80:	b1d5      	cbz	r5, 800beb8 <__d2b+0x98>
 800be82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be86:	4405      	add	r5, r0
 800be88:	f8c9 5000 	str.w	r5, [r9]
 800be8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be90:	f8c8 0000 	str.w	r0, [r8]
 800be94:	4620      	mov	r0, r4
 800be96:	b003      	add	sp, #12
 800be98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea0:	e7d5      	b.n	800be4e <__d2b+0x2e>
 800bea2:	6161      	str	r1, [r4, #20]
 800bea4:	e7e5      	b.n	800be72 <__d2b+0x52>
 800bea6:	a801      	add	r0, sp, #4
 800bea8:	f7ff fcde 	bl	800b868 <__lo0bits>
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	6163      	str	r3, [r4, #20]
 800beb0:	2201      	movs	r2, #1
 800beb2:	6122      	str	r2, [r4, #16]
 800beb4:	3020      	adds	r0, #32
 800beb6:	e7e3      	b.n	800be80 <__d2b+0x60>
 800beb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bec0:	f8c9 0000 	str.w	r0, [r9]
 800bec4:	6918      	ldr	r0, [r3, #16]
 800bec6:	f7ff fcaf 	bl	800b828 <__hi0bits>
 800beca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bece:	e7df      	b.n	800be90 <__d2b+0x70>
 800bed0:	0800f1d9 	.word	0x0800f1d9
 800bed4:	0800f264 	.word	0x0800f264

0800bed8 <__ratio>:
 800bed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	4688      	mov	r8, r1
 800bede:	4669      	mov	r1, sp
 800bee0:	4681      	mov	r9, r0
 800bee2:	f7ff ff4d 	bl	800bd80 <__b2d>
 800bee6:	a901      	add	r1, sp, #4
 800bee8:	4640      	mov	r0, r8
 800beea:	ec55 4b10 	vmov	r4, r5, d0
 800beee:	f7ff ff47 	bl	800bd80 <__b2d>
 800bef2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bef6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800befa:	eba3 0c02 	sub.w	ip, r3, r2
 800befe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf02:	1a9b      	subs	r3, r3, r2
 800bf04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf08:	ec51 0b10 	vmov	r0, r1, d0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfd6      	itet	le
 800bf10:	460a      	movle	r2, r1
 800bf12:	462a      	movgt	r2, r5
 800bf14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf18:	468b      	mov	fp, r1
 800bf1a:	462f      	mov	r7, r5
 800bf1c:	bfd4      	ite	le
 800bf1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf26:	4620      	mov	r0, r4
 800bf28:	ee10 2a10 	vmov	r2, s0
 800bf2c:	465b      	mov	r3, fp
 800bf2e:	4639      	mov	r1, r7
 800bf30:	f7f4 fc9c 	bl	800086c <__aeabi_ddiv>
 800bf34:	ec41 0b10 	vmov	d0, r0, r1
 800bf38:	b003      	add	sp, #12
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf3e <__copybits>:
 800bf3e:	3901      	subs	r1, #1
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	1149      	asrs	r1, r1, #5
 800bf44:	6914      	ldr	r4, [r2, #16]
 800bf46:	3101      	adds	r1, #1
 800bf48:	f102 0314 	add.w	r3, r2, #20
 800bf4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf54:	1f05      	subs	r5, r0, #4
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	d30c      	bcc.n	800bf74 <__copybits+0x36>
 800bf5a:	1aa3      	subs	r3, r4, r2
 800bf5c:	3b11      	subs	r3, #17
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	3211      	adds	r2, #17
 800bf64:	42a2      	cmp	r2, r4
 800bf66:	bf88      	it	hi
 800bf68:	2300      	movhi	r3, #0
 800bf6a:	4418      	add	r0, r3
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4288      	cmp	r0, r1
 800bf70:	d305      	bcc.n	800bf7e <__copybits+0x40>
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf78:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf7c:	e7eb      	b.n	800bf56 <__copybits+0x18>
 800bf7e:	f840 3b04 	str.w	r3, [r0], #4
 800bf82:	e7f4      	b.n	800bf6e <__copybits+0x30>

0800bf84 <__any_on>:
 800bf84:	f100 0214 	add.w	r2, r0, #20
 800bf88:	6900      	ldr	r0, [r0, #16]
 800bf8a:	114b      	asrs	r3, r1, #5
 800bf8c:	4298      	cmp	r0, r3
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	db11      	blt.n	800bfb6 <__any_on+0x32>
 800bf92:	dd0a      	ble.n	800bfaa <__any_on+0x26>
 800bf94:	f011 011f 	ands.w	r1, r1, #31
 800bf98:	d007      	beq.n	800bfaa <__any_on+0x26>
 800bf9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf9e:	fa24 f001 	lsr.w	r0, r4, r1
 800bfa2:	fa00 f101 	lsl.w	r1, r0, r1
 800bfa6:	428c      	cmp	r4, r1
 800bfa8:	d10b      	bne.n	800bfc2 <__any_on+0x3e>
 800bfaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d803      	bhi.n	800bfba <__any_on+0x36>
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	e7f7      	b.n	800bfaa <__any_on+0x26>
 800bfba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	d0f5      	beq.n	800bfae <__any_on+0x2a>
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e7f6      	b.n	800bfb4 <__any_on+0x30>

0800bfc6 <_calloc_r>:
 800bfc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfc8:	fba1 2402 	umull	r2, r4, r1, r2
 800bfcc:	b94c      	cbnz	r4, 800bfe2 <_calloc_r+0x1c>
 800bfce:	4611      	mov	r1, r2
 800bfd0:	9201      	str	r2, [sp, #4]
 800bfd2:	f000 f87b 	bl	800c0cc <_malloc_r>
 800bfd6:	9a01      	ldr	r2, [sp, #4]
 800bfd8:	4605      	mov	r5, r0
 800bfda:	b930      	cbnz	r0, 800bfea <_calloc_r+0x24>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	b003      	add	sp, #12
 800bfe0:	bd30      	pop	{r4, r5, pc}
 800bfe2:	220c      	movs	r2, #12
 800bfe4:	6002      	str	r2, [r0, #0]
 800bfe6:	2500      	movs	r5, #0
 800bfe8:	e7f8      	b.n	800bfdc <_calloc_r+0x16>
 800bfea:	4621      	mov	r1, r4
 800bfec:	f7fc fa96 	bl	800851c <memset>
 800bff0:	e7f4      	b.n	800bfdc <_calloc_r+0x16>
	...

0800bff4 <_free_r>:
 800bff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bff6:	2900      	cmp	r1, #0
 800bff8:	d044      	beq.n	800c084 <_free_r+0x90>
 800bffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffe:	9001      	str	r0, [sp, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	f1a1 0404 	sub.w	r4, r1, #4
 800c006:	bfb8      	it	lt
 800c008:	18e4      	addlt	r4, r4, r3
 800c00a:	f000 fec5 	bl	800cd98 <__malloc_lock>
 800c00e:	4a1e      	ldr	r2, [pc, #120]	; (800c088 <_free_r+0x94>)
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	6813      	ldr	r3, [r2, #0]
 800c014:	b933      	cbnz	r3, 800c024 <_free_r+0x30>
 800c016:	6063      	str	r3, [r4, #4]
 800c018:	6014      	str	r4, [r2, #0]
 800c01a:	b003      	add	sp, #12
 800c01c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c020:	f000 bec0 	b.w	800cda4 <__malloc_unlock>
 800c024:	42a3      	cmp	r3, r4
 800c026:	d908      	bls.n	800c03a <_free_r+0x46>
 800c028:	6825      	ldr	r5, [r4, #0]
 800c02a:	1961      	adds	r1, r4, r5
 800c02c:	428b      	cmp	r3, r1
 800c02e:	bf01      	itttt	eq
 800c030:	6819      	ldreq	r1, [r3, #0]
 800c032:	685b      	ldreq	r3, [r3, #4]
 800c034:	1949      	addeq	r1, r1, r5
 800c036:	6021      	streq	r1, [r4, #0]
 800c038:	e7ed      	b.n	800c016 <_free_r+0x22>
 800c03a:	461a      	mov	r2, r3
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	b10b      	cbz	r3, 800c044 <_free_r+0x50>
 800c040:	42a3      	cmp	r3, r4
 800c042:	d9fa      	bls.n	800c03a <_free_r+0x46>
 800c044:	6811      	ldr	r1, [r2, #0]
 800c046:	1855      	adds	r5, r2, r1
 800c048:	42a5      	cmp	r5, r4
 800c04a:	d10b      	bne.n	800c064 <_free_r+0x70>
 800c04c:	6824      	ldr	r4, [r4, #0]
 800c04e:	4421      	add	r1, r4
 800c050:	1854      	adds	r4, r2, r1
 800c052:	42a3      	cmp	r3, r4
 800c054:	6011      	str	r1, [r2, #0]
 800c056:	d1e0      	bne.n	800c01a <_free_r+0x26>
 800c058:	681c      	ldr	r4, [r3, #0]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	6053      	str	r3, [r2, #4]
 800c05e:	4421      	add	r1, r4
 800c060:	6011      	str	r1, [r2, #0]
 800c062:	e7da      	b.n	800c01a <_free_r+0x26>
 800c064:	d902      	bls.n	800c06c <_free_r+0x78>
 800c066:	230c      	movs	r3, #12
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	e7d6      	b.n	800c01a <_free_r+0x26>
 800c06c:	6825      	ldr	r5, [r4, #0]
 800c06e:	1961      	adds	r1, r4, r5
 800c070:	428b      	cmp	r3, r1
 800c072:	bf04      	itt	eq
 800c074:	6819      	ldreq	r1, [r3, #0]
 800c076:	685b      	ldreq	r3, [r3, #4]
 800c078:	6063      	str	r3, [r4, #4]
 800c07a:	bf04      	itt	eq
 800c07c:	1949      	addeq	r1, r1, r5
 800c07e:	6021      	streq	r1, [r4, #0]
 800c080:	6054      	str	r4, [r2, #4]
 800c082:	e7ca      	b.n	800c01a <_free_r+0x26>
 800c084:	b003      	add	sp, #12
 800c086:	bd30      	pop	{r4, r5, pc}
 800c088:	20000eb0 	.word	0x20000eb0

0800c08c <sbrk_aligned>:
 800c08c:	b570      	push	{r4, r5, r6, lr}
 800c08e:	4e0e      	ldr	r6, [pc, #56]	; (800c0c8 <sbrk_aligned+0x3c>)
 800c090:	460c      	mov	r4, r1
 800c092:	6831      	ldr	r1, [r6, #0]
 800c094:	4605      	mov	r5, r0
 800c096:	b911      	cbnz	r1, 800c09e <sbrk_aligned+0x12>
 800c098:	f000 fb4a 	bl	800c730 <_sbrk_r>
 800c09c:	6030      	str	r0, [r6, #0]
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 fb45 	bl	800c730 <_sbrk_r>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d00a      	beq.n	800c0c0 <sbrk_aligned+0x34>
 800c0aa:	1cc4      	adds	r4, r0, #3
 800c0ac:	f024 0403 	bic.w	r4, r4, #3
 800c0b0:	42a0      	cmp	r0, r4
 800c0b2:	d007      	beq.n	800c0c4 <sbrk_aligned+0x38>
 800c0b4:	1a21      	subs	r1, r4, r0
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f000 fb3a 	bl	800c730 <_sbrk_r>
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d101      	bne.n	800c0c4 <sbrk_aligned+0x38>
 800c0c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	20000eb4 	.word	0x20000eb4

0800c0cc <_malloc_r>:
 800c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d0:	1ccd      	adds	r5, r1, #3
 800c0d2:	f025 0503 	bic.w	r5, r5, #3
 800c0d6:	3508      	adds	r5, #8
 800c0d8:	2d0c      	cmp	r5, #12
 800c0da:	bf38      	it	cc
 800c0dc:	250c      	movcc	r5, #12
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	db01      	blt.n	800c0e8 <_malloc_r+0x1c>
 800c0e4:	42a9      	cmp	r1, r5
 800c0e6:	d905      	bls.n	800c0f4 <_malloc_r+0x28>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	603b      	str	r3, [r7, #0]
 800c0ec:	2600      	movs	r6, #0
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f4:	4e2e      	ldr	r6, [pc, #184]	; (800c1b0 <_malloc_r+0xe4>)
 800c0f6:	f000 fe4f 	bl	800cd98 <__malloc_lock>
 800c0fa:	6833      	ldr	r3, [r6, #0]
 800c0fc:	461c      	mov	r4, r3
 800c0fe:	bb34      	cbnz	r4, 800c14e <_malloc_r+0x82>
 800c100:	4629      	mov	r1, r5
 800c102:	4638      	mov	r0, r7
 800c104:	f7ff ffc2 	bl	800c08c <sbrk_aligned>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	4604      	mov	r4, r0
 800c10c:	d14d      	bne.n	800c1aa <_malloc_r+0xde>
 800c10e:	6834      	ldr	r4, [r6, #0]
 800c110:	4626      	mov	r6, r4
 800c112:	2e00      	cmp	r6, #0
 800c114:	d140      	bne.n	800c198 <_malloc_r+0xcc>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	4631      	mov	r1, r6
 800c11a:	4638      	mov	r0, r7
 800c11c:	eb04 0803 	add.w	r8, r4, r3
 800c120:	f000 fb06 	bl	800c730 <_sbrk_r>
 800c124:	4580      	cmp	r8, r0
 800c126:	d13a      	bne.n	800c19e <_malloc_r+0xd2>
 800c128:	6821      	ldr	r1, [r4, #0]
 800c12a:	3503      	adds	r5, #3
 800c12c:	1a6d      	subs	r5, r5, r1
 800c12e:	f025 0503 	bic.w	r5, r5, #3
 800c132:	3508      	adds	r5, #8
 800c134:	2d0c      	cmp	r5, #12
 800c136:	bf38      	it	cc
 800c138:	250c      	movcc	r5, #12
 800c13a:	4629      	mov	r1, r5
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff ffa5 	bl	800c08c <sbrk_aligned>
 800c142:	3001      	adds	r0, #1
 800c144:	d02b      	beq.n	800c19e <_malloc_r+0xd2>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	442b      	add	r3, r5
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	e00e      	b.n	800c16c <_malloc_r+0xa0>
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	1b52      	subs	r2, r2, r5
 800c152:	d41e      	bmi.n	800c192 <_malloc_r+0xc6>
 800c154:	2a0b      	cmp	r2, #11
 800c156:	d916      	bls.n	800c186 <_malloc_r+0xba>
 800c158:	1961      	adds	r1, r4, r5
 800c15a:	42a3      	cmp	r3, r4
 800c15c:	6025      	str	r5, [r4, #0]
 800c15e:	bf18      	it	ne
 800c160:	6059      	strne	r1, [r3, #4]
 800c162:	6863      	ldr	r3, [r4, #4]
 800c164:	bf08      	it	eq
 800c166:	6031      	streq	r1, [r6, #0]
 800c168:	5162      	str	r2, [r4, r5]
 800c16a:	604b      	str	r3, [r1, #4]
 800c16c:	4638      	mov	r0, r7
 800c16e:	f104 060b 	add.w	r6, r4, #11
 800c172:	f000 fe17 	bl	800cda4 <__malloc_unlock>
 800c176:	f026 0607 	bic.w	r6, r6, #7
 800c17a:	1d23      	adds	r3, r4, #4
 800c17c:	1af2      	subs	r2, r6, r3
 800c17e:	d0b6      	beq.n	800c0ee <_malloc_r+0x22>
 800c180:	1b9b      	subs	r3, r3, r6
 800c182:	50a3      	str	r3, [r4, r2]
 800c184:	e7b3      	b.n	800c0ee <_malloc_r+0x22>
 800c186:	6862      	ldr	r2, [r4, #4]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	bf0c      	ite	eq
 800c18c:	6032      	streq	r2, [r6, #0]
 800c18e:	605a      	strne	r2, [r3, #4]
 800c190:	e7ec      	b.n	800c16c <_malloc_r+0xa0>
 800c192:	4623      	mov	r3, r4
 800c194:	6864      	ldr	r4, [r4, #4]
 800c196:	e7b2      	b.n	800c0fe <_malloc_r+0x32>
 800c198:	4634      	mov	r4, r6
 800c19a:	6876      	ldr	r6, [r6, #4]
 800c19c:	e7b9      	b.n	800c112 <_malloc_r+0x46>
 800c19e:	230c      	movs	r3, #12
 800c1a0:	603b      	str	r3, [r7, #0]
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	f000 fdfe 	bl	800cda4 <__malloc_unlock>
 800c1a8:	e7a1      	b.n	800c0ee <_malloc_r+0x22>
 800c1aa:	6025      	str	r5, [r4, #0]
 800c1ac:	e7de      	b.n	800c16c <_malloc_r+0xa0>
 800c1ae:	bf00      	nop
 800c1b0:	20000eb0 	.word	0x20000eb0

0800c1b4 <__ssputs_r>:
 800c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b8:	688e      	ldr	r6, [r1, #8]
 800c1ba:	429e      	cmp	r6, r3
 800c1bc:	4682      	mov	sl, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	4690      	mov	r8, r2
 800c1c2:	461f      	mov	r7, r3
 800c1c4:	d838      	bhi.n	800c238 <__ssputs_r+0x84>
 800c1c6:	898a      	ldrh	r2, [r1, #12]
 800c1c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1cc:	d032      	beq.n	800c234 <__ssputs_r+0x80>
 800c1ce:	6825      	ldr	r5, [r4, #0]
 800c1d0:	6909      	ldr	r1, [r1, #16]
 800c1d2:	eba5 0901 	sub.w	r9, r5, r1
 800c1d6:	6965      	ldr	r5, [r4, #20]
 800c1d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	444b      	add	r3, r9
 800c1e4:	106d      	asrs	r5, r5, #1
 800c1e6:	429d      	cmp	r5, r3
 800c1e8:	bf38      	it	cc
 800c1ea:	461d      	movcc	r5, r3
 800c1ec:	0553      	lsls	r3, r2, #21
 800c1ee:	d531      	bpl.n	800c254 <__ssputs_r+0xa0>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7ff ff6b 	bl	800c0cc <_malloc_r>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	b950      	cbnz	r0, 800c210 <__ssputs_r+0x5c>
 800c1fa:	230c      	movs	r3, #12
 800c1fc:	f8ca 3000 	str.w	r3, [sl]
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c210:	6921      	ldr	r1, [r4, #16]
 800c212:	464a      	mov	r2, r9
 800c214:	f7fc f974 	bl	8008500 <memcpy>
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	6126      	str	r6, [r4, #16]
 800c226:	6165      	str	r5, [r4, #20]
 800c228:	444e      	add	r6, r9
 800c22a:	eba5 0509 	sub.w	r5, r5, r9
 800c22e:	6026      	str	r6, [r4, #0]
 800c230:	60a5      	str	r5, [r4, #8]
 800c232:	463e      	mov	r6, r7
 800c234:	42be      	cmp	r6, r7
 800c236:	d900      	bls.n	800c23a <__ssputs_r+0x86>
 800c238:	463e      	mov	r6, r7
 800c23a:	6820      	ldr	r0, [r4, #0]
 800c23c:	4632      	mov	r2, r6
 800c23e:	4641      	mov	r1, r8
 800c240:	f000 fd90 	bl	800cd64 <memmove>
 800c244:	68a3      	ldr	r3, [r4, #8]
 800c246:	1b9b      	subs	r3, r3, r6
 800c248:	60a3      	str	r3, [r4, #8]
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	4433      	add	r3, r6
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	2000      	movs	r0, #0
 800c252:	e7db      	b.n	800c20c <__ssputs_r+0x58>
 800c254:	462a      	mov	r2, r5
 800c256:	f000 fdab 	bl	800cdb0 <_realloc_r>
 800c25a:	4606      	mov	r6, r0
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d1e1      	bne.n	800c224 <__ssputs_r+0x70>
 800c260:	6921      	ldr	r1, [r4, #16]
 800c262:	4650      	mov	r0, sl
 800c264:	f7ff fec6 	bl	800bff4 <_free_r>
 800c268:	e7c7      	b.n	800c1fa <__ssputs_r+0x46>
	...

0800c26c <_svfiprintf_r>:
 800c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c270:	4698      	mov	r8, r3
 800c272:	898b      	ldrh	r3, [r1, #12]
 800c274:	061b      	lsls	r3, r3, #24
 800c276:	b09d      	sub	sp, #116	; 0x74
 800c278:	4607      	mov	r7, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	4614      	mov	r4, r2
 800c27e:	d50e      	bpl.n	800c29e <_svfiprintf_r+0x32>
 800c280:	690b      	ldr	r3, [r1, #16]
 800c282:	b963      	cbnz	r3, 800c29e <_svfiprintf_r+0x32>
 800c284:	2140      	movs	r1, #64	; 0x40
 800c286:	f7ff ff21 	bl	800c0cc <_malloc_r>
 800c28a:	6028      	str	r0, [r5, #0]
 800c28c:	6128      	str	r0, [r5, #16]
 800c28e:	b920      	cbnz	r0, 800c29a <_svfiprintf_r+0x2e>
 800c290:	230c      	movs	r3, #12
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e0d1      	b.n	800c43e <_svfiprintf_r+0x1d2>
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	616b      	str	r3, [r5, #20]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a2:	2320      	movs	r3, #32
 800c2a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ac:	2330      	movs	r3, #48	; 0x30
 800c2ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c458 <_svfiprintf_r+0x1ec>
 800c2b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2b6:	f04f 0901 	mov.w	r9, #1
 800c2ba:	4623      	mov	r3, r4
 800c2bc:	469a      	mov	sl, r3
 800c2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c2:	b10a      	cbz	r2, 800c2c8 <_svfiprintf_r+0x5c>
 800c2c4:	2a25      	cmp	r2, #37	; 0x25
 800c2c6:	d1f9      	bne.n	800c2bc <_svfiprintf_r+0x50>
 800c2c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c2cc:	d00b      	beq.n	800c2e6 <_svfiprintf_r+0x7a>
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f7ff ff6d 	bl	800c1b4 <__ssputs_r>
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f000 80aa 	beq.w	800c434 <_svfiprintf_r+0x1c8>
 800c2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e2:	445a      	add	r2, fp
 800c2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80a2 	beq.w	800c434 <_svfiprintf_r+0x1c8>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2fa:	f10a 0a01 	add.w	sl, sl, #1
 800c2fe:	9304      	str	r3, [sp, #16]
 800c300:	9307      	str	r3, [sp, #28]
 800c302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c306:	931a      	str	r3, [sp, #104]	; 0x68
 800c308:	4654      	mov	r4, sl
 800c30a:	2205      	movs	r2, #5
 800c30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c310:	4851      	ldr	r0, [pc, #324]	; (800c458 <_svfiprintf_r+0x1ec>)
 800c312:	f7f3 ff75 	bl	8000200 <memchr>
 800c316:	9a04      	ldr	r2, [sp, #16]
 800c318:	b9d8      	cbnz	r0, 800c352 <_svfiprintf_r+0xe6>
 800c31a:	06d0      	lsls	r0, r2, #27
 800c31c:	bf44      	itt	mi
 800c31e:	2320      	movmi	r3, #32
 800c320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c324:	0711      	lsls	r1, r2, #28
 800c326:	bf44      	itt	mi
 800c328:	232b      	movmi	r3, #43	; 0x2b
 800c32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32e:	f89a 3000 	ldrb.w	r3, [sl]
 800c332:	2b2a      	cmp	r3, #42	; 0x2a
 800c334:	d015      	beq.n	800c362 <_svfiprintf_r+0xf6>
 800c336:	9a07      	ldr	r2, [sp, #28]
 800c338:	4654      	mov	r4, sl
 800c33a:	2000      	movs	r0, #0
 800c33c:	f04f 0c0a 	mov.w	ip, #10
 800c340:	4621      	mov	r1, r4
 800c342:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c346:	3b30      	subs	r3, #48	; 0x30
 800c348:	2b09      	cmp	r3, #9
 800c34a:	d94e      	bls.n	800c3ea <_svfiprintf_r+0x17e>
 800c34c:	b1b0      	cbz	r0, 800c37c <_svfiprintf_r+0x110>
 800c34e:	9207      	str	r2, [sp, #28]
 800c350:	e014      	b.n	800c37c <_svfiprintf_r+0x110>
 800c352:	eba0 0308 	sub.w	r3, r0, r8
 800c356:	fa09 f303 	lsl.w	r3, r9, r3
 800c35a:	4313      	orrs	r3, r2
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	46a2      	mov	sl, r4
 800c360:	e7d2      	b.n	800c308 <_svfiprintf_r+0x9c>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	1d19      	adds	r1, r3, #4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	9103      	str	r1, [sp, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bfbb      	ittet	lt
 800c36e:	425b      	neglt	r3, r3
 800c370:	f042 0202 	orrlt.w	r2, r2, #2
 800c374:	9307      	strge	r3, [sp, #28]
 800c376:	9307      	strlt	r3, [sp, #28]
 800c378:	bfb8      	it	lt
 800c37a:	9204      	strlt	r2, [sp, #16]
 800c37c:	7823      	ldrb	r3, [r4, #0]
 800c37e:	2b2e      	cmp	r3, #46	; 0x2e
 800c380:	d10c      	bne.n	800c39c <_svfiprintf_r+0x130>
 800c382:	7863      	ldrb	r3, [r4, #1]
 800c384:	2b2a      	cmp	r3, #42	; 0x2a
 800c386:	d135      	bne.n	800c3f4 <_svfiprintf_r+0x188>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	1d1a      	adds	r2, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	9203      	str	r2, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfb8      	it	lt
 800c394:	f04f 33ff 	movlt.w	r3, #4294967295
 800c398:	3402      	adds	r4, #2
 800c39a:	9305      	str	r3, [sp, #20]
 800c39c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c468 <_svfiprintf_r+0x1fc>
 800c3a0:	7821      	ldrb	r1, [r4, #0]
 800c3a2:	2203      	movs	r2, #3
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	f7f3 ff2b 	bl	8000200 <memchr>
 800c3aa:	b140      	cbz	r0, 800c3be <_svfiprintf_r+0x152>
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	eba0 000a 	sub.w	r0, r0, sl
 800c3b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	4303      	orrs	r3, r0
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c2:	4826      	ldr	r0, [pc, #152]	; (800c45c <_svfiprintf_r+0x1f0>)
 800c3c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	f7f3 ff19 	bl	8000200 <memchr>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d038      	beq.n	800c444 <_svfiprintf_r+0x1d8>
 800c3d2:	4b23      	ldr	r3, [pc, #140]	; (800c460 <_svfiprintf_r+0x1f4>)
 800c3d4:	bb1b      	cbnz	r3, 800c41e <_svfiprintf_r+0x1b2>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	3307      	adds	r3, #7
 800c3da:	f023 0307 	bic.w	r3, r3, #7
 800c3de:	3308      	adds	r3, #8
 800c3e0:	9303      	str	r3, [sp, #12]
 800c3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e4:	4433      	add	r3, r6
 800c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e8:	e767      	b.n	800c2ba <_svfiprintf_r+0x4e>
 800c3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	e7a5      	b.n	800c340 <_svfiprintf_r+0xd4>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9305      	str	r3, [sp, #20]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4620      	mov	r0, r4
 800c402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c406:	3a30      	subs	r2, #48	; 0x30
 800c408:	2a09      	cmp	r2, #9
 800c40a:	d903      	bls.n	800c414 <_svfiprintf_r+0x1a8>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0c5      	beq.n	800c39c <_svfiprintf_r+0x130>
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	e7c3      	b.n	800c39c <_svfiprintf_r+0x130>
 800c414:	fb0c 2101 	mla	r1, ip, r1, r2
 800c418:	4604      	mov	r4, r0
 800c41a:	2301      	movs	r3, #1
 800c41c:	e7f0      	b.n	800c400 <_svfiprintf_r+0x194>
 800c41e:	ab03      	add	r3, sp, #12
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	462a      	mov	r2, r5
 800c424:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <_svfiprintf_r+0x1f8>)
 800c426:	a904      	add	r1, sp, #16
 800c428:	4638      	mov	r0, r7
 800c42a:	f7fc f91f 	bl	800866c <_printf_float>
 800c42e:	1c42      	adds	r2, r0, #1
 800c430:	4606      	mov	r6, r0
 800c432:	d1d6      	bne.n	800c3e2 <_svfiprintf_r+0x176>
 800c434:	89ab      	ldrh	r3, [r5, #12]
 800c436:	065b      	lsls	r3, r3, #25
 800c438:	f53f af2c 	bmi.w	800c294 <_svfiprintf_r+0x28>
 800c43c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c43e:	b01d      	add	sp, #116	; 0x74
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	ab03      	add	r3, sp, #12
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	462a      	mov	r2, r5
 800c44a:	4b06      	ldr	r3, [pc, #24]	; (800c464 <_svfiprintf_r+0x1f8>)
 800c44c:	a904      	add	r1, sp, #16
 800c44e:	4638      	mov	r0, r7
 800c450:	f7fc fbb0 	bl	8008bb4 <_printf_i>
 800c454:	e7eb      	b.n	800c42e <_svfiprintf_r+0x1c2>
 800c456:	bf00      	nop
 800c458:	0800f3bc 	.word	0x0800f3bc
 800c45c:	0800f3c6 	.word	0x0800f3c6
 800c460:	0800866d 	.word	0x0800866d
 800c464:	0800c1b5 	.word	0x0800c1b5
 800c468:	0800f3c2 	.word	0x0800f3c2

0800c46c <__sfputc_r>:
 800c46c:	6893      	ldr	r3, [r2, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	b410      	push	{r4}
 800c474:	6093      	str	r3, [r2, #8]
 800c476:	da08      	bge.n	800c48a <__sfputc_r+0x1e>
 800c478:	6994      	ldr	r4, [r2, #24]
 800c47a:	42a3      	cmp	r3, r4
 800c47c:	db01      	blt.n	800c482 <__sfputc_r+0x16>
 800c47e:	290a      	cmp	r1, #10
 800c480:	d103      	bne.n	800c48a <__sfputc_r+0x1e>
 800c482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c486:	f000 b977 	b.w	800c778 <__swbuf_r>
 800c48a:	6813      	ldr	r3, [r2, #0]
 800c48c:	1c58      	adds	r0, r3, #1
 800c48e:	6010      	str	r0, [r2, #0]
 800c490:	7019      	strb	r1, [r3, #0]
 800c492:	4608      	mov	r0, r1
 800c494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <__sfputs_r>:
 800c49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	18d5      	adds	r5, r2, r3
 800c4a4:	42ac      	cmp	r4, r5
 800c4a6:	d101      	bne.n	800c4ac <__sfputs_r+0x12>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e007      	b.n	800c4bc <__sfputs_r+0x22>
 800c4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b0:	463a      	mov	r2, r7
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7ff ffda 	bl	800c46c <__sfputc_r>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d1f3      	bne.n	800c4a4 <__sfputs_r+0xa>
 800c4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4c0 <_vfiprintf_r>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	b09d      	sub	sp, #116	; 0x74
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	4698      	mov	r8, r3
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b118      	cbz	r0, 800c4d8 <_vfiprintf_r+0x18>
 800c4d0:	6983      	ldr	r3, [r0, #24]
 800c4d2:	b90b      	cbnz	r3, 800c4d8 <_vfiprintf_r+0x18>
 800c4d4:	f000 fb40 	bl	800cb58 <__sinit>
 800c4d8:	4b89      	ldr	r3, [pc, #548]	; (800c700 <_vfiprintf_r+0x240>)
 800c4da:	429d      	cmp	r5, r3
 800c4dc:	d11b      	bne.n	800c516 <_vfiprintf_r+0x56>
 800c4de:	6875      	ldr	r5, [r6, #4]
 800c4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d405      	bmi.n	800c4f2 <_vfiprintf_r+0x32>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_vfiprintf_r+0x32>
 800c4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ee:	f000 fbd1 	bl	800cc94 <__retarget_lock_acquire_recursive>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	071b      	lsls	r3, r3, #28
 800c4f6:	d501      	bpl.n	800c4fc <_vfiprintf_r+0x3c>
 800c4f8:	692b      	ldr	r3, [r5, #16]
 800c4fa:	b9eb      	cbnz	r3, 800c538 <_vfiprintf_r+0x78>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 f99a 	bl	800c838 <__swsetup_r>
 800c504:	b1c0      	cbz	r0, 800c538 <_vfiprintf_r+0x78>
 800c506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c508:	07dc      	lsls	r4, r3, #31
 800c50a:	d50e      	bpl.n	800c52a <_vfiprintf_r+0x6a>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	b01d      	add	sp, #116	; 0x74
 800c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c516:	4b7b      	ldr	r3, [pc, #492]	; (800c704 <_vfiprintf_r+0x244>)
 800c518:	429d      	cmp	r5, r3
 800c51a:	d101      	bne.n	800c520 <_vfiprintf_r+0x60>
 800c51c:	68b5      	ldr	r5, [r6, #8]
 800c51e:	e7df      	b.n	800c4e0 <_vfiprintf_r+0x20>
 800c520:	4b79      	ldr	r3, [pc, #484]	; (800c708 <_vfiprintf_r+0x248>)
 800c522:	429d      	cmp	r5, r3
 800c524:	bf08      	it	eq
 800c526:	68f5      	ldreq	r5, [r6, #12]
 800c528:	e7da      	b.n	800c4e0 <_vfiprintf_r+0x20>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	0598      	lsls	r0, r3, #22
 800c52e:	d4ed      	bmi.n	800c50c <_vfiprintf_r+0x4c>
 800c530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c532:	f000 fbb0 	bl	800cc96 <__retarget_lock_release_recursive>
 800c536:	e7e9      	b.n	800c50c <_vfiprintf_r+0x4c>
 800c538:	2300      	movs	r3, #0
 800c53a:	9309      	str	r3, [sp, #36]	; 0x24
 800c53c:	2320      	movs	r3, #32
 800c53e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c542:	f8cd 800c 	str.w	r8, [sp, #12]
 800c546:	2330      	movs	r3, #48	; 0x30
 800c548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c70c <_vfiprintf_r+0x24c>
 800c54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c550:	f04f 0901 	mov.w	r9, #1
 800c554:	4623      	mov	r3, r4
 800c556:	469a      	mov	sl, r3
 800c558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c55c:	b10a      	cbz	r2, 800c562 <_vfiprintf_r+0xa2>
 800c55e:	2a25      	cmp	r2, #37	; 0x25
 800c560:	d1f9      	bne.n	800c556 <_vfiprintf_r+0x96>
 800c562:	ebba 0b04 	subs.w	fp, sl, r4
 800c566:	d00b      	beq.n	800c580 <_vfiprintf_r+0xc0>
 800c568:	465b      	mov	r3, fp
 800c56a:	4622      	mov	r2, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff93 	bl	800c49a <__sfputs_r>
 800c574:	3001      	adds	r0, #1
 800c576:	f000 80aa 	beq.w	800c6ce <_vfiprintf_r+0x20e>
 800c57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57c:	445a      	add	r2, fp
 800c57e:	9209      	str	r2, [sp, #36]	; 0x24
 800c580:	f89a 3000 	ldrb.w	r3, [sl]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80a2 	beq.w	800c6ce <_vfiprintf_r+0x20e>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295
 800c590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c594:	f10a 0a01 	add.w	sl, sl, #1
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	9307      	str	r3, [sp, #28]
 800c59c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5a2:	4654      	mov	r4, sl
 800c5a4:	2205      	movs	r2, #5
 800c5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5aa:	4858      	ldr	r0, [pc, #352]	; (800c70c <_vfiprintf_r+0x24c>)
 800c5ac:	f7f3 fe28 	bl	8000200 <memchr>
 800c5b0:	9a04      	ldr	r2, [sp, #16]
 800c5b2:	b9d8      	cbnz	r0, 800c5ec <_vfiprintf_r+0x12c>
 800c5b4:	06d1      	lsls	r1, r2, #27
 800c5b6:	bf44      	itt	mi
 800c5b8:	2320      	movmi	r3, #32
 800c5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5be:	0713      	lsls	r3, r2, #28
 800c5c0:	bf44      	itt	mi
 800c5c2:	232b      	movmi	r3, #43	; 0x2b
 800c5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ce:	d015      	beq.n	800c5fc <_vfiprintf_r+0x13c>
 800c5d0:	9a07      	ldr	r2, [sp, #28]
 800c5d2:	4654      	mov	r4, sl
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f04f 0c0a 	mov.w	ip, #10
 800c5da:	4621      	mov	r1, r4
 800c5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e0:	3b30      	subs	r3, #48	; 0x30
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	d94e      	bls.n	800c684 <_vfiprintf_r+0x1c4>
 800c5e6:	b1b0      	cbz	r0, 800c616 <_vfiprintf_r+0x156>
 800c5e8:	9207      	str	r2, [sp, #28]
 800c5ea:	e014      	b.n	800c616 <_vfiprintf_r+0x156>
 800c5ec:	eba0 0308 	sub.w	r3, r0, r8
 800c5f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	46a2      	mov	sl, r4
 800c5fa:	e7d2      	b.n	800c5a2 <_vfiprintf_r+0xe2>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	1d19      	adds	r1, r3, #4
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	9103      	str	r1, [sp, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	bfbb      	ittet	lt
 800c608:	425b      	neglt	r3, r3
 800c60a:	f042 0202 	orrlt.w	r2, r2, #2
 800c60e:	9307      	strge	r3, [sp, #28]
 800c610:	9307      	strlt	r3, [sp, #28]
 800c612:	bfb8      	it	lt
 800c614:	9204      	strlt	r2, [sp, #16]
 800c616:	7823      	ldrb	r3, [r4, #0]
 800c618:	2b2e      	cmp	r3, #46	; 0x2e
 800c61a:	d10c      	bne.n	800c636 <_vfiprintf_r+0x176>
 800c61c:	7863      	ldrb	r3, [r4, #1]
 800c61e:	2b2a      	cmp	r3, #42	; 0x2a
 800c620:	d135      	bne.n	800c68e <_vfiprintf_r+0x1ce>
 800c622:	9b03      	ldr	r3, [sp, #12]
 800c624:	1d1a      	adds	r2, r3, #4
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	9203      	str	r2, [sp, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	bfb8      	it	lt
 800c62e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c632:	3402      	adds	r4, #2
 800c634:	9305      	str	r3, [sp, #20]
 800c636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c71c <_vfiprintf_r+0x25c>
 800c63a:	7821      	ldrb	r1, [r4, #0]
 800c63c:	2203      	movs	r2, #3
 800c63e:	4650      	mov	r0, sl
 800c640:	f7f3 fdde 	bl	8000200 <memchr>
 800c644:	b140      	cbz	r0, 800c658 <_vfiprintf_r+0x198>
 800c646:	2340      	movs	r3, #64	; 0x40
 800c648:	eba0 000a 	sub.w	r0, r0, sl
 800c64c:	fa03 f000 	lsl.w	r0, r3, r0
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	4303      	orrs	r3, r0
 800c654:	3401      	adds	r4, #1
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	482c      	ldr	r0, [pc, #176]	; (800c710 <_vfiprintf_r+0x250>)
 800c65e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c662:	2206      	movs	r2, #6
 800c664:	f7f3 fdcc 	bl	8000200 <memchr>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d03f      	beq.n	800c6ec <_vfiprintf_r+0x22c>
 800c66c:	4b29      	ldr	r3, [pc, #164]	; (800c714 <_vfiprintf_r+0x254>)
 800c66e:	bb1b      	cbnz	r3, 800c6b8 <_vfiprintf_r+0x1f8>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	3307      	adds	r3, #7
 800c674:	f023 0307 	bic.w	r3, r3, #7
 800c678:	3308      	adds	r3, #8
 800c67a:	9303      	str	r3, [sp, #12]
 800c67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67e:	443b      	add	r3, r7
 800c680:	9309      	str	r3, [sp, #36]	; 0x24
 800c682:	e767      	b.n	800c554 <_vfiprintf_r+0x94>
 800c684:	fb0c 3202 	mla	r2, ip, r2, r3
 800c688:	460c      	mov	r4, r1
 800c68a:	2001      	movs	r0, #1
 800c68c:	e7a5      	b.n	800c5da <_vfiprintf_r+0x11a>
 800c68e:	2300      	movs	r3, #0
 800c690:	3401      	adds	r4, #1
 800c692:	9305      	str	r3, [sp, #20]
 800c694:	4619      	mov	r1, r3
 800c696:	f04f 0c0a 	mov.w	ip, #10
 800c69a:	4620      	mov	r0, r4
 800c69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a0:	3a30      	subs	r2, #48	; 0x30
 800c6a2:	2a09      	cmp	r2, #9
 800c6a4:	d903      	bls.n	800c6ae <_vfiprintf_r+0x1ee>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0c5      	beq.n	800c636 <_vfiprintf_r+0x176>
 800c6aa:	9105      	str	r1, [sp, #20]
 800c6ac:	e7c3      	b.n	800c636 <_vfiprintf_r+0x176>
 800c6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e7f0      	b.n	800c69a <_vfiprintf_r+0x1da>
 800c6b8:	ab03      	add	r3, sp, #12
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4b16      	ldr	r3, [pc, #88]	; (800c718 <_vfiprintf_r+0x258>)
 800c6c0:	a904      	add	r1, sp, #16
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f7fb ffd2 	bl	800866c <_printf_float>
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	1c78      	adds	r0, r7, #1
 800c6cc:	d1d6      	bne.n	800c67c <_vfiprintf_r+0x1bc>
 800c6ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d0:	07d9      	lsls	r1, r3, #31
 800c6d2:	d405      	bmi.n	800c6e0 <_vfiprintf_r+0x220>
 800c6d4:	89ab      	ldrh	r3, [r5, #12]
 800c6d6:	059a      	lsls	r2, r3, #22
 800c6d8:	d402      	bmi.n	800c6e0 <_vfiprintf_r+0x220>
 800c6da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6dc:	f000 fadb 	bl	800cc96 <__retarget_lock_release_recursive>
 800c6e0:	89ab      	ldrh	r3, [r5, #12]
 800c6e2:	065b      	lsls	r3, r3, #25
 800c6e4:	f53f af12 	bmi.w	800c50c <_vfiprintf_r+0x4c>
 800c6e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6ea:	e711      	b.n	800c510 <_vfiprintf_r+0x50>
 800c6ec:	ab03      	add	r3, sp, #12
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	4b09      	ldr	r3, [pc, #36]	; (800c718 <_vfiprintf_r+0x258>)
 800c6f4:	a904      	add	r1, sp, #16
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7fc fa5c 	bl	8008bb4 <_printf_i>
 800c6fc:	e7e4      	b.n	800c6c8 <_vfiprintf_r+0x208>
 800c6fe:	bf00      	nop
 800c700:	0800f3f0 	.word	0x0800f3f0
 800c704:	0800f410 	.word	0x0800f410
 800c708:	0800f3d0 	.word	0x0800f3d0
 800c70c:	0800f3bc 	.word	0x0800f3bc
 800c710:	0800f3c6 	.word	0x0800f3c6
 800c714:	0800866d 	.word	0x0800866d
 800c718:	0800c49b 	.word	0x0800c49b
 800c71c:	0800f3c2 	.word	0x0800f3c2

0800c720 <nan>:
 800c720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c728 <nan+0x8>
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	00000000 	.word	0x00000000
 800c72c:	7ff80000 	.word	0x7ff80000

0800c730 <_sbrk_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d06      	ldr	r5, [pc, #24]	; (800c74c <_sbrk_r+0x1c>)
 800c734:	2300      	movs	r3, #0
 800c736:	4604      	mov	r4, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	602b      	str	r3, [r5, #0]
 800c73c:	f7f8 f972 	bl	8004a24 <_sbrk>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_sbrk_r+0x1a>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_sbrk_r+0x1a>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	20000ebc 	.word	0x20000ebc

0800c750 <strncmp>:
 800c750:	b510      	push	{r4, lr}
 800c752:	b17a      	cbz	r2, 800c774 <strncmp+0x24>
 800c754:	4603      	mov	r3, r0
 800c756:	3901      	subs	r1, #1
 800c758:	1884      	adds	r4, r0, r2
 800c75a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c75e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c762:	4290      	cmp	r0, r2
 800c764:	d101      	bne.n	800c76a <strncmp+0x1a>
 800c766:	42a3      	cmp	r3, r4
 800c768:	d101      	bne.n	800c76e <strncmp+0x1e>
 800c76a:	1a80      	subs	r0, r0, r2
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	2800      	cmp	r0, #0
 800c770:	d1f3      	bne.n	800c75a <strncmp+0xa>
 800c772:	e7fa      	b.n	800c76a <strncmp+0x1a>
 800c774:	4610      	mov	r0, r2
 800c776:	e7f9      	b.n	800c76c <strncmp+0x1c>

0800c778 <__swbuf_r>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	460e      	mov	r6, r1
 800c77c:	4614      	mov	r4, r2
 800c77e:	4605      	mov	r5, r0
 800c780:	b118      	cbz	r0, 800c78a <__swbuf_r+0x12>
 800c782:	6983      	ldr	r3, [r0, #24]
 800c784:	b90b      	cbnz	r3, 800c78a <__swbuf_r+0x12>
 800c786:	f000 f9e7 	bl	800cb58 <__sinit>
 800c78a:	4b21      	ldr	r3, [pc, #132]	; (800c810 <__swbuf_r+0x98>)
 800c78c:	429c      	cmp	r4, r3
 800c78e:	d12b      	bne.n	800c7e8 <__swbuf_r+0x70>
 800c790:	686c      	ldr	r4, [r5, #4]
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d52f      	bpl.n	800c7fc <__swbuf_r+0x84>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b36b      	cbz	r3, 800c7fc <__swbuf_r+0x84>
 800c7a0:	6923      	ldr	r3, [r4, #16]
 800c7a2:	6820      	ldr	r0, [r4, #0]
 800c7a4:	1ac0      	subs	r0, r0, r3
 800c7a6:	6963      	ldr	r3, [r4, #20]
 800c7a8:	b2f6      	uxtb	r6, r6
 800c7aa:	4283      	cmp	r3, r0
 800c7ac:	4637      	mov	r7, r6
 800c7ae:	dc04      	bgt.n	800c7ba <__swbuf_r+0x42>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f000 f93c 	bl	800ca30 <_fflush_r>
 800c7b8:	bb30      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	60a3      	str	r3, [r4, #8]
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	701e      	strb	r6, [r3, #0]
 800c7c8:	6963      	ldr	r3, [r4, #20]
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	4283      	cmp	r3, r0
 800c7ce:	d004      	beq.n	800c7da <__swbuf_r+0x62>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	07db      	lsls	r3, r3, #31
 800c7d4:	d506      	bpl.n	800c7e4 <__swbuf_r+0x6c>
 800c7d6:	2e0a      	cmp	r6, #10
 800c7d8:	d104      	bne.n	800c7e4 <__swbuf_r+0x6c>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 f927 	bl	800ca30 <_fflush_r>
 800c7e2:	b988      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <__swbuf_r+0x9c>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	d101      	bne.n	800c7f2 <__swbuf_r+0x7a>
 800c7ee:	68ac      	ldr	r4, [r5, #8]
 800c7f0:	e7cf      	b.n	800c792 <__swbuf_r+0x1a>
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <__swbuf_r+0xa0>)
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	bf08      	it	eq
 800c7f8:	68ec      	ldreq	r4, [r5, #12]
 800c7fa:	e7ca      	b.n	800c792 <__swbuf_r+0x1a>
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f81a 	bl	800c838 <__swsetup_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0cb      	beq.n	800c7a0 <__swbuf_r+0x28>
 800c808:	f04f 37ff 	mov.w	r7, #4294967295
 800c80c:	e7ea      	b.n	800c7e4 <__swbuf_r+0x6c>
 800c80e:	bf00      	nop
 800c810:	0800f3f0 	.word	0x0800f3f0
 800c814:	0800f410 	.word	0x0800f410
 800c818:	0800f3d0 	.word	0x0800f3d0

0800c81c <__ascii_wctomb>:
 800c81c:	b149      	cbz	r1, 800c832 <__ascii_wctomb+0x16>
 800c81e:	2aff      	cmp	r2, #255	; 0xff
 800c820:	bf85      	ittet	hi
 800c822:	238a      	movhi	r3, #138	; 0x8a
 800c824:	6003      	strhi	r3, [r0, #0]
 800c826:	700a      	strbls	r2, [r1, #0]
 800c828:	f04f 30ff 	movhi.w	r0, #4294967295
 800c82c:	bf98      	it	ls
 800c82e:	2001      	movls	r0, #1
 800c830:	4770      	bx	lr
 800c832:	4608      	mov	r0, r1
 800c834:	4770      	bx	lr
	...

0800c838 <__swsetup_r>:
 800c838:	4b32      	ldr	r3, [pc, #200]	; (800c904 <__swsetup_r+0xcc>)
 800c83a:	b570      	push	{r4, r5, r6, lr}
 800c83c:	681d      	ldr	r5, [r3, #0]
 800c83e:	4606      	mov	r6, r0
 800c840:	460c      	mov	r4, r1
 800c842:	b125      	cbz	r5, 800c84e <__swsetup_r+0x16>
 800c844:	69ab      	ldr	r3, [r5, #24]
 800c846:	b913      	cbnz	r3, 800c84e <__swsetup_r+0x16>
 800c848:	4628      	mov	r0, r5
 800c84a:	f000 f985 	bl	800cb58 <__sinit>
 800c84e:	4b2e      	ldr	r3, [pc, #184]	; (800c908 <__swsetup_r+0xd0>)
 800c850:	429c      	cmp	r4, r3
 800c852:	d10f      	bne.n	800c874 <__swsetup_r+0x3c>
 800c854:	686c      	ldr	r4, [r5, #4]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c85c:	0719      	lsls	r1, r3, #28
 800c85e:	d42c      	bmi.n	800c8ba <__swsetup_r+0x82>
 800c860:	06dd      	lsls	r5, r3, #27
 800c862:	d411      	bmi.n	800c888 <__swsetup_r+0x50>
 800c864:	2309      	movs	r3, #9
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	f04f 30ff 	mov.w	r0, #4294967295
 800c872:	e03e      	b.n	800c8f2 <__swsetup_r+0xba>
 800c874:	4b25      	ldr	r3, [pc, #148]	; (800c90c <__swsetup_r+0xd4>)
 800c876:	429c      	cmp	r4, r3
 800c878:	d101      	bne.n	800c87e <__swsetup_r+0x46>
 800c87a:	68ac      	ldr	r4, [r5, #8]
 800c87c:	e7eb      	b.n	800c856 <__swsetup_r+0x1e>
 800c87e:	4b24      	ldr	r3, [pc, #144]	; (800c910 <__swsetup_r+0xd8>)
 800c880:	429c      	cmp	r4, r3
 800c882:	bf08      	it	eq
 800c884:	68ec      	ldreq	r4, [r5, #12]
 800c886:	e7e6      	b.n	800c856 <__swsetup_r+0x1e>
 800c888:	0758      	lsls	r0, r3, #29
 800c88a:	d512      	bpl.n	800c8b2 <__swsetup_r+0x7a>
 800c88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c88e:	b141      	cbz	r1, 800c8a2 <__swsetup_r+0x6a>
 800c890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c894:	4299      	cmp	r1, r3
 800c896:	d002      	beq.n	800c89e <__swsetup_r+0x66>
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff fbab 	bl	800bff4 <_free_r>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	6363      	str	r3, [r4, #52]	; 0x34
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6063      	str	r3, [r4, #4]
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f043 0308 	orr.w	r3, r3, #8
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	b94b      	cbnz	r3, 800c8d2 <__swsetup_r+0x9a>
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c8:	d003      	beq.n	800c8d2 <__swsetup_r+0x9a>
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f000 fa09 	bl	800cce4 <__smakebuf_r>
 800c8d2:	89a0      	ldrh	r0, [r4, #12]
 800c8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8d8:	f010 0301 	ands.w	r3, r0, #1
 800c8dc:	d00a      	beq.n	800c8f4 <__swsetup_r+0xbc>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60a3      	str	r3, [r4, #8]
 800c8e2:	6963      	ldr	r3, [r4, #20]
 800c8e4:	425b      	negs	r3, r3
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	b943      	cbnz	r3, 800c8fe <__swsetup_r+0xc6>
 800c8ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8f0:	d1ba      	bne.n	800c868 <__swsetup_r+0x30>
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	0781      	lsls	r1, r0, #30
 800c8f6:	bf58      	it	pl
 800c8f8:	6963      	ldrpl	r3, [r4, #20]
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	e7f4      	b.n	800c8e8 <__swsetup_r+0xb0>
 800c8fe:	2000      	movs	r0, #0
 800c900:	e7f7      	b.n	800c8f2 <__swsetup_r+0xba>
 800c902:	bf00      	nop
 800c904:	2000007c 	.word	0x2000007c
 800c908:	0800f3f0 	.word	0x0800f3f0
 800c90c:	0800f410 	.word	0x0800f410
 800c910:	0800f3d0 	.word	0x0800f3d0

0800c914 <abort>:
 800c914:	b508      	push	{r3, lr}
 800c916:	2006      	movs	r0, #6
 800c918:	f000 faa2 	bl	800ce60 <raise>
 800c91c:	2001      	movs	r0, #1
 800c91e:	f7f8 f851 	bl	80049c4 <_exit>
	...

0800c924 <__sflush_r>:
 800c924:	898a      	ldrh	r2, [r1, #12]
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	4605      	mov	r5, r0
 800c92c:	0710      	lsls	r0, r2, #28
 800c92e:	460c      	mov	r4, r1
 800c930:	d458      	bmi.n	800c9e4 <__sflush_r+0xc0>
 800c932:	684b      	ldr	r3, [r1, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	dc05      	bgt.n	800c944 <__sflush_r+0x20>
 800c938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dc02      	bgt.n	800c944 <__sflush_r+0x20>
 800c93e:	2000      	movs	r0, #0
 800c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c946:	2e00      	cmp	r6, #0
 800c948:	d0f9      	beq.n	800c93e <__sflush_r+0x1a>
 800c94a:	2300      	movs	r3, #0
 800c94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c950:	682f      	ldr	r7, [r5, #0]
 800c952:	602b      	str	r3, [r5, #0]
 800c954:	d032      	beq.n	800c9bc <__sflush_r+0x98>
 800c956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	075a      	lsls	r2, r3, #29
 800c95c:	d505      	bpl.n	800c96a <__sflush_r+0x46>
 800c95e:	6863      	ldr	r3, [r4, #4]
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c964:	b10b      	cbz	r3, 800c96a <__sflush_r+0x46>
 800c966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c968:	1ac0      	subs	r0, r0, r3
 800c96a:	2300      	movs	r3, #0
 800c96c:	4602      	mov	r2, r0
 800c96e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c970:	6a21      	ldr	r1, [r4, #32]
 800c972:	4628      	mov	r0, r5
 800c974:	47b0      	blx	r6
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	d106      	bne.n	800c98a <__sflush_r+0x66>
 800c97c:	6829      	ldr	r1, [r5, #0]
 800c97e:	291d      	cmp	r1, #29
 800c980:	d82c      	bhi.n	800c9dc <__sflush_r+0xb8>
 800c982:	4a2a      	ldr	r2, [pc, #168]	; (800ca2c <__sflush_r+0x108>)
 800c984:	40ca      	lsrs	r2, r1
 800c986:	07d6      	lsls	r6, r2, #31
 800c988:	d528      	bpl.n	800c9dc <__sflush_r+0xb8>
 800c98a:	2200      	movs	r2, #0
 800c98c:	6062      	str	r2, [r4, #4]
 800c98e:	04d9      	lsls	r1, r3, #19
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	d504      	bpl.n	800c9a0 <__sflush_r+0x7c>
 800c996:	1c42      	adds	r2, r0, #1
 800c998:	d101      	bne.n	800c99e <__sflush_r+0x7a>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b903      	cbnz	r3, 800c9a0 <__sflush_r+0x7c>
 800c99e:	6560      	str	r0, [r4, #84]	; 0x54
 800c9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9a2:	602f      	str	r7, [r5, #0]
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	d0ca      	beq.n	800c93e <__sflush_r+0x1a>
 800c9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	d002      	beq.n	800c9b6 <__sflush_r+0x92>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f7ff fb1f 	bl	800bff4 <_free_r>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ba:	e7c1      	b.n	800c940 <__sflush_r+0x1c>
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b0      	blx	r6
 800c9c4:	1c41      	adds	r1, r0, #1
 800c9c6:	d1c7      	bne.n	800c958 <__sflush_r+0x34>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c4      	beq.n	800c958 <__sflush_r+0x34>
 800c9ce:	2b1d      	cmp	r3, #29
 800c9d0:	d001      	beq.n	800c9d6 <__sflush_r+0xb2>
 800c9d2:	2b16      	cmp	r3, #22
 800c9d4:	d101      	bne.n	800c9da <__sflush_r+0xb6>
 800c9d6:	602f      	str	r7, [r5, #0]
 800c9d8:	e7b1      	b.n	800c93e <__sflush_r+0x1a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	e7ad      	b.n	800c940 <__sflush_r+0x1c>
 800c9e4:	690f      	ldr	r7, [r1, #16]
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	d0a9      	beq.n	800c93e <__sflush_r+0x1a>
 800c9ea:	0793      	lsls	r3, r2, #30
 800c9ec:	680e      	ldr	r6, [r1, #0]
 800c9ee:	bf08      	it	eq
 800c9f0:	694b      	ldreq	r3, [r1, #20]
 800c9f2:	600f      	str	r7, [r1, #0]
 800c9f4:	bf18      	it	ne
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	eba6 0807 	sub.w	r8, r6, r7
 800c9fc:	608b      	str	r3, [r1, #8]
 800c9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ca02:	dd9c      	ble.n	800c93e <__sflush_r+0x1a>
 800ca04:	6a21      	ldr	r1, [r4, #32]
 800ca06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca08:	4643      	mov	r3, r8
 800ca0a:	463a      	mov	r2, r7
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b0      	blx	r6
 800ca10:	2800      	cmp	r0, #0
 800ca12:	dc06      	bgt.n	800ca22 <__sflush_r+0xfe>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e78e      	b.n	800c940 <__sflush_r+0x1c>
 800ca22:	4407      	add	r7, r0
 800ca24:	eba8 0800 	sub.w	r8, r8, r0
 800ca28:	e7e9      	b.n	800c9fe <__sflush_r+0xda>
 800ca2a:	bf00      	nop
 800ca2c:	20400001 	.word	0x20400001

0800ca30 <_fflush_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	690b      	ldr	r3, [r1, #16]
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	b913      	cbnz	r3, 800ca40 <_fflush_r+0x10>
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	b118      	cbz	r0, 800ca4a <_fflush_r+0x1a>
 800ca42:	6983      	ldr	r3, [r0, #24]
 800ca44:	b90b      	cbnz	r3, 800ca4a <_fflush_r+0x1a>
 800ca46:	f000 f887 	bl	800cb58 <__sinit>
 800ca4a:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <_fflush_r+0x6c>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d11b      	bne.n	800ca88 <_fflush_r+0x58>
 800ca50:	686c      	ldr	r4, [r5, #4]
 800ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0ef      	beq.n	800ca3a <_fflush_r+0xa>
 800ca5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca5c:	07d0      	lsls	r0, r2, #31
 800ca5e:	d404      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca60:	0599      	lsls	r1, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca66:	f000 f915 	bl	800cc94 <__retarget_lock_acquire_recursive>
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7ff ff59 	bl	800c924 <__sflush_r>
 800ca72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca74:	07da      	lsls	r2, r3, #31
 800ca76:	4605      	mov	r5, r0
 800ca78:	d4e0      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	059b      	lsls	r3, r3, #22
 800ca7e:	d4dd      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f000 f908 	bl	800cc96 <__retarget_lock_release_recursive>
 800ca86:	e7d9      	b.n	800ca3c <_fflush_r+0xc>
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <_fflush_r+0x70>)
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d101      	bne.n	800ca92 <_fflush_r+0x62>
 800ca8e:	68ac      	ldr	r4, [r5, #8]
 800ca90:	e7df      	b.n	800ca52 <_fflush_r+0x22>
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <_fflush_r+0x74>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	bf08      	it	eq
 800ca98:	68ec      	ldreq	r4, [r5, #12]
 800ca9a:	e7da      	b.n	800ca52 <_fflush_r+0x22>
 800ca9c:	0800f3f0 	.word	0x0800f3f0
 800caa0:	0800f410 	.word	0x0800f410
 800caa4:	0800f3d0 	.word	0x0800f3d0

0800caa8 <std>:
 800caa8:	2300      	movs	r3, #0
 800caaa:	b510      	push	{r4, lr}
 800caac:	4604      	mov	r4, r0
 800caae:	e9c0 3300 	strd	r3, r3, [r0]
 800cab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cab6:	6083      	str	r3, [r0, #8]
 800cab8:	8181      	strh	r1, [r0, #12]
 800caba:	6643      	str	r3, [r0, #100]	; 0x64
 800cabc:	81c2      	strh	r2, [r0, #14]
 800cabe:	6183      	str	r3, [r0, #24]
 800cac0:	4619      	mov	r1, r3
 800cac2:	2208      	movs	r2, #8
 800cac4:	305c      	adds	r0, #92	; 0x5c
 800cac6:	f7fb fd29 	bl	800851c <memset>
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x38>)
 800cacc:	6263      	str	r3, [r4, #36]	; 0x24
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x3c>)
 800cad0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <std+0x40>)
 800cad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cad6:	4b05      	ldr	r3, [pc, #20]	; (800caec <std+0x44>)
 800cad8:	6224      	str	r4, [r4, #32]
 800cada:	6323      	str	r3, [r4, #48]	; 0x30
 800cadc:	bd10      	pop	{r4, pc}
 800cade:	bf00      	nop
 800cae0:	0800ce99 	.word	0x0800ce99
 800cae4:	0800cebb 	.word	0x0800cebb
 800cae8:	0800cef3 	.word	0x0800cef3
 800caec:	0800cf17 	.word	0x0800cf17

0800caf0 <_cleanup_r>:
 800caf0:	4901      	ldr	r1, [pc, #4]	; (800caf8 <_cleanup_r+0x8>)
 800caf2:	f000 b8af 	b.w	800cc54 <_fwalk_reent>
 800caf6:	bf00      	nop
 800caf8:	0800ca31 	.word	0x0800ca31

0800cafc <__sfmoreglue>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	2268      	movs	r2, #104	; 0x68
 800cb00:	1e4d      	subs	r5, r1, #1
 800cb02:	4355      	muls	r5, r2
 800cb04:	460e      	mov	r6, r1
 800cb06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb0a:	f7ff fadf 	bl	800c0cc <_malloc_r>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	b140      	cbz	r0, 800cb24 <__sfmoreglue+0x28>
 800cb12:	2100      	movs	r1, #0
 800cb14:	e9c0 1600 	strd	r1, r6, [r0]
 800cb18:	300c      	adds	r0, #12
 800cb1a:	60a0      	str	r0, [r4, #8]
 800cb1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb20:	f7fb fcfc 	bl	800851c <memset>
 800cb24:	4620      	mov	r0, r4
 800cb26:	bd70      	pop	{r4, r5, r6, pc}

0800cb28 <__sfp_lock_acquire>:
 800cb28:	4801      	ldr	r0, [pc, #4]	; (800cb30 <__sfp_lock_acquire+0x8>)
 800cb2a:	f000 b8b3 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cb2e:	bf00      	nop
 800cb30:	20000eb9 	.word	0x20000eb9

0800cb34 <__sfp_lock_release>:
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <__sfp_lock_release+0x8>)
 800cb36:	f000 b8ae 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	20000eb9 	.word	0x20000eb9

0800cb40 <__sinit_lock_acquire>:
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__sinit_lock_acquire+0x8>)
 800cb42:	f000 b8a7 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cb46:	bf00      	nop
 800cb48:	20000eba 	.word	0x20000eba

0800cb4c <__sinit_lock_release>:
 800cb4c:	4801      	ldr	r0, [pc, #4]	; (800cb54 <__sinit_lock_release+0x8>)
 800cb4e:	f000 b8a2 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cb52:	bf00      	nop
 800cb54:	20000eba 	.word	0x20000eba

0800cb58 <__sinit>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	f7ff fff0 	bl	800cb40 <__sinit_lock_acquire>
 800cb60:	69a3      	ldr	r3, [r4, #24]
 800cb62:	b11b      	cbz	r3, 800cb6c <__sinit+0x14>
 800cb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb68:	f7ff bff0 	b.w	800cb4c <__sinit_lock_release>
 800cb6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb70:	6523      	str	r3, [r4, #80]	; 0x50
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <__sinit+0x68>)
 800cb74:	4a13      	ldr	r2, [pc, #76]	; (800cbc4 <__sinit+0x6c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb7a:	42a3      	cmp	r3, r4
 800cb7c:	bf04      	itt	eq
 800cb7e:	2301      	moveq	r3, #1
 800cb80:	61a3      	streq	r3, [r4, #24]
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f820 	bl	800cbc8 <__sfp>
 800cb88:	6060      	str	r0, [r4, #4]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 f81c 	bl	800cbc8 <__sfp>
 800cb90:	60a0      	str	r0, [r4, #8]
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f818 	bl	800cbc8 <__sfp>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	60e0      	str	r0, [r4, #12]
 800cb9c:	2104      	movs	r1, #4
 800cb9e:	6860      	ldr	r0, [r4, #4]
 800cba0:	f7ff ff82 	bl	800caa8 <std>
 800cba4:	68a0      	ldr	r0, [r4, #8]
 800cba6:	2201      	movs	r2, #1
 800cba8:	2109      	movs	r1, #9
 800cbaa:	f7ff ff7d 	bl	800caa8 <std>
 800cbae:	68e0      	ldr	r0, [r4, #12]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	2112      	movs	r1, #18
 800cbb4:	f7ff ff78 	bl	800caa8 <std>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	61a3      	str	r3, [r4, #24]
 800cbbc:	e7d2      	b.n	800cb64 <__sinit+0xc>
 800cbbe:	bf00      	nop
 800cbc0:	0800ef2c 	.word	0x0800ef2c
 800cbc4:	0800caf1 	.word	0x0800caf1

0800cbc8 <__sfp>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	4607      	mov	r7, r0
 800cbcc:	f7ff ffac 	bl	800cb28 <__sfp_lock_acquire>
 800cbd0:	4b1e      	ldr	r3, [pc, #120]	; (800cc4c <__sfp+0x84>)
 800cbd2:	681e      	ldr	r6, [r3, #0]
 800cbd4:	69b3      	ldr	r3, [r6, #24]
 800cbd6:	b913      	cbnz	r3, 800cbde <__sfp+0x16>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff ffbd 	bl	800cb58 <__sinit>
 800cbde:	3648      	adds	r6, #72	; 0x48
 800cbe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	d503      	bpl.n	800cbf0 <__sfp+0x28>
 800cbe8:	6833      	ldr	r3, [r6, #0]
 800cbea:	b30b      	cbz	r3, 800cc30 <__sfp+0x68>
 800cbec:	6836      	ldr	r6, [r6, #0]
 800cbee:	e7f7      	b.n	800cbe0 <__sfp+0x18>
 800cbf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbf4:	b9d5      	cbnz	r5, 800cc2c <__sfp+0x64>
 800cbf6:	4b16      	ldr	r3, [pc, #88]	; (800cc50 <__sfp+0x88>)
 800cbf8:	60e3      	str	r3, [r4, #12]
 800cbfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbfe:	6665      	str	r5, [r4, #100]	; 0x64
 800cc00:	f000 f847 	bl	800cc92 <__retarget_lock_init_recursive>
 800cc04:	f7ff ff96 	bl	800cb34 <__sfp_lock_release>
 800cc08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc10:	6025      	str	r5, [r4, #0]
 800cc12:	61a5      	str	r5, [r4, #24]
 800cc14:	2208      	movs	r2, #8
 800cc16:	4629      	mov	r1, r5
 800cc18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc1c:	f7fb fc7e 	bl	800851c <memset>
 800cc20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc28:	4620      	mov	r0, r4
 800cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2c:	3468      	adds	r4, #104	; 0x68
 800cc2e:	e7d9      	b.n	800cbe4 <__sfp+0x1c>
 800cc30:	2104      	movs	r1, #4
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff ff62 	bl	800cafc <__sfmoreglue>
 800cc38:	4604      	mov	r4, r0
 800cc3a:	6030      	str	r0, [r6, #0]
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d1d5      	bne.n	800cbec <__sfp+0x24>
 800cc40:	f7ff ff78 	bl	800cb34 <__sfp_lock_release>
 800cc44:	230c      	movs	r3, #12
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	e7ee      	b.n	800cc28 <__sfp+0x60>
 800cc4a:	bf00      	nop
 800cc4c:	0800ef2c 	.word	0x0800ef2c
 800cc50:	ffff0001 	.word	0xffff0001

0800cc54 <_fwalk_reent>:
 800cc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc58:	4606      	mov	r6, r0
 800cc5a:	4688      	mov	r8, r1
 800cc5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc60:	2700      	movs	r7, #0
 800cc62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc66:	f1b9 0901 	subs.w	r9, r9, #1
 800cc6a:	d505      	bpl.n	800cc78 <_fwalk_reent+0x24>
 800cc6c:	6824      	ldr	r4, [r4, #0]
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d1f7      	bne.n	800cc62 <_fwalk_reent+0xe>
 800cc72:	4638      	mov	r0, r7
 800cc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc78:	89ab      	ldrh	r3, [r5, #12]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d907      	bls.n	800cc8e <_fwalk_reent+0x3a>
 800cc7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc82:	3301      	adds	r3, #1
 800cc84:	d003      	beq.n	800cc8e <_fwalk_reent+0x3a>
 800cc86:	4629      	mov	r1, r5
 800cc88:	4630      	mov	r0, r6
 800cc8a:	47c0      	blx	r8
 800cc8c:	4307      	orrs	r7, r0
 800cc8e:	3568      	adds	r5, #104	; 0x68
 800cc90:	e7e9      	b.n	800cc66 <_fwalk_reent+0x12>

0800cc92 <__retarget_lock_init_recursive>:
 800cc92:	4770      	bx	lr

0800cc94 <__retarget_lock_acquire_recursive>:
 800cc94:	4770      	bx	lr

0800cc96 <__retarget_lock_release_recursive>:
 800cc96:	4770      	bx	lr

0800cc98 <__swhatbuf_r>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	460e      	mov	r6, r1
 800cc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca0:	2900      	cmp	r1, #0
 800cca2:	b096      	sub	sp, #88	; 0x58
 800cca4:	4614      	mov	r4, r2
 800cca6:	461d      	mov	r5, r3
 800cca8:	da08      	bge.n	800ccbc <__swhatbuf_r+0x24>
 800ccaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	061a      	lsls	r2, r3, #24
 800ccb4:	d410      	bmi.n	800ccd8 <__swhatbuf_r+0x40>
 800ccb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccba:	e00e      	b.n	800ccda <__swhatbuf_r+0x42>
 800ccbc:	466a      	mov	r2, sp
 800ccbe:	f000 f951 	bl	800cf64 <_fstat_r>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	dbf1      	blt.n	800ccaa <__swhatbuf_r+0x12>
 800ccc6:	9a01      	ldr	r2, [sp, #4]
 800ccc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccd0:	425a      	negs	r2, r3
 800ccd2:	415a      	adcs	r2, r3
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	e7ee      	b.n	800ccb6 <__swhatbuf_r+0x1e>
 800ccd8:	2340      	movs	r3, #64	; 0x40
 800ccda:	2000      	movs	r0, #0
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	b016      	add	sp, #88	; 0x58
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cce4 <__smakebuf_r>:
 800cce4:	898b      	ldrh	r3, [r1, #12]
 800cce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cce8:	079d      	lsls	r5, r3, #30
 800ccea:	4606      	mov	r6, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	d507      	bpl.n	800cd00 <__smakebuf_r+0x1c>
 800ccf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	b002      	add	sp, #8
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	ab01      	add	r3, sp, #4
 800cd02:	466a      	mov	r2, sp
 800cd04:	f7ff ffc8 	bl	800cc98 <__swhatbuf_r>
 800cd08:	9900      	ldr	r1, [sp, #0]
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff f9dd 	bl	800c0cc <_malloc_r>
 800cd12:	b948      	cbnz	r0, 800cd28 <__smakebuf_r+0x44>
 800cd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d4ef      	bmi.n	800ccfc <__smakebuf_r+0x18>
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	f043 0302 	orr.w	r3, r3, #2
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	e7e3      	b.n	800ccf0 <__smakebuf_r+0xc>
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <__smakebuf_r+0x7c>)
 800cd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	6163      	str	r3, [r4, #20]
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	6120      	str	r0, [r4, #16]
 800cd3e:	b15b      	cbz	r3, 800cd58 <__smakebuf_r+0x74>
 800cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 f91f 	bl	800cf88 <_isatty_r>
 800cd4a:	b128      	cbz	r0, 800cd58 <__smakebuf_r+0x74>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f023 0303 	bic.w	r3, r3, #3
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	89a0      	ldrh	r0, [r4, #12]
 800cd5a:	4305      	orrs	r5, r0
 800cd5c:	81a5      	strh	r5, [r4, #12]
 800cd5e:	e7cd      	b.n	800ccfc <__smakebuf_r+0x18>
 800cd60:	0800caf1 	.word	0x0800caf1

0800cd64 <memmove>:
 800cd64:	4288      	cmp	r0, r1
 800cd66:	b510      	push	{r4, lr}
 800cd68:	eb01 0402 	add.w	r4, r1, r2
 800cd6c:	d902      	bls.n	800cd74 <memmove+0x10>
 800cd6e:	4284      	cmp	r4, r0
 800cd70:	4623      	mov	r3, r4
 800cd72:	d807      	bhi.n	800cd84 <memmove+0x20>
 800cd74:	1e43      	subs	r3, r0, #1
 800cd76:	42a1      	cmp	r1, r4
 800cd78:	d008      	beq.n	800cd8c <memmove+0x28>
 800cd7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd82:	e7f8      	b.n	800cd76 <memmove+0x12>
 800cd84:	4402      	add	r2, r0
 800cd86:	4601      	mov	r1, r0
 800cd88:	428a      	cmp	r2, r1
 800cd8a:	d100      	bne.n	800cd8e <memmove+0x2a>
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd96:	e7f7      	b.n	800cd88 <memmove+0x24>

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff bf7b 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	20000eb8 	.word	0x20000eb8

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	; (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff bf76 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	20000eb8 	.word	0x20000eb8

0800cdb0 <_realloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	460e      	mov	r6, r1
 800cdba:	b921      	cbnz	r1, 800cdc6 <_realloc_r+0x16>
 800cdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	f7ff b983 	b.w	800c0cc <_malloc_r>
 800cdc6:	b92a      	cbnz	r2, 800cdd4 <_realloc_r+0x24>
 800cdc8:	f7ff f914 	bl	800bff4 <_free_r>
 800cdcc:	4625      	mov	r5, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	f000 f8fa 	bl	800cfcc <_malloc_usable_size_r>
 800cdd8:	4284      	cmp	r4, r0
 800cdda:	4607      	mov	r7, r0
 800cddc:	d802      	bhi.n	800cde4 <_realloc_r+0x34>
 800cdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cde2:	d812      	bhi.n	800ce0a <_realloc_r+0x5a>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7ff f970 	bl	800c0cc <_malloc_r>
 800cdec:	4605      	mov	r5, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0ed      	beq.n	800cdce <_realloc_r+0x1e>
 800cdf2:	42bc      	cmp	r4, r7
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	bf28      	it	cs
 800cdfa:	463a      	movcs	r2, r7
 800cdfc:	f7fb fb80 	bl	8008500 <memcpy>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4640      	mov	r0, r8
 800ce04:	f7ff f8f6 	bl	800bff4 <_free_r>
 800ce08:	e7e1      	b.n	800cdce <_realloc_r+0x1e>
 800ce0a:	4635      	mov	r5, r6
 800ce0c:	e7df      	b.n	800cdce <_realloc_r+0x1e>

0800ce0e <_raise_r>:
 800ce0e:	291f      	cmp	r1, #31
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	460d      	mov	r5, r1
 800ce16:	d904      	bls.n	800ce22 <_raise_r+0x14>
 800ce18:	2316      	movs	r3, #22
 800ce1a:	6003      	str	r3, [r0, #0]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce24:	b112      	cbz	r2, 800ce2c <_raise_r+0x1e>
 800ce26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce2a:	b94b      	cbnz	r3, 800ce40 <_raise_r+0x32>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 f831 	bl	800ce94 <_getpid_r>
 800ce32:	462a      	mov	r2, r5
 800ce34:	4601      	mov	r1, r0
 800ce36:	4620      	mov	r0, r4
 800ce38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce3c:	f000 b818 	b.w	800ce70 <_kill_r>
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d00a      	beq.n	800ce5a <_raise_r+0x4c>
 800ce44:	1c59      	adds	r1, r3, #1
 800ce46:	d103      	bne.n	800ce50 <_raise_r+0x42>
 800ce48:	2316      	movs	r3, #22
 800ce4a:	6003      	str	r3, [r0, #0]
 800ce4c:	2001      	movs	r0, #1
 800ce4e:	e7e7      	b.n	800ce20 <_raise_r+0x12>
 800ce50:	2400      	movs	r4, #0
 800ce52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce56:	4628      	mov	r0, r5
 800ce58:	4798      	blx	r3
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	e7e0      	b.n	800ce20 <_raise_r+0x12>
	...

0800ce60 <raise>:
 800ce60:	4b02      	ldr	r3, [pc, #8]	; (800ce6c <raise+0xc>)
 800ce62:	4601      	mov	r1, r0
 800ce64:	6818      	ldr	r0, [r3, #0]
 800ce66:	f7ff bfd2 	b.w	800ce0e <_raise_r>
 800ce6a:	bf00      	nop
 800ce6c:	2000007c 	.word	0x2000007c

0800ce70 <_kill_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_kill_r+0x20>)
 800ce74:	2300      	movs	r3, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	f7f7 fd99 	bl	80049b4 <_kill>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d102      	bne.n	800ce8c <_kill_r+0x1c>
 800ce86:	682b      	ldr	r3, [r5, #0]
 800ce88:	b103      	cbz	r3, 800ce8c <_kill_r+0x1c>
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	bd38      	pop	{r3, r4, r5, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000ebc 	.word	0x20000ebc

0800ce94 <_getpid_r>:
 800ce94:	f7f7 bd8c 	b.w	80049b0 <_getpid>

0800ce98 <__sread>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea0:	f000 f89c 	bl	800cfdc <_read_r>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	bfab      	itete	ge
 800cea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceaa:	89a3      	ldrhlt	r3, [r4, #12]
 800ceac:	181b      	addge	r3, r3, r0
 800ceae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceb2:	bfac      	ite	ge
 800ceb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceb6:	81a3      	strhlt	r3, [r4, #12]
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <__swrite>:
 800ceba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cebe:	461f      	mov	r7, r3
 800cec0:	898b      	ldrh	r3, [r1, #12]
 800cec2:	05db      	lsls	r3, r3, #23
 800cec4:	4605      	mov	r5, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	4616      	mov	r6, r2
 800ceca:	d505      	bpl.n	800ced8 <__swrite+0x1e>
 800cecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced0:	2302      	movs	r3, #2
 800ced2:	2200      	movs	r2, #0
 800ced4:	f000 f868 	bl	800cfa8 <_lseek_r>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	4628      	mov	r0, r5
 800ceea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceee:	f000 b817 	b.w	800cf20 <_write_r>

0800cef2 <__sseek>:
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 f855 	bl	800cfa8 <_lseek_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	bf15      	itete	ne
 800cf04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf0e:	81a3      	strheq	r3, [r4, #12]
 800cf10:	bf18      	it	ne
 800cf12:	81a3      	strhne	r3, [r4, #12]
 800cf14:	bd10      	pop	{r4, pc}

0800cf16 <__sclose>:
 800cf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1a:	f000 b813 	b.w	800cf44 <_close_r>
	...

0800cf20 <_write_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_write_r+0x20>)
 800cf24:	4604      	mov	r4, r0
 800cf26:	4608      	mov	r0, r1
 800cf28:	4611      	mov	r1, r2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	602a      	str	r2, [r5, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f7f7 fd5c 	bl	80049ec <_write>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_write_r+0x1e>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_write_r+0x1e>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	20000ebc 	.word	0x20000ebc

0800cf44 <_close_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_close_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f7 fd5a 	bl	8004a08 <_close>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_close_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_close_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000ebc 	.word	0x20000ebc

0800cf64 <_fstat_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	; (800cf84 <_fstat_r+0x20>)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	4611      	mov	r1, r2
 800cf70:	602b      	str	r3, [r5, #0]
 800cf72:	f7f7 fd4d 	bl	8004a10 <_fstat>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	d102      	bne.n	800cf80 <_fstat_r+0x1c>
 800cf7a:	682b      	ldr	r3, [r5, #0]
 800cf7c:	b103      	cbz	r3, 800cf80 <_fstat_r+0x1c>
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	bd38      	pop	{r3, r4, r5, pc}
 800cf82:	bf00      	nop
 800cf84:	20000ebc 	.word	0x20000ebc

0800cf88 <_isatty_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d06      	ldr	r5, [pc, #24]	; (800cfa4 <_isatty_r+0x1c>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f7 fd42 	bl	8004a1c <_isatty>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_isatty_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_isatty_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20000ebc 	.word	0x20000ebc

0800cfa8 <_lseek_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_lseek_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f7 fd32 	bl	8004a20 <_lseek>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_lseek_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_lseek_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	20000ebc 	.word	0x20000ebc

0800cfcc <_malloc_usable_size_r>:
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f18      	subs	r0, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfbc      	itt	lt
 800cfd6:	580b      	ldrlt	r3, [r1, r0]
 800cfd8:	18c0      	addlt	r0, r0, r3
 800cfda:	4770      	bx	lr

0800cfdc <_read_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d07      	ldr	r5, [pc, #28]	; (800cffc <_read_r+0x20>)
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	602a      	str	r2, [r5, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f7f7 fcf0 	bl	80049d0 <_read>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_read_r+0x1e>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_read_r+0x1e>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	20000ebc 	.word	0x20000ebc

0800d000 <cosf>:
 800d000:	ee10 3a10 	vmov	r3, s0
 800d004:	b507      	push	{r0, r1, r2, lr}
 800d006:	4a1e      	ldr	r2, [pc, #120]	; (800d080 <cosf+0x80>)
 800d008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d00c:	4293      	cmp	r3, r2
 800d00e:	dc06      	bgt.n	800d01e <cosf+0x1e>
 800d010:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800d084 <cosf+0x84>
 800d014:	b003      	add	sp, #12
 800d016:	f85d eb04 	ldr.w	lr, [sp], #4
 800d01a:	f000 bb6d 	b.w	800d6f8 <__kernel_cosf>
 800d01e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d022:	db04      	blt.n	800d02e <cosf+0x2e>
 800d024:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d028:	b003      	add	sp, #12
 800d02a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d02e:	4668      	mov	r0, sp
 800d030:	f000 fa22 	bl	800d478 <__ieee754_rem_pio2f>
 800d034:	f000 0003 	and.w	r0, r0, #3
 800d038:	2801      	cmp	r0, #1
 800d03a:	d009      	beq.n	800d050 <cosf+0x50>
 800d03c:	2802      	cmp	r0, #2
 800d03e:	d010      	beq.n	800d062 <cosf+0x62>
 800d040:	b9b0      	cbnz	r0, 800d070 <cosf+0x70>
 800d042:	eddd 0a01 	vldr	s1, [sp, #4]
 800d046:	ed9d 0a00 	vldr	s0, [sp]
 800d04a:	f000 fb55 	bl	800d6f8 <__kernel_cosf>
 800d04e:	e7eb      	b.n	800d028 <cosf+0x28>
 800d050:	eddd 0a01 	vldr	s1, [sp, #4]
 800d054:	ed9d 0a00 	vldr	s0, [sp]
 800d058:	f000 fe24 	bl	800dca4 <__kernel_sinf>
 800d05c:	eeb1 0a40 	vneg.f32	s0, s0
 800d060:	e7e2      	b.n	800d028 <cosf+0x28>
 800d062:	eddd 0a01 	vldr	s1, [sp, #4]
 800d066:	ed9d 0a00 	vldr	s0, [sp]
 800d06a:	f000 fb45 	bl	800d6f8 <__kernel_cosf>
 800d06e:	e7f5      	b.n	800d05c <cosf+0x5c>
 800d070:	eddd 0a01 	vldr	s1, [sp, #4]
 800d074:	ed9d 0a00 	vldr	s0, [sp]
 800d078:	2001      	movs	r0, #1
 800d07a:	f000 fe13 	bl	800dca4 <__kernel_sinf>
 800d07e:	e7d3      	b.n	800d028 <cosf+0x28>
 800d080:	3f490fd8 	.word	0x3f490fd8
 800d084:	00000000 	.word	0x00000000

0800d088 <sinf>:
 800d088:	ee10 3a10 	vmov	r3, s0
 800d08c:	b507      	push	{r0, r1, r2, lr}
 800d08e:	4a1f      	ldr	r2, [pc, #124]	; (800d10c <sinf+0x84>)
 800d090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d094:	4293      	cmp	r3, r2
 800d096:	dc07      	bgt.n	800d0a8 <sinf+0x20>
 800d098:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d110 <sinf+0x88>
 800d09c:	2000      	movs	r0, #0
 800d09e:	b003      	add	sp, #12
 800d0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a4:	f000 bdfe 	b.w	800dca4 <__kernel_sinf>
 800d0a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d0ac:	db04      	blt.n	800d0b8 <sinf+0x30>
 800d0ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d0b2:	b003      	add	sp, #12
 800d0b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0b8:	4668      	mov	r0, sp
 800d0ba:	f000 f9dd 	bl	800d478 <__ieee754_rem_pio2f>
 800d0be:	f000 0003 	and.w	r0, r0, #3
 800d0c2:	2801      	cmp	r0, #1
 800d0c4:	d00a      	beq.n	800d0dc <sinf+0x54>
 800d0c6:	2802      	cmp	r0, #2
 800d0c8:	d00f      	beq.n	800d0ea <sinf+0x62>
 800d0ca:	b9c0      	cbnz	r0, 800d0fe <sinf+0x76>
 800d0cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0d0:	ed9d 0a00 	vldr	s0, [sp]
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	f000 fde5 	bl	800dca4 <__kernel_sinf>
 800d0da:	e7ea      	b.n	800d0b2 <sinf+0x2a>
 800d0dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0e0:	ed9d 0a00 	vldr	s0, [sp]
 800d0e4:	f000 fb08 	bl	800d6f8 <__kernel_cosf>
 800d0e8:	e7e3      	b.n	800d0b2 <sinf+0x2a>
 800d0ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0ee:	ed9d 0a00 	vldr	s0, [sp]
 800d0f2:	2001      	movs	r0, #1
 800d0f4:	f000 fdd6 	bl	800dca4 <__kernel_sinf>
 800d0f8:	eeb1 0a40 	vneg.f32	s0, s0
 800d0fc:	e7d9      	b.n	800d0b2 <sinf+0x2a>
 800d0fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800d102:	ed9d 0a00 	vldr	s0, [sp]
 800d106:	f000 faf7 	bl	800d6f8 <__kernel_cosf>
 800d10a:	e7f5      	b.n	800d0f8 <sinf+0x70>
 800d10c:	3f490fd8 	.word	0x3f490fd8
 800d110:	00000000 	.word	0x00000000

0800d114 <truncf>:
 800d114:	ee10 1a10 	vmov	r1, s0
 800d118:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800d11c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d120:	2a16      	cmp	r2, #22
 800d122:	dc0a      	bgt.n	800d13a <truncf+0x26>
 800d124:	2a00      	cmp	r2, #0
 800d126:	bfa5      	ittet	ge
 800d128:	4b06      	ldrge	r3, [pc, #24]	; (800d144 <truncf+0x30>)
 800d12a:	4113      	asrge	r3, r2
 800d12c:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 800d130:	ea21 0303 	bicge.w	r3, r1, r3
 800d134:	ee00 3a10 	vmov	s0, r3
 800d138:	4770      	bx	lr
 800d13a:	2a80      	cmp	r2, #128	; 0x80
 800d13c:	bf08      	it	eq
 800d13e:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 800d142:	4770      	bx	lr
 800d144:	007fffff 	.word	0x007fffff

0800d148 <asinf>:
 800d148:	b508      	push	{r3, lr}
 800d14a:	ed2d 8b02 	vpush	{d8}
 800d14e:	eeb0 8a40 	vmov.f32	s16, s0
 800d152:	f000 f853 	bl	800d1fc <__ieee754_asinf>
 800d156:	eeb4 8a48 	vcmp.f32	s16, s16
 800d15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15e:	eef0 8a40 	vmov.f32	s17, s0
 800d162:	d615      	bvs.n	800d190 <asinf+0x48>
 800d164:	eeb0 0a48 	vmov.f32	s0, s16
 800d168:	f000 fde4 	bl	800dd34 <fabsf>
 800d16c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d170:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d178:	dd0a      	ble.n	800d190 <asinf+0x48>
 800d17a:	f7fb f997 	bl	80084ac <__errno>
 800d17e:	ecbd 8b02 	vpop	{d8}
 800d182:	2321      	movs	r3, #33	; 0x21
 800d184:	6003      	str	r3, [r0, #0]
 800d186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d18a:	4804      	ldr	r0, [pc, #16]	; (800d19c <asinf+0x54>)
 800d18c:	f7fc b848 	b.w	8009220 <nanf>
 800d190:	eeb0 0a68 	vmov.f32	s0, s17
 800d194:	ecbd 8b02 	vpop	{d8}
 800d198:	bd08      	pop	{r3, pc}
 800d19a:	bf00      	nop
 800d19c:	0800f06f 	.word	0x0800f06f

0800d1a0 <log10f>:
 800d1a0:	b508      	push	{r3, lr}
 800d1a2:	ed2d 8b02 	vpush	{d8}
 800d1a6:	eeb0 8a40 	vmov.f32	s16, s0
 800d1aa:	f000 f90d 	bl	800d3c8 <__ieee754_log10f>
 800d1ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	d60f      	bvs.n	800d1d8 <log10f+0x38>
 800d1b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c0:	d80a      	bhi.n	800d1d8 <log10f+0x38>
 800d1c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ca:	d108      	bne.n	800d1de <log10f+0x3e>
 800d1cc:	f7fb f96e 	bl	80084ac <__errno>
 800d1d0:	2322      	movs	r3, #34	; 0x22
 800d1d2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d1f4 <log10f+0x54>
 800d1d6:	6003      	str	r3, [r0, #0]
 800d1d8:	ecbd 8b02 	vpop	{d8}
 800d1dc:	bd08      	pop	{r3, pc}
 800d1de:	f7fb f965 	bl	80084ac <__errno>
 800d1e2:	ecbd 8b02 	vpop	{d8}
 800d1e6:	2321      	movs	r3, #33	; 0x21
 800d1e8:	6003      	str	r3, [r0, #0]
 800d1ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d1ee:	4802      	ldr	r0, [pc, #8]	; (800d1f8 <log10f+0x58>)
 800d1f0:	f7fc b816 	b.w	8009220 <nanf>
 800d1f4:	ff800000 	.word	0xff800000
 800d1f8:	0800f06f 	.word	0x0800f06f

0800d1fc <__ieee754_asinf>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	ee10 5a10 	vmov	r5, s0
 800d202:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d206:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d20a:	ed2d 8b04 	vpush	{d8-d9}
 800d20e:	d10c      	bne.n	800d22a <__ieee754_asinf+0x2e>
 800d210:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800d388 <__ieee754_asinf+0x18c>
 800d214:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800d38c <__ieee754_asinf+0x190>
 800d218:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d21c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d220:	eeb0 0a67 	vmov.f32	s0, s15
 800d224:	ecbd 8b04 	vpop	{d8-d9}
 800d228:	bd38      	pop	{r3, r4, r5, pc}
 800d22a:	dd04      	ble.n	800d236 <__ieee754_asinf+0x3a>
 800d22c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d230:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d234:	e7f6      	b.n	800d224 <__ieee754_asinf+0x28>
 800d236:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d23a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d23e:	da0b      	bge.n	800d258 <__ieee754_asinf+0x5c>
 800d240:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d244:	da52      	bge.n	800d2ec <__ieee754_asinf+0xf0>
 800d246:	eddf 7a52 	vldr	s15, [pc, #328]	; 800d390 <__ieee754_asinf+0x194>
 800d24a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d24e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d256:	dce5      	bgt.n	800d224 <__ieee754_asinf+0x28>
 800d258:	f000 fd6c 	bl	800dd34 <fabsf>
 800d25c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d260:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d264:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d268:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800d394 <__ieee754_asinf+0x198>
 800d26c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800d398 <__ieee754_asinf+0x19c>
 800d270:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800d39c <__ieee754_asinf+0x1a0>
 800d274:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d278:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d3a0 <__ieee754_asinf+0x1a4>
 800d27c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d280:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d3a4 <__ieee754_asinf+0x1a8>
 800d284:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d288:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d3a8 <__ieee754_asinf+0x1ac>
 800d28c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d290:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d3ac <__ieee754_asinf+0x1b0>
 800d294:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d298:	eddf 7a45 	vldr	s15, [pc, #276]	; 800d3b0 <__ieee754_asinf+0x1b4>
 800d29c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d2a0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d3b4 <__ieee754_asinf+0x1b8>
 800d2a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d2a8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d3b8 <__ieee754_asinf+0x1bc>
 800d2ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800d2b4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d2b8:	f000 fa1a 	bl	800d6f0 <__ieee754_sqrtf>
 800d2bc:	4b3f      	ldr	r3, [pc, #252]	; (800d3bc <__ieee754_asinf+0x1c0>)
 800d2be:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d2c2:	429c      	cmp	r4, r3
 800d2c4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d2c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d2cc:	dd3d      	ble.n	800d34a <__ieee754_asinf+0x14e>
 800d2ce:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d2d2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800d3c0 <__ieee754_asinf+0x1c4>
 800d2d6:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d2da:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d38c <__ieee754_asinf+0x190>
 800d2de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d2e2:	2d00      	cmp	r5, #0
 800d2e4:	bfd8      	it	le
 800d2e6:	eeb1 0a40 	vnegle.f32	s0, s0
 800d2ea:	e79b      	b.n	800d224 <__ieee754_asinf+0x28>
 800d2ec:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d2f0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d394 <__ieee754_asinf+0x198>
 800d2f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d398 <__ieee754_asinf+0x19c>
 800d2f8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800d3ac <__ieee754_asinf+0x1b0>
 800d2fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d300:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d3a0 <__ieee754_asinf+0x1a4>
 800d304:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d308:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d3a4 <__ieee754_asinf+0x1a8>
 800d30c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d310:	eddf 6a25 	vldr	s13, [pc, #148]	; 800d3a8 <__ieee754_asinf+0x1ac>
 800d314:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d318:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d39c <__ieee754_asinf+0x1a0>
 800d31c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d320:	eddf 6a23 	vldr	s13, [pc, #140]	; 800d3b0 <__ieee754_asinf+0x1b4>
 800d324:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d328:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800d3b4 <__ieee754_asinf+0x1b8>
 800d32c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d330:	eddf 6a21 	vldr	s13, [pc, #132]	; 800d3b8 <__ieee754_asinf+0x1bc>
 800d334:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d340:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d344:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d348:	e76c      	b.n	800d224 <__ieee754_asinf+0x28>
 800d34a:	ee10 3a10 	vmov	r3, s0
 800d34e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d352:	f023 030f 	bic.w	r3, r3, #15
 800d356:	ee07 3a10 	vmov	s14, r3
 800d35a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d35e:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d362:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d366:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800d36a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d388 <__ieee754_asinf+0x18c>
 800d36e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800d372:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800d376:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d3c4 <__ieee754_asinf+0x1c8>
 800d37a:	eeb0 6a40 	vmov.f32	s12, s0
 800d37e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d382:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d386:	e7aa      	b.n	800d2de <__ieee754_asinf+0xe2>
 800d388:	b33bbd2e 	.word	0xb33bbd2e
 800d38c:	3fc90fdb 	.word	0x3fc90fdb
 800d390:	7149f2ca 	.word	0x7149f2ca
 800d394:	3811ef08 	.word	0x3811ef08
 800d398:	3a4f7f04 	.word	0x3a4f7f04
 800d39c:	3e2aaaab 	.word	0x3e2aaaab
 800d3a0:	bd241146 	.word	0xbd241146
 800d3a4:	3e4e0aa8 	.word	0x3e4e0aa8
 800d3a8:	bea6b090 	.word	0xbea6b090
 800d3ac:	3d9dc62e 	.word	0x3d9dc62e
 800d3b0:	bf303361 	.word	0xbf303361
 800d3b4:	4001572d 	.word	0x4001572d
 800d3b8:	c019d139 	.word	0xc019d139
 800d3bc:	3f799999 	.word	0x3f799999
 800d3c0:	333bbd2e 	.word	0x333bbd2e
 800d3c4:	3f490fdb 	.word	0x3f490fdb

0800d3c8 <__ieee754_log10f>:
 800d3c8:	b508      	push	{r3, lr}
 800d3ca:	ee10 2a10 	vmov	r2, s0
 800d3ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d3d2:	ed2d 8b02 	vpush	{d8}
 800d3d6:	d108      	bne.n	800d3ea <__ieee754_log10f+0x22>
 800d3d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d460 <__ieee754_log10f+0x98>
 800d3dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d464 <__ieee754_log10f+0x9c>
 800d3e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d3e4:	ecbd 8b02 	vpop	{d8}
 800d3e8:	bd08      	pop	{r3, pc}
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	da02      	bge.n	800d3f4 <__ieee754_log10f+0x2c>
 800d3ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d3f2:	e7f3      	b.n	800d3dc <__ieee754_log10f+0x14>
 800d3f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d3f8:	db02      	blt.n	800d400 <__ieee754_log10f+0x38>
 800d3fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3fe:	e7f1      	b.n	800d3e4 <__ieee754_log10f+0x1c>
 800d400:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d404:	bfbf      	itttt	lt
 800d406:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800d468 <__ieee754_log10f+0xa0>
 800d40a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d40e:	f06f 0118 	mvnlt.w	r1, #24
 800d412:	ee17 2a90 	vmovlt	r2, s15
 800d416:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d41a:	bfa8      	it	ge
 800d41c:	2100      	movge	r1, #0
 800d41e:	3b7f      	subs	r3, #127	; 0x7f
 800d420:	440b      	add	r3, r1
 800d422:	0fd9      	lsrs	r1, r3, #31
 800d424:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d428:	ee07 3a90 	vmov	s15, r3
 800d42c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d430:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800d434:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d438:	ee00 3a10 	vmov	s0, r3
 800d43c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d440:	f000 fd34 	bl	800deac <__ieee754_logf>
 800d444:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d46c <__ieee754_log10f+0xa4>
 800d448:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d44c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d470 <__ieee754_log10f+0xa8>
 800d450:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d454:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d474 <__ieee754_log10f+0xac>
 800d458:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d45c:	e7c2      	b.n	800d3e4 <__ieee754_log10f+0x1c>
 800d45e:	bf00      	nop
 800d460:	cc000000 	.word	0xcc000000
 800d464:	00000000 	.word	0x00000000
 800d468:	4c000000 	.word	0x4c000000
 800d46c:	3ede5bd9 	.word	0x3ede5bd9
 800d470:	355427db 	.word	0x355427db
 800d474:	3e9a2080 	.word	0x3e9a2080

0800d478 <__ieee754_rem_pio2f>:
 800d478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d47a:	ee10 6a10 	vmov	r6, s0
 800d47e:	4b8e      	ldr	r3, [pc, #568]	; (800d6b8 <__ieee754_rem_pio2f+0x240>)
 800d480:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d484:	429d      	cmp	r5, r3
 800d486:	b087      	sub	sp, #28
 800d488:	eef0 7a40 	vmov.f32	s15, s0
 800d48c:	4604      	mov	r4, r0
 800d48e:	dc05      	bgt.n	800d49c <__ieee754_rem_pio2f+0x24>
 800d490:	2300      	movs	r3, #0
 800d492:	ed80 0a00 	vstr	s0, [r0]
 800d496:	6043      	str	r3, [r0, #4]
 800d498:	2000      	movs	r0, #0
 800d49a:	e01a      	b.n	800d4d2 <__ieee754_rem_pio2f+0x5a>
 800d49c:	4b87      	ldr	r3, [pc, #540]	; (800d6bc <__ieee754_rem_pio2f+0x244>)
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	dc46      	bgt.n	800d530 <__ieee754_rem_pio2f+0xb8>
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d6c0 <__ieee754_rem_pio2f+0x248>
 800d4a8:	4b86      	ldr	r3, [pc, #536]	; (800d6c4 <__ieee754_rem_pio2f+0x24c>)
 800d4aa:	f025 050f 	bic.w	r5, r5, #15
 800d4ae:	dd1f      	ble.n	800d4f0 <__ieee754_rem_pio2f+0x78>
 800d4b0:	429d      	cmp	r5, r3
 800d4b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4b6:	d00e      	beq.n	800d4d6 <__ieee754_rem_pio2f+0x5e>
 800d4b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d6c8 <__ieee754_rem_pio2f+0x250>
 800d4bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d4c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4c4:	ed80 0a00 	vstr	s0, [r0]
 800d4c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4cc:	2001      	movs	r0, #1
 800d4ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800d4d2:	b007      	add	sp, #28
 800d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d6cc <__ieee754_rem_pio2f+0x254>
 800d4da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d6d0 <__ieee754_rem_pio2f+0x258>
 800d4de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d4e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4ea:	edc0 6a00 	vstr	s13, [r0]
 800d4ee:	e7eb      	b.n	800d4c8 <__ieee754_rem_pio2f+0x50>
 800d4f0:	429d      	cmp	r5, r3
 800d4f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d4f6:	d00e      	beq.n	800d516 <__ieee754_rem_pio2f+0x9e>
 800d4f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d6c8 <__ieee754_rem_pio2f+0x250>
 800d4fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d500:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d504:	ed80 0a00 	vstr	s0, [r0]
 800d508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	edc4 7a01 	vstr	s15, [r4, #4]
 800d514:	e7dd      	b.n	800d4d2 <__ieee754_rem_pio2f+0x5a>
 800d516:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d6cc <__ieee754_rem_pio2f+0x254>
 800d51a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d6d0 <__ieee754_rem_pio2f+0x258>
 800d51e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d522:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d526:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d52a:	edc0 6a00 	vstr	s13, [r0]
 800d52e:	e7eb      	b.n	800d508 <__ieee754_rem_pio2f+0x90>
 800d530:	4b68      	ldr	r3, [pc, #416]	; (800d6d4 <__ieee754_rem_pio2f+0x25c>)
 800d532:	429d      	cmp	r5, r3
 800d534:	dc72      	bgt.n	800d61c <__ieee754_rem_pio2f+0x1a4>
 800d536:	f000 fbfd 	bl	800dd34 <fabsf>
 800d53a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d6d8 <__ieee754_rem_pio2f+0x260>
 800d53e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d542:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d54a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d54e:	ee17 0a90 	vmov	r0, s15
 800d552:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d6c0 <__ieee754_rem_pio2f+0x248>
 800d556:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d55a:	281f      	cmp	r0, #31
 800d55c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d6c8 <__ieee754_rem_pio2f+0x250>
 800d560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d564:	eeb1 6a47 	vneg.f32	s12, s14
 800d568:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d56c:	ee16 2a90 	vmov	r2, s13
 800d570:	dc1c      	bgt.n	800d5ac <__ieee754_rem_pio2f+0x134>
 800d572:	495a      	ldr	r1, [pc, #360]	; (800d6dc <__ieee754_rem_pio2f+0x264>)
 800d574:	1e47      	subs	r7, r0, #1
 800d576:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d57a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d57e:	428b      	cmp	r3, r1
 800d580:	d014      	beq.n	800d5ac <__ieee754_rem_pio2f+0x134>
 800d582:	6022      	str	r2, [r4, #0]
 800d584:	ed94 7a00 	vldr	s14, [r4]
 800d588:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d592:	ed84 0a01 	vstr	s0, [r4, #4]
 800d596:	da9c      	bge.n	800d4d2 <__ieee754_rem_pio2f+0x5a>
 800d598:	eeb1 7a47 	vneg.f32	s14, s14
 800d59c:	eeb1 0a40 	vneg.f32	s0, s0
 800d5a0:	ed84 7a00 	vstr	s14, [r4]
 800d5a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d5a8:	4240      	negs	r0, r0
 800d5aa:	e792      	b.n	800d4d2 <__ieee754_rem_pio2f+0x5a>
 800d5ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d5b0:	15eb      	asrs	r3, r5, #23
 800d5b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d5b6:	2d08      	cmp	r5, #8
 800d5b8:	dde3      	ble.n	800d582 <__ieee754_rem_pio2f+0x10a>
 800d5ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d6cc <__ieee754_rem_pio2f+0x254>
 800d5be:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d6d0 <__ieee754_rem_pio2f+0x258>
 800d5c2:	eef0 6a40 	vmov.f32	s13, s0
 800d5c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d5ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d5ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d5d2:	eef0 7a40 	vmov.f32	s15, s0
 800d5d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d5da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d5de:	ee15 2a90 	vmov	r2, s11
 800d5e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d5e6:	1a5b      	subs	r3, r3, r1
 800d5e8:	2b19      	cmp	r3, #25
 800d5ea:	dc04      	bgt.n	800d5f6 <__ieee754_rem_pio2f+0x17e>
 800d5ec:	edc4 5a00 	vstr	s11, [r4]
 800d5f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d5f4:	e7c6      	b.n	800d584 <__ieee754_rem_pio2f+0x10c>
 800d5f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d6e0 <__ieee754_rem_pio2f+0x268>
 800d5fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d5fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d602:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d606:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d6e4 <__ieee754_rem_pio2f+0x26c>
 800d60a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d60e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d612:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d616:	ed84 7a00 	vstr	s14, [r4]
 800d61a:	e7b3      	b.n	800d584 <__ieee754_rem_pio2f+0x10c>
 800d61c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d620:	db06      	blt.n	800d630 <__ieee754_rem_pio2f+0x1b8>
 800d622:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d626:	edc0 7a01 	vstr	s15, [r0, #4]
 800d62a:	edc0 7a00 	vstr	s15, [r0]
 800d62e:	e733      	b.n	800d498 <__ieee754_rem_pio2f+0x20>
 800d630:	15ea      	asrs	r2, r5, #23
 800d632:	3a86      	subs	r2, #134	; 0x86
 800d634:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d640:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d6e8 <__ieee754_rem_pio2f+0x270>
 800d644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d64c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d650:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d654:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d65c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d660:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d664:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d668:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d670:	edcd 7a05 	vstr	s15, [sp, #20]
 800d674:	d11e      	bne.n	800d6b4 <__ieee754_rem_pio2f+0x23c>
 800d676:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67e:	bf14      	ite	ne
 800d680:	2302      	movne	r3, #2
 800d682:	2301      	moveq	r3, #1
 800d684:	4919      	ldr	r1, [pc, #100]	; (800d6ec <__ieee754_rem_pio2f+0x274>)
 800d686:	9101      	str	r1, [sp, #4]
 800d688:	2102      	movs	r1, #2
 800d68a:	9100      	str	r1, [sp, #0]
 800d68c:	a803      	add	r0, sp, #12
 800d68e:	4621      	mov	r1, r4
 800d690:	f000 f892 	bl	800d7b8 <__kernel_rem_pio2f>
 800d694:	2e00      	cmp	r6, #0
 800d696:	f6bf af1c 	bge.w	800d4d2 <__ieee754_rem_pio2f+0x5a>
 800d69a:	edd4 7a00 	vldr	s15, [r4]
 800d69e:	eef1 7a67 	vneg.f32	s15, s15
 800d6a2:	edc4 7a00 	vstr	s15, [r4]
 800d6a6:	edd4 7a01 	vldr	s15, [r4, #4]
 800d6aa:	eef1 7a67 	vneg.f32	s15, s15
 800d6ae:	edc4 7a01 	vstr	s15, [r4, #4]
 800d6b2:	e779      	b.n	800d5a8 <__ieee754_rem_pio2f+0x130>
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e7e5      	b.n	800d684 <__ieee754_rem_pio2f+0x20c>
 800d6b8:	3f490fd8 	.word	0x3f490fd8
 800d6bc:	4016cbe3 	.word	0x4016cbe3
 800d6c0:	3fc90f80 	.word	0x3fc90f80
 800d6c4:	3fc90fd0 	.word	0x3fc90fd0
 800d6c8:	37354443 	.word	0x37354443
 800d6cc:	37354400 	.word	0x37354400
 800d6d0:	2e85a308 	.word	0x2e85a308
 800d6d4:	43490f80 	.word	0x43490f80
 800d6d8:	3f22f984 	.word	0x3f22f984
 800d6dc:	0800f430 	.word	0x0800f430
 800d6e0:	2e85a300 	.word	0x2e85a300
 800d6e4:	248d3132 	.word	0x248d3132
 800d6e8:	43800000 	.word	0x43800000
 800d6ec:	0800f4b0 	.word	0x0800f4b0

0800d6f0 <__ieee754_sqrtf>:
 800d6f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <__kernel_cosf>:
 800d6f8:	ee10 3a10 	vmov	r3, s0
 800d6fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d700:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d704:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d708:	da05      	bge.n	800d716 <__kernel_cosf+0x1e>
 800d70a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d70e:	ee17 2a90 	vmov	r2, s15
 800d712:	2a00      	cmp	r2, #0
 800d714:	d03d      	beq.n	800d792 <__kernel_cosf+0x9a>
 800d716:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d71a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d798 <__kernel_cosf+0xa0>
 800d71e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d79c <__kernel_cosf+0xa4>
 800d722:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d7a0 <__kernel_cosf+0xa8>
 800d726:	4a1f      	ldr	r2, [pc, #124]	; (800d7a4 <__kernel_cosf+0xac>)
 800d728:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d72c:	4293      	cmp	r3, r2
 800d72e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d7a8 <__kernel_cosf+0xb0>
 800d732:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d736:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d7ac <__kernel_cosf+0xb4>
 800d73a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d73e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d7b0 <__kernel_cosf+0xb8>
 800d742:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d746:	eeb0 7a66 	vmov.f32	s14, s13
 800d74a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d74e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d752:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d756:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d75a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d75e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d762:	dc04      	bgt.n	800d76e <__kernel_cosf+0x76>
 800d764:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d768:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d76c:	4770      	bx	lr
 800d76e:	4a11      	ldr	r2, [pc, #68]	; (800d7b4 <__kernel_cosf+0xbc>)
 800d770:	4293      	cmp	r3, r2
 800d772:	bfda      	itte	le
 800d774:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d778:	ee06 3a90 	vmovle	s13, r3
 800d77c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d780:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d784:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d78c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d790:	4770      	bx	lr
 800d792:	eeb0 0a46 	vmov.f32	s0, s12
 800d796:	4770      	bx	lr
 800d798:	ad47d74e 	.word	0xad47d74e
 800d79c:	310f74f6 	.word	0x310f74f6
 800d7a0:	3d2aaaab 	.word	0x3d2aaaab
 800d7a4:	3e999999 	.word	0x3e999999
 800d7a8:	b493f27c 	.word	0xb493f27c
 800d7ac:	37d00d01 	.word	0x37d00d01
 800d7b0:	bab60b61 	.word	0xbab60b61
 800d7b4:	3f480000 	.word	0x3f480000

0800d7b8 <__kernel_rem_pio2f>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	ed2d 8b04 	vpush	{d8-d9}
 800d7c0:	b0d9      	sub	sp, #356	; 0x164
 800d7c2:	4688      	mov	r8, r1
 800d7c4:	9002      	str	r0, [sp, #8]
 800d7c6:	49bb      	ldr	r1, [pc, #748]	; (800dab4 <__kernel_rem_pio2f+0x2fc>)
 800d7c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d7d0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800d7d4:	1e59      	subs	r1, r3, #1
 800d7d6:	1d13      	adds	r3, r2, #4
 800d7d8:	db27      	blt.n	800d82a <__kernel_rem_pio2f+0x72>
 800d7da:	f1b2 0b03 	subs.w	fp, r2, #3
 800d7de:	bf48      	it	mi
 800d7e0:	f102 0b04 	addmi.w	fp, r2, #4
 800d7e4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800d7e8:	1c45      	adds	r5, r0, #1
 800d7ea:	00ec      	lsls	r4, r5, #3
 800d7ec:	1a47      	subs	r7, r0, r1
 800d7ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800d7f2:	9403      	str	r4, [sp, #12]
 800d7f4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d7f8:	eb0a 0c01 	add.w	ip, sl, r1
 800d7fc:	ae1c      	add	r6, sp, #112	; 0x70
 800d7fe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800d802:	2400      	movs	r4, #0
 800d804:	4564      	cmp	r4, ip
 800d806:	dd12      	ble.n	800d82e <__kernel_rem_pio2f+0x76>
 800d808:	9b01      	ldr	r3, [sp, #4]
 800d80a:	ac1c      	add	r4, sp, #112	; 0x70
 800d80c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d810:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d814:	f04f 0c00 	mov.w	ip, #0
 800d818:	45d4      	cmp	ip, sl
 800d81a:	dc27      	bgt.n	800d86c <__kernel_rem_pio2f+0xb4>
 800d81c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d820:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800d824:	4627      	mov	r7, r4
 800d826:	2600      	movs	r6, #0
 800d828:	e016      	b.n	800d858 <__kernel_rem_pio2f+0xa0>
 800d82a:	2000      	movs	r0, #0
 800d82c:	e7dc      	b.n	800d7e8 <__kernel_rem_pio2f+0x30>
 800d82e:	42e7      	cmn	r7, r4
 800d830:	bf5d      	ittte	pl
 800d832:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d836:	ee07 3a90 	vmovpl	s15, r3
 800d83a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d83e:	eef0 7a47 	vmovmi.f32	s15, s14
 800d842:	ece6 7a01 	vstmia	r6!, {s15}
 800d846:	3401      	adds	r4, #1
 800d848:	e7dc      	b.n	800d804 <__kernel_rem_pio2f+0x4c>
 800d84a:	ecf9 6a01 	vldmia	r9!, {s13}
 800d84e:	ed97 7a00 	vldr	s14, [r7]
 800d852:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d856:	3601      	adds	r6, #1
 800d858:	428e      	cmp	r6, r1
 800d85a:	f1a7 0704 	sub.w	r7, r7, #4
 800d85e:	ddf4      	ble.n	800d84a <__kernel_rem_pio2f+0x92>
 800d860:	eceb 7a01 	vstmia	fp!, {s15}
 800d864:	f10c 0c01 	add.w	ip, ip, #1
 800d868:	3404      	adds	r4, #4
 800d86a:	e7d5      	b.n	800d818 <__kernel_rem_pio2f+0x60>
 800d86c:	ab08      	add	r3, sp, #32
 800d86e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d872:	eddf 8a93 	vldr	s17, [pc, #588]	; 800dac0 <__kernel_rem_pio2f+0x308>
 800d876:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800dabc <__kernel_rem_pio2f+0x304>
 800d87a:	9304      	str	r3, [sp, #16]
 800d87c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d880:	4656      	mov	r6, sl
 800d882:	00b3      	lsls	r3, r6, #2
 800d884:	9305      	str	r3, [sp, #20]
 800d886:	ab58      	add	r3, sp, #352	; 0x160
 800d888:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d88c:	ac08      	add	r4, sp, #32
 800d88e:	ab44      	add	r3, sp, #272	; 0x110
 800d890:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d894:	46a4      	mov	ip, r4
 800d896:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d89a:	4637      	mov	r7, r6
 800d89c:	2f00      	cmp	r7, #0
 800d89e:	f1a0 0004 	sub.w	r0, r0, #4
 800d8a2:	dc4f      	bgt.n	800d944 <__kernel_rem_pio2f+0x18c>
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d8aa:	f000 fa8d 	bl	800ddc8 <scalbnf>
 800d8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800d8b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d8b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d8ba:	f000 fa43 	bl	800dd44 <floorf>
 800d8be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d8c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d8c6:	2d00      	cmp	r5, #0
 800d8c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d8cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d8d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d8d4:	ee17 9a90 	vmov	r9, s15
 800d8d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d8dc:	dd44      	ble.n	800d968 <__kernel_rem_pio2f+0x1b0>
 800d8de:	f106 3cff 	add.w	ip, r6, #4294967295
 800d8e2:	ab08      	add	r3, sp, #32
 800d8e4:	f1c5 0e08 	rsb	lr, r5, #8
 800d8e8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d8ec:	fa47 f00e 	asr.w	r0, r7, lr
 800d8f0:	4481      	add	r9, r0
 800d8f2:	fa00 f00e 	lsl.w	r0, r0, lr
 800d8f6:	1a3f      	subs	r7, r7, r0
 800d8f8:	f1c5 0007 	rsb	r0, r5, #7
 800d8fc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d900:	4107      	asrs	r7, r0
 800d902:	2f00      	cmp	r7, #0
 800d904:	dd3f      	ble.n	800d986 <__kernel_rem_pio2f+0x1ce>
 800d906:	f04f 0e00 	mov.w	lr, #0
 800d90a:	f109 0901 	add.w	r9, r9, #1
 800d90e:	4673      	mov	r3, lr
 800d910:	4576      	cmp	r6, lr
 800d912:	dc6b      	bgt.n	800d9ec <__kernel_rem_pio2f+0x234>
 800d914:	2d00      	cmp	r5, #0
 800d916:	dd04      	ble.n	800d922 <__kernel_rem_pio2f+0x16a>
 800d918:	2d01      	cmp	r5, #1
 800d91a:	d078      	beq.n	800da0e <__kernel_rem_pio2f+0x256>
 800d91c:	2d02      	cmp	r5, #2
 800d91e:	f000 8081 	beq.w	800da24 <__kernel_rem_pio2f+0x26c>
 800d922:	2f02      	cmp	r7, #2
 800d924:	d12f      	bne.n	800d986 <__kernel_rem_pio2f+0x1ce>
 800d926:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d92a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d92e:	b353      	cbz	r3, 800d986 <__kernel_rem_pio2f+0x1ce>
 800d930:	4628      	mov	r0, r5
 800d932:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d936:	f000 fa47 	bl	800ddc8 <scalbnf>
 800d93a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d93e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d942:	e020      	b.n	800d986 <__kernel_rem_pio2f+0x1ce>
 800d944:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d948:	3f01      	subs	r7, #1
 800d94a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d952:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d956:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d95a:	ecac 0a01 	vstmia	ip!, {s0}
 800d95e:	ed90 0a00 	vldr	s0, [r0]
 800d962:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d966:	e799      	b.n	800d89c <__kernel_rem_pio2f+0xe4>
 800d968:	d105      	bne.n	800d976 <__kernel_rem_pio2f+0x1be>
 800d96a:	1e70      	subs	r0, r6, #1
 800d96c:	ab08      	add	r3, sp, #32
 800d96e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d972:	11ff      	asrs	r7, r7, #7
 800d974:	e7c5      	b.n	800d902 <__kernel_rem_pio2f+0x14a>
 800d976:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d97a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d982:	da31      	bge.n	800d9e8 <__kernel_rem_pio2f+0x230>
 800d984:	2700      	movs	r7, #0
 800d986:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98e:	f040 809b 	bne.w	800dac8 <__kernel_rem_pio2f+0x310>
 800d992:	1e74      	subs	r4, r6, #1
 800d994:	46a4      	mov	ip, r4
 800d996:	2000      	movs	r0, #0
 800d998:	45d4      	cmp	ip, sl
 800d99a:	da4a      	bge.n	800da32 <__kernel_rem_pio2f+0x27a>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d07a      	beq.n	800da96 <__kernel_rem_pio2f+0x2de>
 800d9a0:	ab08      	add	r3, sp, #32
 800d9a2:	3d08      	subs	r5, #8
 800d9a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 8081 	beq.w	800dab0 <__kernel_rem_pio2f+0x2f8>
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9b4:	00a5      	lsls	r5, r4, #2
 800d9b6:	f000 fa07 	bl	800ddc8 <scalbnf>
 800d9ba:	aa44      	add	r2, sp, #272	; 0x110
 800d9bc:	1d2b      	adds	r3, r5, #4
 800d9be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dac0 <__kernel_rem_pio2f+0x308>
 800d9c2:	18d1      	adds	r1, r2, r3
 800d9c4:	4622      	mov	r2, r4
 800d9c6:	2a00      	cmp	r2, #0
 800d9c8:	f280 80ae 	bge.w	800db28 <__kernel_rem_pio2f+0x370>
 800d9cc:	4622      	mov	r2, r4
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	f2c0 80cc 	blt.w	800db6c <__kernel_rem_pio2f+0x3b4>
 800d9d4:	a944      	add	r1, sp, #272	; 0x110
 800d9d6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800d9da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800dab8 <__kernel_rem_pio2f+0x300>
 800d9de:	eddf 7a39 	vldr	s15, [pc, #228]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	1aa1      	subs	r1, r4, r2
 800d9e6:	e0b6      	b.n	800db56 <__kernel_rem_pio2f+0x39e>
 800d9e8:	2702      	movs	r7, #2
 800d9ea:	e78c      	b.n	800d906 <__kernel_rem_pio2f+0x14e>
 800d9ec:	6820      	ldr	r0, [r4, #0]
 800d9ee:	b94b      	cbnz	r3, 800da04 <__kernel_rem_pio2f+0x24c>
 800d9f0:	b118      	cbz	r0, 800d9fa <__kernel_rem_pio2f+0x242>
 800d9f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d9f6:	6020      	str	r0, [r4, #0]
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	f10e 0e01 	add.w	lr, lr, #1
 800d9fe:	3404      	adds	r4, #4
 800da00:	4603      	mov	r3, r0
 800da02:	e785      	b.n	800d910 <__kernel_rem_pio2f+0x158>
 800da04:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800da08:	6020      	str	r0, [r4, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	e7f5      	b.n	800d9fa <__kernel_rem_pio2f+0x242>
 800da0e:	1e74      	subs	r4, r6, #1
 800da10:	a808      	add	r0, sp, #32
 800da12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800da16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800da1a:	f10d 0c20 	add.w	ip, sp, #32
 800da1e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800da22:	e77e      	b.n	800d922 <__kernel_rem_pio2f+0x16a>
 800da24:	1e74      	subs	r4, r6, #1
 800da26:	a808      	add	r0, sp, #32
 800da28:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800da2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800da30:	e7f3      	b.n	800da1a <__kernel_rem_pio2f+0x262>
 800da32:	ab08      	add	r3, sp, #32
 800da34:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800da38:	f10c 3cff 	add.w	ip, ip, #4294967295
 800da3c:	4318      	orrs	r0, r3
 800da3e:	e7ab      	b.n	800d998 <__kernel_rem_pio2f+0x1e0>
 800da40:	f10c 0c01 	add.w	ip, ip, #1
 800da44:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800da48:	2c00      	cmp	r4, #0
 800da4a:	d0f9      	beq.n	800da40 <__kernel_rem_pio2f+0x288>
 800da4c:	9b05      	ldr	r3, [sp, #20]
 800da4e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da52:	eb0d 0003 	add.w	r0, sp, r3
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	18f4      	adds	r4, r6, r3
 800da5a:	ab1c      	add	r3, sp, #112	; 0x70
 800da5c:	1c77      	adds	r7, r6, #1
 800da5e:	384c      	subs	r0, #76	; 0x4c
 800da60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da64:	4466      	add	r6, ip
 800da66:	42be      	cmp	r6, r7
 800da68:	f6ff af0b 	blt.w	800d882 <__kernel_rem_pio2f+0xca>
 800da6c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800da70:	f8dd e008 	ldr.w	lr, [sp, #8]
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da7c:	f04f 0c00 	mov.w	ip, #0
 800da80:	ece4 7a01 	vstmia	r4!, {s15}
 800da84:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800da88:	46a1      	mov	r9, r4
 800da8a:	458c      	cmp	ip, r1
 800da8c:	dd07      	ble.n	800da9e <__kernel_rem_pio2f+0x2e6>
 800da8e:	ece0 7a01 	vstmia	r0!, {s15}
 800da92:	3701      	adds	r7, #1
 800da94:	e7e7      	b.n	800da66 <__kernel_rem_pio2f+0x2ae>
 800da96:	9804      	ldr	r0, [sp, #16]
 800da98:	f04f 0c01 	mov.w	ip, #1
 800da9c:	e7d2      	b.n	800da44 <__kernel_rem_pio2f+0x28c>
 800da9e:	ecfe 6a01 	vldmia	lr!, {s13}
 800daa2:	ed39 7a01 	vldmdb	r9!, {s14}
 800daa6:	f10c 0c01 	add.w	ip, ip, #1
 800daaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800daae:	e7ec      	b.n	800da8a <__kernel_rem_pio2f+0x2d2>
 800dab0:	3c01      	subs	r4, #1
 800dab2:	e775      	b.n	800d9a0 <__kernel_rem_pio2f+0x1e8>
 800dab4:	0800f7f4 	.word	0x0800f7f4
 800dab8:	0800f7c8 	.word	0x0800f7c8
 800dabc:	43800000 	.word	0x43800000
 800dac0:	3b800000 	.word	0x3b800000
 800dac4:	00000000 	.word	0x00000000
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	eeb0 0a48 	vmov.f32	s0, s16
 800dace:	1a98      	subs	r0, r3, r2
 800dad0:	f000 f97a 	bl	800ddc8 <scalbnf>
 800dad4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800dabc <__kernel_rem_pio2f+0x304>
 800dad8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae0:	db19      	blt.n	800db16 <__kernel_rem_pio2f+0x35e>
 800dae2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800dac0 <__kernel_rem_pio2f+0x308>
 800dae6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800daea:	aa08      	add	r2, sp, #32
 800daec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daf0:	1c74      	adds	r4, r6, #1
 800daf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daf6:	3508      	adds	r5, #8
 800daf8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dafc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db04:	ee10 3a10 	vmov	r3, s0
 800db08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800db0c:	ee17 3a90 	vmov	r3, s15
 800db10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800db14:	e74b      	b.n	800d9ae <__kernel_rem_pio2f+0x1f6>
 800db16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db1a:	aa08      	add	r2, sp, #32
 800db1c:	ee10 3a10 	vmov	r3, s0
 800db20:	4634      	mov	r4, r6
 800db22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800db26:	e742      	b.n	800d9ae <__kernel_rem_pio2f+0x1f6>
 800db28:	a808      	add	r0, sp, #32
 800db2a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800db2e:	9001      	str	r0, [sp, #4]
 800db30:	ee07 0a90 	vmov	s15, r0
 800db34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db38:	3a01      	subs	r2, #1
 800db3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800db42:	ed61 7a01 	vstmdb	r1!, {s15}
 800db46:	e73e      	b.n	800d9c6 <__kernel_rem_pio2f+0x20e>
 800db48:	ecfc 6a01 	vldmia	ip!, {s13}
 800db4c:	ecb6 7a01 	vldmia	r6!, {s14}
 800db50:	eee6 7a87 	vfma.f32	s15, s13, s14
 800db54:	3001      	adds	r0, #1
 800db56:	4550      	cmp	r0, sl
 800db58:	dc01      	bgt.n	800db5e <__kernel_rem_pio2f+0x3a6>
 800db5a:	4288      	cmp	r0, r1
 800db5c:	ddf4      	ble.n	800db48 <__kernel_rem_pio2f+0x390>
 800db5e:	a858      	add	r0, sp, #352	; 0x160
 800db60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db64:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800db68:	3a01      	subs	r2, #1
 800db6a:	e730      	b.n	800d9ce <__kernel_rem_pio2f+0x216>
 800db6c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800db6e:	2a02      	cmp	r2, #2
 800db70:	dc09      	bgt.n	800db86 <__kernel_rem_pio2f+0x3ce>
 800db72:	2a00      	cmp	r2, #0
 800db74:	dc2a      	bgt.n	800dbcc <__kernel_rem_pio2f+0x414>
 800db76:	d043      	beq.n	800dc00 <__kernel_rem_pio2f+0x448>
 800db78:	f009 0007 	and.w	r0, r9, #7
 800db7c:	b059      	add	sp, #356	; 0x164
 800db7e:	ecbd 8b04 	vpop	{d8-d9}
 800db82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d1f5      	bne.n	800db78 <__kernel_rem_pio2f+0x3c0>
 800db8c:	ab30      	add	r3, sp, #192	; 0xc0
 800db8e:	442b      	add	r3, r5
 800db90:	461a      	mov	r2, r3
 800db92:	4619      	mov	r1, r3
 800db94:	4620      	mov	r0, r4
 800db96:	2800      	cmp	r0, #0
 800db98:	f1a1 0104 	sub.w	r1, r1, #4
 800db9c:	dc51      	bgt.n	800dc42 <__kernel_rem_pio2f+0x48a>
 800db9e:	4621      	mov	r1, r4
 800dba0:	2901      	cmp	r1, #1
 800dba2:	f1a2 0204 	sub.w	r2, r2, #4
 800dba6:	dc5c      	bgt.n	800dc62 <__kernel_rem_pio2f+0x4aa>
 800dba8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800dbac:	3304      	adds	r3, #4
 800dbae:	2c01      	cmp	r4, #1
 800dbb0:	dc67      	bgt.n	800dc82 <__kernel_rem_pio2f+0x4ca>
 800dbb2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800dbb6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800dbba:	2f00      	cmp	r7, #0
 800dbbc:	d167      	bne.n	800dc8e <__kernel_rem_pio2f+0x4d6>
 800dbbe:	edc8 6a00 	vstr	s13, [r8]
 800dbc2:	ed88 7a01 	vstr	s14, [r8, #4]
 800dbc6:	edc8 7a02 	vstr	s15, [r8, #8]
 800dbca:	e7d5      	b.n	800db78 <__kernel_rem_pio2f+0x3c0>
 800dbcc:	aa30      	add	r2, sp, #192	; 0xc0
 800dbce:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800dbd2:	4413      	add	r3, r2
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	da24      	bge.n	800dc24 <__kernel_rem_pio2f+0x46c>
 800dbda:	b34f      	cbz	r7, 800dc30 <__kernel_rem_pio2f+0x478>
 800dbdc:	eef1 7a47 	vneg.f32	s15, s14
 800dbe0:	edc8 7a00 	vstr	s15, [r8]
 800dbe4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800dbe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbec:	aa31      	add	r2, sp, #196	; 0xc4
 800dbee:	2301      	movs	r3, #1
 800dbf0:	429c      	cmp	r4, r3
 800dbf2:	da20      	bge.n	800dc36 <__kernel_rem_pio2f+0x47e>
 800dbf4:	b10f      	cbz	r7, 800dbfa <__kernel_rem_pio2f+0x442>
 800dbf6:	eef1 7a67 	vneg.f32	s15, s15
 800dbfa:	edc8 7a01 	vstr	s15, [r8, #4]
 800dbfe:	e7bb      	b.n	800db78 <__kernel_rem_pio2f+0x3c0>
 800dc00:	aa30      	add	r2, sp, #192	; 0xc0
 800dc02:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800dac4 <__kernel_rem_pio2f+0x30c>
 800dc06:	4413      	add	r3, r2
 800dc08:	2c00      	cmp	r4, #0
 800dc0a:	da05      	bge.n	800dc18 <__kernel_rem_pio2f+0x460>
 800dc0c:	b10f      	cbz	r7, 800dc12 <__kernel_rem_pio2f+0x45a>
 800dc0e:	eef1 7a67 	vneg.f32	s15, s15
 800dc12:	edc8 7a00 	vstr	s15, [r8]
 800dc16:	e7af      	b.n	800db78 <__kernel_rem_pio2f+0x3c0>
 800dc18:	ed33 7a01 	vldmdb	r3!, {s14}
 800dc1c:	3c01      	subs	r4, #1
 800dc1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc22:	e7f1      	b.n	800dc08 <__kernel_rem_pio2f+0x450>
 800dc24:	ed73 7a01 	vldmdb	r3!, {s15}
 800dc28:	3a01      	subs	r2, #1
 800dc2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc2e:	e7d2      	b.n	800dbd6 <__kernel_rem_pio2f+0x41e>
 800dc30:	eef0 7a47 	vmov.f32	s15, s14
 800dc34:	e7d4      	b.n	800dbe0 <__kernel_rem_pio2f+0x428>
 800dc36:	ecb2 7a01 	vldmia	r2!, {s14}
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc40:	e7d6      	b.n	800dbf0 <__kernel_rem_pio2f+0x438>
 800dc42:	edd1 7a00 	vldr	s15, [r1]
 800dc46:	edd1 6a01 	vldr	s13, [r1, #4]
 800dc4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc4e:	3801      	subs	r0, #1
 800dc50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc54:	ed81 7a00 	vstr	s14, [r1]
 800dc58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc5c:	edc1 7a01 	vstr	s15, [r1, #4]
 800dc60:	e799      	b.n	800db96 <__kernel_rem_pio2f+0x3de>
 800dc62:	edd2 7a00 	vldr	s15, [r2]
 800dc66:	edd2 6a01 	vldr	s13, [r2, #4]
 800dc6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc6e:	3901      	subs	r1, #1
 800dc70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc74:	ed82 7a00 	vstr	s14, [r2]
 800dc78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc7c:	edc2 7a01 	vstr	s15, [r2, #4]
 800dc80:	e78e      	b.n	800dba0 <__kernel_rem_pio2f+0x3e8>
 800dc82:	ed33 7a01 	vldmdb	r3!, {s14}
 800dc86:	3c01      	subs	r4, #1
 800dc88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc8c:	e78f      	b.n	800dbae <__kernel_rem_pio2f+0x3f6>
 800dc8e:	eef1 6a66 	vneg.f32	s13, s13
 800dc92:	eeb1 7a47 	vneg.f32	s14, s14
 800dc96:	edc8 6a00 	vstr	s13, [r8]
 800dc9a:	ed88 7a01 	vstr	s14, [r8, #4]
 800dc9e:	eef1 7a67 	vneg.f32	s15, s15
 800dca2:	e790      	b.n	800dbc6 <__kernel_rem_pio2f+0x40e>

0800dca4 <__kernel_sinf>:
 800dca4:	ee10 3a10 	vmov	r3, s0
 800dca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dcb0:	da04      	bge.n	800dcbc <__kernel_sinf+0x18>
 800dcb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dcb6:	ee17 3a90 	vmov	r3, s15
 800dcba:	b35b      	cbz	r3, 800dd14 <__kernel_sinf+0x70>
 800dcbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dcc0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dd18 <__kernel_sinf+0x74>
 800dcc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dd1c <__kernel_sinf+0x78>
 800dcc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dccc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dd20 <__kernel_sinf+0x7c>
 800dcd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dcd4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dd24 <__kernel_sinf+0x80>
 800dcd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dcdc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dd28 <__kernel_sinf+0x84>
 800dce0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dce8:	b930      	cbnz	r0, 800dcf8 <__kernel_sinf+0x54>
 800dcea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dd2c <__kernel_sinf+0x88>
 800dcee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dcf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dcf6:	4770      	bx	lr
 800dcf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dcfc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dd00:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dd04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dd08:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dd30 <__kernel_sinf+0x8c>
 800dd0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dd10:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	2f2ec9d3 	.word	0x2f2ec9d3
 800dd1c:	b2d72f34 	.word	0xb2d72f34
 800dd20:	3638ef1b 	.word	0x3638ef1b
 800dd24:	b9500d01 	.word	0xb9500d01
 800dd28:	3c088889 	.word	0x3c088889
 800dd2c:	be2aaaab 	.word	0xbe2aaaab
 800dd30:	3e2aaaab 	.word	0x3e2aaaab

0800dd34 <fabsf>:
 800dd34:	ee10 3a10 	vmov	r3, s0
 800dd38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd3c:	ee00 3a10 	vmov	s0, r3
 800dd40:	4770      	bx	lr
	...

0800dd44 <floorf>:
 800dd44:	ee10 3a10 	vmov	r3, s0
 800dd48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dd4c:	3a7f      	subs	r2, #127	; 0x7f
 800dd4e:	2a16      	cmp	r2, #22
 800dd50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd54:	dc2a      	bgt.n	800ddac <floorf+0x68>
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	da11      	bge.n	800dd7e <floorf+0x3a>
 800dd5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ddbc <floorf+0x78>
 800dd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	dd05      	ble.n	800dd78 <floorf+0x34>
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	da23      	bge.n	800ddb8 <floorf+0x74>
 800dd70:	4a13      	ldr	r2, [pc, #76]	; (800ddc0 <floorf+0x7c>)
 800dd72:	2900      	cmp	r1, #0
 800dd74:	bf18      	it	ne
 800dd76:	4613      	movne	r3, r2
 800dd78:	ee00 3a10 	vmov	s0, r3
 800dd7c:	4770      	bx	lr
 800dd7e:	4911      	ldr	r1, [pc, #68]	; (800ddc4 <floorf+0x80>)
 800dd80:	4111      	asrs	r1, r2
 800dd82:	420b      	tst	r3, r1
 800dd84:	d0fa      	beq.n	800dd7c <floorf+0x38>
 800dd86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ddbc <floorf+0x78>
 800dd8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	ddef      	ble.n	800dd78 <floorf+0x34>
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bfbe      	ittt	lt
 800dd9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800dda0:	fa40 f202 	asrlt.w	r2, r0, r2
 800dda4:	189b      	addlt	r3, r3, r2
 800dda6:	ea23 0301 	bic.w	r3, r3, r1
 800ddaa:	e7e5      	b.n	800dd78 <floorf+0x34>
 800ddac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ddb0:	d3e4      	bcc.n	800dd7c <floorf+0x38>
 800ddb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ddb6:	4770      	bx	lr
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e7dd      	b.n	800dd78 <floorf+0x34>
 800ddbc:	7149f2ca 	.word	0x7149f2ca
 800ddc0:	bf800000 	.word	0xbf800000
 800ddc4:	007fffff 	.word	0x007fffff

0800ddc8 <scalbnf>:
 800ddc8:	ee10 3a10 	vmov	r3, s0
 800ddcc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ddd0:	d025      	beq.n	800de1e <scalbnf+0x56>
 800ddd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ddd6:	d302      	bcc.n	800ddde <scalbnf+0x16>
 800ddd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dddc:	4770      	bx	lr
 800ddde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800dde2:	d122      	bne.n	800de2a <scalbnf+0x62>
 800dde4:	4b2a      	ldr	r3, [pc, #168]	; (800de90 <scalbnf+0xc8>)
 800dde6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800de94 <scalbnf+0xcc>
 800ddea:	4298      	cmp	r0, r3
 800ddec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ddf0:	db16      	blt.n	800de20 <scalbnf+0x58>
 800ddf2:	ee10 3a10 	vmov	r3, s0
 800ddf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ddfa:	3a19      	subs	r2, #25
 800ddfc:	4402      	add	r2, r0
 800ddfe:	2afe      	cmp	r2, #254	; 0xfe
 800de00:	dd15      	ble.n	800de2e <scalbnf+0x66>
 800de02:	ee10 3a10 	vmov	r3, s0
 800de06:	eddf 7a24 	vldr	s15, [pc, #144]	; 800de98 <scalbnf+0xd0>
 800de0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800de9c <scalbnf+0xd4>
 800de0e:	2b00      	cmp	r3, #0
 800de10:	eeb0 7a67 	vmov.f32	s14, s15
 800de14:	bfb8      	it	lt
 800de16:	eef0 7a66 	vmovlt.f32	s15, s13
 800de1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800de1e:	4770      	bx	lr
 800de20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dea0 <scalbnf+0xd8>
 800de24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de28:	4770      	bx	lr
 800de2a:	0dd2      	lsrs	r2, r2, #23
 800de2c:	e7e6      	b.n	800ddfc <scalbnf+0x34>
 800de2e:	2a00      	cmp	r2, #0
 800de30:	dd06      	ble.n	800de40 <scalbnf+0x78>
 800de32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800de3a:	ee00 3a10 	vmov	s0, r3
 800de3e:	4770      	bx	lr
 800de40:	f112 0f16 	cmn.w	r2, #22
 800de44:	da1a      	bge.n	800de7c <scalbnf+0xb4>
 800de46:	f24c 3350 	movw	r3, #50000	; 0xc350
 800de4a:	4298      	cmp	r0, r3
 800de4c:	ee10 3a10 	vmov	r3, s0
 800de50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de54:	dd0a      	ble.n	800de6c <scalbnf+0xa4>
 800de56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800de98 <scalbnf+0xd0>
 800de5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800de9c <scalbnf+0xd4>
 800de5e:	eef0 7a40 	vmov.f32	s15, s0
 800de62:	2b00      	cmp	r3, #0
 800de64:	bf18      	it	ne
 800de66:	eeb0 0a47 	vmovne.f32	s0, s14
 800de6a:	e7db      	b.n	800de24 <scalbnf+0x5c>
 800de6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800dea0 <scalbnf+0xd8>
 800de70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dea4 <scalbnf+0xdc>
 800de74:	eef0 7a40 	vmov.f32	s15, s0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	e7f3      	b.n	800de64 <scalbnf+0x9c>
 800de7c:	3219      	adds	r2, #25
 800de7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800de86:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dea8 <scalbnf+0xe0>
 800de8a:	ee07 3a10 	vmov	s14, r3
 800de8e:	e7c4      	b.n	800de1a <scalbnf+0x52>
 800de90:	ffff3cb0 	.word	0xffff3cb0
 800de94:	4c000000 	.word	0x4c000000
 800de98:	7149f2ca 	.word	0x7149f2ca
 800de9c:	f149f2ca 	.word	0xf149f2ca
 800dea0:	0da24260 	.word	0x0da24260
 800dea4:	8da24260 	.word	0x8da24260
 800dea8:	33000000 	.word	0x33000000

0800deac <__ieee754_logf>:
 800deac:	ee10 3a10 	vmov	r3, s0
 800deb0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800deb4:	d106      	bne.n	800dec4 <__ieee754_logf+0x18>
 800deb6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e04c <__ieee754_logf+0x1a0>
 800deba:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e050 <__ieee754_logf+0x1a4>
 800debe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dec2:	4770      	bx	lr
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	da02      	bge.n	800dece <__ieee754_logf+0x22>
 800dec8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800decc:	e7f5      	b.n	800deba <__ieee754_logf+0xe>
 800dece:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ded2:	db02      	blt.n	800deda <__ieee754_logf+0x2e>
 800ded4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ded8:	4770      	bx	lr
 800deda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dede:	bfb8      	it	lt
 800dee0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e054 <__ieee754_logf+0x1a8>
 800dee4:	485c      	ldr	r0, [pc, #368]	; (800e058 <__ieee754_logf+0x1ac>)
 800dee6:	bfbe      	ittt	lt
 800dee8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800deec:	f06f 0118 	mvnlt.w	r1, #24
 800def0:	ee17 3a90 	vmovlt	r3, s15
 800def4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800def8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800defc:	4418      	add	r0, r3
 800defe:	bfa8      	it	ge
 800df00:	2100      	movge	r1, #0
 800df02:	3a7f      	subs	r2, #127	; 0x7f
 800df04:	440a      	add	r2, r1
 800df06:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800df0a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800df0e:	4319      	orrs	r1, r3
 800df10:	ee00 1a10 	vmov	s0, r1
 800df14:	4951      	ldr	r1, [pc, #324]	; (800e05c <__ieee754_logf+0x1b0>)
 800df16:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800df1a:	f103 000f 	add.w	r0, r3, #15
 800df1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df22:	4001      	ands	r1, r0
 800df24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df28:	bb89      	cbnz	r1, 800df8e <__ieee754_logf+0xe2>
 800df2a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800df2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df32:	d10f      	bne.n	800df54 <__ieee754_logf+0xa8>
 800df34:	2a00      	cmp	r2, #0
 800df36:	f000 8085 	beq.w	800e044 <__ieee754_logf+0x198>
 800df3a:	ee07 2a90 	vmov	s15, r2
 800df3e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e060 <__ieee754_logf+0x1b4>
 800df42:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e064 <__ieee754_logf+0x1b8>
 800df46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800df4e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800df52:	4770      	bx	lr
 800df54:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e068 <__ieee754_logf+0x1bc>
 800df58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df5c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800df60:	ee20 7a00 	vmul.f32	s14, s0, s0
 800df64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df68:	b912      	cbnz	r2, 800df70 <__ieee754_logf+0xc4>
 800df6a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df6e:	4770      	bx	lr
 800df70:	ee07 2a90 	vmov	s15, r2
 800df74:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e060 <__ieee754_logf+0x1b4>
 800df78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df7c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800df80:	ee37 0a40 	vsub.f32	s0, s14, s0
 800df84:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e064 <__ieee754_logf+0x1b8>
 800df88:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800df8c:	4770      	bx	lr
 800df8e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800df92:	ee70 7a27 	vadd.f32	s15, s0, s15
 800df96:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e06c <__ieee754_logf+0x1c0>
 800df9a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e070 <__ieee754_logf+0x1c4>
 800df9e:	4935      	ldr	r1, [pc, #212]	; (800e074 <__ieee754_logf+0x1c8>)
 800dfa0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800dfa4:	4419      	add	r1, r3
 800dfa6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800dfaa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dfae:	430b      	orrs	r3, r1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	ee07 2a90 	vmov	s15, r2
 800dfb6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800dfba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dfbe:	ee25 7a05 	vmul.f32	s14, s10, s10
 800dfc2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e078 <__ieee754_logf+0x1cc>
 800dfc6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800dfca:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e07c <__ieee754_logf+0x1d0>
 800dfce:	eee7 5a87 	vfma.f32	s11, s15, s14
 800dfd2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e080 <__ieee754_logf+0x1d4>
 800dfd6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800dfda:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800e084 <__ieee754_logf+0x1d8>
 800dfde:	eee7 4a87 	vfma.f32	s9, s15, s14
 800dfe2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e088 <__ieee754_logf+0x1dc>
 800dfe6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800dfea:	ee67 7a85 	vmul.f32	s15, s15, s10
 800dfee:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dff2:	dd1c      	ble.n	800e02e <__ieee754_logf+0x182>
 800dff4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dff8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dffc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e000:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e004:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e008:	b922      	cbnz	r2, 800e014 <__ieee754_logf+0x168>
 800e00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e00e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e012:	4770      	bx	lr
 800e014:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e060 <__ieee754_logf+0x1b4>
 800e018:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e020:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e024:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e064 <__ieee754_logf+0x1b8>
 800e028:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e02c:	4770      	bx	lr
 800e02e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e032:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e036:	2a00      	cmp	r2, #0
 800e038:	d0e9      	beq.n	800e00e <__ieee754_logf+0x162>
 800e03a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e060 <__ieee754_logf+0x1b4>
 800e03e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e042:	e7ed      	b.n	800e020 <__ieee754_logf+0x174>
 800e044:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e050 <__ieee754_logf+0x1a4>
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	cc000000 	.word	0xcc000000
 800e050:	00000000 	.word	0x00000000
 800e054:	4c000000 	.word	0x4c000000
 800e058:	004afb20 	.word	0x004afb20
 800e05c:	007ffff0 	.word	0x007ffff0
 800e060:	3717f7d1 	.word	0x3717f7d1
 800e064:	3f317180 	.word	0x3f317180
 800e068:	3eaaaaab 	.word	0x3eaaaaab
 800e06c:	3e1cd04f 	.word	0x3e1cd04f
 800e070:	3e178897 	.word	0x3e178897
 800e074:	ffcf5c30 	.word	0xffcf5c30
 800e078:	3e638e29 	.word	0x3e638e29
 800e07c:	3ecccccd 	.word	0x3ecccccd
 800e080:	3e3a3325 	.word	0x3e3a3325
 800e084:	3e924925 	.word	0x3e924925
 800e088:	3f2aaaab 	.word	0x3f2aaaab

0800e08c <_init>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	bf00      	nop
 800e090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e092:	bc08      	pop	{r3}
 800e094:	469e      	mov	lr, r3
 800e096:	4770      	bx	lr

0800e098 <_fini>:
 800e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09a:	bf00      	nop
 800e09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e09e:	bc08      	pop	{r3}
 800e0a0:	469e      	mov	lr, r3
 800e0a2:	4770      	bx	lr
